{
  "hash": "99e6d580b87ab10ccba2039ef177b443",
  "result": {
    "markdown": "---\ntitle: \"Date and Time\"\nauthor: \"Justin Baumann\"\nformat: \n  html:\n    toc: true\n  pdf:\n    toc: true\n    number-sections: true\n    colorlinks: true\n    self-contained: true\n\neditor: visual\n---\n\n\n# **Dealing with Date and Time in R**\n\nDate and time are often important variables in scientific data analysis. We are often interested in change over time and we also often do time series sampling. Learning how to manage dates and times in R is essential! Luckily, there is a user friendly and tidyverse friendly package that can help us with dates, times, and datetimes. That package is called 'lubridate' and we will learn all about it below. \n\nFirst, we need to load packages\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.4.0      ✔ purrr   1.0.0 \n✔ tibble  3.1.8      ✔ dplyr   1.0.10\n✔ tidyr   1.2.1      ✔ stringr 1.5.0 \n✔ readr   2.1.3      ✔ forcats 0.5.2 \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n```\n:::\n\n```{.r .cell-code}\nlibrary(lubridate)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: timechange\n\nAttaching package: 'lubridate'\n\nThe following objects are masked from 'package:base':\n\n    date, intersect, setdiff, union\n```\n:::\n:::\n\n# **Date and Time in R**\n\nR and really all programming languages have a difficult time with dates and times. Luckily, programmers have developed ways to get computer to understand dates and times as time series (so we can plot them on a graph axis and do analysis, for example).\n\nThere are several common formats of date and time that we don't need to get into, but for many tools we use in the field we have a timestamp that includes day, month, year, and time (hours, minutes, and maybe seconds). When all of that info ends up in 1 column of a .csv it can be annoying and difficult to get R to understand what that column means. There are tons of ways to solve this problem but the easiest is definitely to just use some simple functions in the Lubridate package!\n\n## **Read in some data to practice with**\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat<-read.csv('https://raw.githubusercontent.com/jbaumann3/Intro-to-R-for-Ecology/main/final_bucket_mesocosm_apex_data.csv')\nhead(dat) #take a look at the data to see how it is formatted\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  X                date probe_name probe_type value\n1 1 07/01/2021 00:00:00      B2_T2       Temp 18.10\n2 2 07/01/2021 00:00:00     B2_pH2         pH  4.53\n3 3 07/01/2021 00:00:00     B1_pH2         pH  8.12\n4 4 07/01/2021 00:00:00      B1_T2       Temp 17.70\n5 5 07/01/2021 00:00:00      B1_T1       Temp 17.70\n6 6 07/01/2021 00:00:00     B1_pH1         pH  8.12\n```\n:::\n\n```{.r .cell-code}\nstr(dat) #what are the attributes of each column (NOTE the attirbutes of the date column -- it is a factor and we want it to be a date/time0)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n'data.frame':\t47200 obs. of  5 variables:\n $ X         : int  1 2 3 4 5 6 7 8 9 10 ...\n $ date      : chr  \"07/01/2021 00:00:00\" \"07/01/2021 00:00:00\" \"07/01/2021 00:00:00\" \"07/01/2021 00:00:00\" ...\n $ probe_name: chr  \"B2_T2\" \"B2_pH2\" \"B1_pH2\" \"B1_T2\" ...\n $ probe_type: chr  \"Temp\" \"pH\" \"pH\" \"Temp\" ...\n $ value     : num  18.1 4.53 8.12 17.7 17.7 8.12 19.7 7.99 18.1 4.53 ...\n```\n:::\n:::\n\n\n------------------------------------------------------------------------\n\n## **Change date column (factor) to date/time format**\n\nTo do this we just need to recognize the order of or date/time. For example, we might have year, month, day, hours, minutes OR day, month, year, hours, minutes in order from left to right.\n\nIn this case we have: 07/01/2021 00:00:00 or month/day/year hours:minutes:seconds. We care about the order of these. So to simply, we have mdy_hms Lubridate has functions for all combinations of these formats. So, mdy_hms() is one. You may also have ymd_hm() or any other combo. You just enter your date info followed by an underscore and then your time info. Here's how you apply this!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(dat)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n'data.frame':\t47200 obs. of  5 variables:\n $ X         : int  1 2 3 4 5 6 7 8 9 10 ...\n $ date      : chr  \"07/01/2021 00:00:00\" \"07/01/2021 00:00:00\" \"07/01/2021 00:00:00\" \"07/01/2021 00:00:00\" ...\n $ probe_name: chr  \"B2_T2\" \"B2_pH2\" \"B1_pH2\" \"B1_T2\" ...\n $ probe_type: chr  \"Temp\" \"pH\" \"pH\" \"Temp\" ...\n $ value     : num  18.1 4.53 8.12 17.7 17.7 8.12 19.7 7.99 18.1 4.53 ...\n```\n:::\n\n```{.r .cell-code}\ndat$date<-mdy_hms(dat$date) #converts our date column into a date/time object based on the format (order) of our date and time \n\nstr(dat)# date is no longer a factor but is now a POSIXct object, which means it is in date/time format and can be used for plots and time series!\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n'data.frame':\t47200 obs. of  5 variables:\n $ X         : int  1 2 3 4 5 6 7 8 9 10 ...\n $ date      : POSIXct, format: \"2021-07-01 00:00:00\" \"2021-07-01 00:00:00\" ...\n $ probe_name: chr  \"B2_T2\" \"B2_pH2\" \"B1_pH2\" \"B1_T2\" ...\n $ probe_type: chr  \"Temp\" \"pH\" \"pH\" \"Temp\" ...\n $ value     : num  18.1 4.53 8.12 17.7 17.7 8.12 19.7 7.99 18.1 4.53 ...\n```\n:::\n:::\n\n\n------------------------------------------------------------------------\n\n## **Why this matters**\n\nHere we have two example graphs that show why dates are annoying and how using lubridate helps us!\n\n**A graph using the raw data alone (not changing date to a date/time object)**\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](datetime_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n**same graph after making date into a date/time object**\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](datetime_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n------------------------------------------------------------------------\n\n",
    "supporting": [
      "datetime_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}