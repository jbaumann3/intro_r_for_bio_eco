[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Introduction to R for Bio/Eco/Evo",
    "section": "",
    "text": "This is a Quarto website.\nI will do stuff here. updates things…"
  },
  {
    "objectID": "Lab1.html",
    "href": "Lab1.html",
    "title": "Lab 1: Intro to R, RStudio, and Quarto",
    "section": "",
    "text": "IN THIS TUTORIAL YOU WILL LEARN:\n1.) How to navigate RStudio\n2.) How to install and load packages\n3.) How to view data\n4.) How to read and write data files\n5.) How to use Quarto to make a document"
  },
  {
    "objectID": "Lab1.html#how-to-set-the-working-directory",
    "href": "Lab1.html#how-to-set-the-working-directory",
    "title": "Lab 1: Intro to R, RStudio, and Quarto",
    "section": "How to SET the working directory",
    "text": "How to SET the working directory\n1.) Using the “Files” tab to set manually: a.) Using the ‘…’ in the ‘Files’ tab you can select any directory (folder) on your computer. You can also set a google drive, box, dropbox, or other shared folder as your working directory if you’d like (as long as you are syncing a folder between the cloud and your computer – ASK me if you have questions about this!) b.) Once you navigate to a directory you still need to SET IT as your working directory. You do this in the “More” cog– select “Set as working directory”\n2.) Set working directory with code: We use the ‘setwd()’ function for this\n\nsetwd(\"C:/Users/Justin Baumann/Desktop/r_for_bioeco\")\n\nNote that I am using rstudio.mtholyoke.edu, a cloud version of RStudio. As such, my setwd() looks weird! ‘~’ just tells R I want to look in the same parent directory I am currently working in. Your version of this might be setwd(“C://username/biol234/code”) or similar. You use a “/” between each folder. As always, ask questions if you have them! The manual setting using “Files” is usually easier for most people."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "testpage.html",
    "href": "testpage.html",
    "title": "testpage",
    "section": "",
    "text": "This is a test page\n\n#here is some test code\n\nlibrary(tidyverse)\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.4.0      ✔ purrr   1.0.0 \n✔ tibble  3.1.8      ✔ dplyr   1.0.10\n✔ tidyr   1.2.1      ✔ stringr 1.5.0 \n✔ readr   2.1.3      ✔ forcats 0.5.2 \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n\nlibrary(palmerpenguins)\n\nAnd some more\n\nhead(penguins)\n\n# A tibble: 6 × 8\n  species island    bill_length_mm bill_depth_mm flipper_l…¹ body_…² sex    year\n  &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;       &lt;int&gt;   &lt;int&gt; &lt;fct&gt; &lt;int&gt;\n1 Adelie  Torgersen           39.1          18.7         181    3750 male   2007\n2 Adelie  Torgersen           39.5          17.4         186    3800 fema…  2007\n3 Adelie  Torgersen           40.3          18           195    3250 fema…  2007\n4 Adelie  Torgersen           NA            NA            NA      NA &lt;NA&gt;   2007\n5 Adelie  Torgersen           36.7          19.3         193    3450 fema…  2007\n6 Adelie  Torgersen           39.3          20.6         190    3650 male   2007\n# … with abbreviated variable names ¹​flipper_length_mm, ²​body_mass_g"
  },
  {
    "objectID": "getting_started.html",
    "href": "getting_started.html",
    "title": "Getting Started with RStudio",
    "section": "",
    "text": "IN THIS TUTORIAL YOU WILL LEARN:\n1.) How to access and/or install R and RStudio\n2.) How to navigate RStudio\n3.) How to set and change the working directory\n4.) How to setup an RStudio Project"
  },
  {
    "objectID": "getting_started.html#how-to-set-the-working-directory",
    "href": "getting_started.html#how-to-set-the-working-directory",
    "title": "Getting Started with RStudio",
    "section": "How to SET the working directory",
    "text": "How to SET the working directory\n1.) Using the “Files” tab to set manually: a.) Using the ‘…’ in the ‘Files’ tab you can select any directory (folder) on your computer. You can also set a google drive, box, dropbox, or other shared folder as your working directory if you’d like (as long as you are syncing a folder between the cloud and your computer – ASK me if you have questions about this!) b.) Once you navigate to a directory you still need to SET IT as your working directory. You do this in the “More” cog– select “Set as working directory”\n2.) Set working directory with code: We use the ‘setwd()’ function for this. Below is an example. You will need to replace the path details with your own!\n\nsetwd(\"C:/Users/Justin Baumann/Desktop/BIOL234_Biostats_MHC/Spring 2023/Labs\")"
  },
  {
    "objectID": "usingquarto.html",
    "href": "usingquarto.html",
    "title": "Getting Started with Quarto",
    "section": "",
    "text": "1.) Understand the purpose of a quarto document / any markdown file\n\n2.) Learn the basics of Quarto document formatting\n\n3.) Build a simple Quarto document!"
  },
  {
    "objectID": "usingquarto.html#to-make-a-quarto-document",
    "href": "usingquarto.html#to-make-a-quarto-document",
    "title": "Getting Started with Quarto",
    "section": "To make a Quarto document",
    "text": "To make a Quarto document\nclick file -&gt; new file -&gt; Quarto document / Complete the pop up prompts and then wait for the document to load. / We want to replace the top bit (our YAML header, everything between the two lines that contains just — at the top) with the following (use your name and title!)\n\n---\ntitle: \"Lab 1: Intro to R, RStudio, and Quarto\"\nauthor: \"Justin Baumann\"\nformat: \n  html:\n    toc: true\n  pdf:\n    toc: true\n    number-sections: true\n    colorlinks: true\neditor: visual\n---"
  },
  {
    "objectID": "usingquarto.html#formatting-text",
    "href": "usingquarto.html#formatting-text",
    "title": "Getting Started with Quarto",
    "section": "Formatting text",
    "text": "Formatting text\nUnlike in a regular R script, using the ‘#’ at the start of a line will not comment that line out. Instead, you can type as you would normally in an R Markdown (Rmd) document. We can format our text in the following ways:\n Bold: ‘’ on either end of a word, phrase, or line will make it bold! this is in bold** =’‘this is in bold’’ without the quotes around the **\n\nLine breaks: DO you want text to be on different lines? Insert a ’’ at the end of a line to make a line break!"
  },
  {
    "objectID": "usingquarto.html#making-a-code-chunk",
    "href": "usingquarto.html#making-a-code-chunk",
    "title": "Getting Started with Quarto",
    "section": "Making a code chunk",
    "text": "Making a code chunk\nSince qmd documents are text based, we need to tell RStudio when we want to actually include code. To do this, we will insert a code chunk. To insert a code chunk:\n\n1.) Use the keyboard shortcut ‘ctrl’+‘alt’+‘i’ (PC) or ‘cmd’+‘alt’+‘i’ (Mac) to insert a code chunk.\n\n2.) Navigate to the top bar (of the top left quadrant of RStudio), find “+c” at the right of the bar to insert an R code chink.\nOnce you have a code chunk inserted you will notice that the background of the chunk is gray instead of your default background color (white or black if you are in dark mode)\n\n#this is an example code chunk\n\n# Using '#' at the start of a line indicates a comment, which is not runnable code!"
  },
  {
    "objectID": "usingquarto.html#rendering-your-report",
    "href": "usingquarto.html#rendering-your-report",
    "title": "Getting Started with Quarto",
    "section": "Rendering your report",
    "text": "Rendering your report\nTo Visualize what your report will look like, click the ‘visual’ tab in the top bar (on the left). Note that if you do this, it CAN change your code–so be careful. You can also use the GUI to alter your report in the visual tab. This provides a nice alternative to the code based formatting options in the ‘source’ tab.\n\nTo actually render into an html or pdf document, you must click “Render”. You can use the arrow to the right of “Render” to choose render to html or render to pdf. I suggest using HTML most of the time but you can use pdf if you prefer. You will need to successfull Render your quarto document into an html or pdf report in order to turn in your labs!"
  },
  {
    "objectID": "rbasics.html",
    "href": "rbasics.html",
    "title": "Packages & reading/writing data",
    "section": "",
    "text": "1.) How to install and load libraries\n2.) How to view and inspect data\n3.) Read in data files & output data (write to file)"
  },
  {
    "objectID": "rbasics.html#installing-and-loading-libraries",
    "href": "rbasics.html#installing-and-loading-libraries",
    "title": "Packages & reading/writing data",
    "section": "Installing and Loading libraries",
    "text": "Installing and Loading libraries\nLibraries are packages of functions (and sometimes data) that we use to execute tasks in R. Packages are what make R so versatile! We can do almost anything with R if we learn how to utilize the right packages.\nIf we do not have a package already installed (for example, if you have only just downloaded R/ RStudio), we will need to use install.packages(‘packagename’) to install each package that we need.\n\ninstall.packages(tidyverse)\n\nOR - We can use the ‘Packages’ tab in the bottom right quadrant to install packages. Simply navigate to ‘Packages’, select ‘install packages’ and enter the package names you need (separate each package by commas). NOTE for users for rstudio.mtholyoke.edu – You cannot install packages to the Mt Holyoke cloud instance of R. If we need something that isn’t installed we will need to contact IT!\nIn order for a package to work, we must first load it! We do this as with the code libary(packagename)\n\nlibrary(tidyverse) #for data manipulation\nlibrary(palmerpenguins) #for some fun data!\n\nIt is best practice to load all of the packages you will need at the top of your script\nIn this course we will be following a best practices guide that utilizes a library called ‘Tidyverse’ for data manipulation and analysis. Tidyverse contains many packages all in one, including the very functional ‘dplyr’ and ‘ggplot2’ packages. You will almost always use Tidyverse, so make sure to load it in :)\nNote the ‘#’ with notes after them in the code chunk above. These are called comments. You can comment out any line of code in R by using a ‘#’. This is strongly recommended when you are programming. We will discuss more later!"
  },
  {
    "objectID": "rbasics.html#looking-at-data",
    "href": "rbasics.html#looking-at-data",
    "title": "Packages & reading/writing data",
    "section": "Looking at data!",
    "text": "Looking at data!\nR has integrated data sets that we can use to play around with code and learn. \nexamples: mtcars (a dataframe all about cars, this is available in R without loading a package), and iris (in the ‘vegan’ package, great for testing out ecology related functions and code)\nLoad a dataset R has some test datasets built into it. Let’s load one and look at it!\n\nmtcars \n\n                     mpg cyl  disp  hp drat    wt  qsec vs am gear carb\nMazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2\nValiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1\nDuster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4\nMerc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2\nMerc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2\nMerc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4\nMerc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4\nMerc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3\nMerc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3\nMerc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3\nCadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4\nLincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4\nChrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4\nFiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1\nHonda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2\nToyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1\nToyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1\nDodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2\nAMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2\nCamaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4\nPontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2\nFiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1\nPorsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2\nLotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2\nFord Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4\nFerrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6\nMaserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8\nVolvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2\n\n\nUsing head() and tail() Now let’s look at the data frame (df) using head() and tail()  These tell us the column names, and let us see the top or bottom 6 rows of data.\n\nhead(mtcars) \n\n                   mpg cyl disp  hp drat    wt  qsec vs am gear carb\nMazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\nValiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1\n\ntail(mtcars) #tail shows the header and the last 6 rows \n\n                mpg cyl  disp  hp drat    wt qsec vs am gear carb\nPorsche 914-2  26.0   4 120.3  91 4.43 2.140 16.7  0  1    5    2\nLotus Europa   30.4   4  95.1 113 3.77 1.513 16.9  1  1    5    2\nFord Pantera L 15.8   8 351.0 264 4.22 3.170 14.5  0  1    5    4\nFerrari Dino   19.7   6 145.0 175 3.62 2.770 15.5  0  1    5    6\nMaserati Bora  15.0   8 301.0 335 3.54 3.570 14.6  0  1    5    8\nVolvo 142E     21.4   4 121.0 109 4.11 2.780 18.6  1  1    4    2\n\n\ncolumn attributes If we want to see the attributes of each column we can use the str() function\n\nstr(mtcars) #str shows attributes of each column\n\n'data.frame':   32 obs. of  11 variables:\n $ mpg : num  21 21 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 ...\n $ cyl : num  6 6 4 6 8 6 8 4 4 6 ...\n $ disp: num  160 160 108 258 360 ...\n $ hp  : num  110 110 93 110 175 105 245 62 95 123 ...\n $ drat: num  3.9 3.9 3.85 3.08 3.15 2.76 3.21 3.69 3.92 3.92 ...\n $ wt  : num  2.62 2.88 2.32 3.21 3.44 ...\n $ qsec: num  16.5 17 18.6 19.4 17 ...\n $ vs  : num  0 0 1 1 0 1 0 1 1 1 ...\n $ am  : num  1 1 1 0 0 0 0 0 0 0 ...\n $ gear: num  4 4 4 3 3 3 3 4 4 4 ...\n $ carb: num  4 4 1 1 2 1 4 2 2 4 ...\n\n\nstr() is very important because it allows you to see the type of data in each column. Types include: integer, numeric, factor, date, and more. If the data in a column are factors instead of numbers you may have an issue in your data (your spreadsheet)\nChanging column attributes Importantly, you can change the type of the column. Here is an example\n\nmtcars$mpg=as.factor(mtcars$mpg) # Makes mpg a factor instead of a number\nstr(mtcars)\n\n'data.frame':   32 obs. of  11 variables:\n $ mpg : Factor w/ 25 levels \"10.4\",\"13.3\",..: 16 16 19 17 13 12 3 20 19 14 ...\n $ cyl : num  6 6 4 6 8 6 8 4 4 6 ...\n $ disp: num  160 160 108 258 360 ...\n $ hp  : num  110 110 93 110 175 105 245 62 95 123 ...\n $ drat: num  3.9 3.9 3.85 3.08 3.15 2.76 3.21 3.69 3.92 3.92 ...\n $ wt  : num  2.62 2.88 2.32 3.21 3.44 ...\n $ qsec: num  16.5 17 18.6 19.4 17 ...\n $ vs  : num  0 0 1 1 0 1 0 1 1 1 ...\n $ am  : num  1 1 1 0 0 0 0 0 0 0 ...\n $ gear: num  4 4 4 3 3 3 3 4 4 4 ...\n $ carb: num  4 4 1 1 2 1 4 2 2 4 ...\n\nmtcars$mpg=as.numeric(mtcars$mpg) #Changes mpg back to a number\nstr(mtcars)\n\n'data.frame':   32 obs. of  11 variables:\n $ mpg : num  16 16 19 17 13 12 3 20 19 14 ...\n $ cyl : num  6 6 4 6 8 6 8 4 4 6 ...\n $ disp: num  160 160 108 258 360 ...\n $ hp  : num  110 110 93 110 175 105 245 62 95 123 ...\n $ drat: num  3.9 3.9 3.85 3.08 3.15 2.76 3.21 3.69 3.92 3.92 ...\n $ wt  : num  2.62 2.88 2.32 3.21 3.44 ...\n $ qsec: num  16.5 17 18.6 19.4 17 ...\n $ vs  : num  0 0 1 1 0 1 0 1 1 1 ...\n $ am  : num  1 1 1 0 0 0 0 0 0 0 ...\n $ gear: num  4 4 4 3 3 3 3 4 4 4 ...\n $ carb: num  4 4 1 1 2 1 4 2 2 4 ...\n\n\nSummary statistics To see summary statistics on each column (mean, median, min, max, range), we can use summary()\n\nsummary(mtcars) #summarizes each column\n\n      mpg             cyl             disp             hp       \n Min.   : 1.00   Min.   :4.000   Min.   : 71.1   Min.   : 52.0  \n 1st Qu.: 6.75   1st Qu.:4.000   1st Qu.:120.8   1st Qu.: 96.5  \n Median :14.00   Median :6.000   Median :196.3   Median :123.0  \n Mean   :13.16   Mean   :6.188   Mean   :230.7   Mean   :146.7  \n 3rd Qu.:19.00   3rd Qu.:8.000   3rd Qu.:326.0   3rd Qu.:180.0  \n Max.   :25.00   Max.   :8.000   Max.   :472.0   Max.   :335.0  \n      drat             wt             qsec             vs        \n Min.   :2.760   Min.   :1.513   Min.   :14.50   Min.   :0.0000  \n 1st Qu.:3.080   1st Qu.:2.581   1st Qu.:16.89   1st Qu.:0.0000  \n Median :3.695   Median :3.325   Median :17.71   Median :0.0000  \n Mean   :3.597   Mean   :3.217   Mean   :17.85   Mean   :0.4375  \n 3rd Qu.:3.920   3rd Qu.:3.610   3rd Qu.:18.90   3rd Qu.:1.0000  \n Max.   :4.930   Max.   :5.424   Max.   :22.90   Max.   :1.0000  \n       am              gear            carb      \n Min.   :0.0000   Min.   :3.000   Min.   :1.000  \n 1st Qu.:0.0000   1st Qu.:3.000   1st Qu.:2.000  \n Median :0.0000   Median :4.000   Median :2.000  \n Mean   :0.4062   Mean   :3.688   Mean   :2.812  \n 3rd Qu.:1.0000   3rd Qu.:4.000   3rd Qu.:4.000  \n Max.   :1.0000   Max.   :5.000   Max.   :8.000  \n\n\nCounting rows and columns To see the number of rows and columns we can use nrow() and ncol()\n\nnrow(mtcars) #gives number of rows\n\n[1] 32\n\nncol(mtcars) #gives number of columns\n\n[1] 11\n\n\nNaming dataframes Rename mtcars and view in Environment tab in Rstudio\n\na&lt;-mtcars\na\n\n                    mpg cyl  disp  hp drat    wt  qsec vs am gear carb\nMazda RX4            16   6 160.0 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag        16   6 160.0 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710           19   4 108.0  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive       17   6 258.0 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout    13   8 360.0 175 3.15 3.440 17.02  0  0    3    2\nValiant              12   6 225.0 105 2.76 3.460 20.22  1  0    3    1\nDuster 360            3   8 360.0 245 3.21 3.570 15.84  0  0    3    4\nMerc 240D            20   4 146.7  62 3.69 3.190 20.00  1  0    4    2\nMerc 230             19   4 140.8  95 3.92 3.150 22.90  1  0    4    2\nMerc 280             14   6 167.6 123 3.92 3.440 18.30  1  0    4    4\nMerc 280C            11   6 167.6 123 3.92 3.440 18.90  1  0    4    4\nMerc 450SE            9   8 275.8 180 3.07 4.070 17.40  0  0    3    3\nMerc 450SL           10   8 275.8 180 3.07 3.730 17.60  0  0    3    3\nMerc 450SLC           6   8 275.8 180 3.07 3.780 18.00  0  0    3    3\nCadillac Fleetwood    1   8 472.0 205 2.93 5.250 17.98  0  0    3    4\nLincoln Continental   1   8 460.0 215 3.00 5.424 17.82  0  0    3    4\nChrysler Imperial     4   8 440.0 230 3.23 5.345 17.42  0  0    3    4\nFiat 128             24   4  78.7  66 4.08 2.200 19.47  1  1    4    1\nHonda Civic          23   4  75.7  52 4.93 1.615 18.52  1  1    4    2\nToyota Corolla       25   4  71.1  65 4.22 1.835 19.90  1  1    4    1\nToyota Corona        18   4 120.1  97 3.70 2.465 20.01  1  0    3    1\nDodge Challenger      7   8 318.0 150 2.76 3.520 16.87  0  0    3    2\nAMC Javelin           6   8 304.0 150 3.15 3.435 17.30  0  0    3    2\nCamaro Z28            2   8 350.0 245 3.73 3.840 15.41  0  0    3    4\nPontiac Firebird     14   8 400.0 175 3.08 3.845 17.05  0  0    3    2\nFiat X1-9            22   4  79.0  66 4.08 1.935 18.90  1  1    4    1\nPorsche 914-2        21   4 120.3  91 4.43 2.140 16.70  0  1    5    2\nLotus Europa         23   4  95.1 113 3.77 1.513 16.90  1  1    5    2\nFord Pantera L        8   8 351.0 264 4.22 3.170 14.50  0  1    5    4\nFerrari Dino         15   6 145.0 175 3.62 2.770 15.50  0  1    5    6\nMaserati Bora         5   8 301.0 335 3.54 3.570 14.60  0  1    5    8\nVolvo 142E           17   4 121.0 109 4.11 2.780 18.60  1  1    4    2\n\nhead(a)\n\n                  mpg cyl disp  hp drat    wt  qsec vs am gear carb\nMazda RX4          16   6  160 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag      16   6  160 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710         19   4  108  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive     17   6  258 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout  13   8  360 175 3.15 3.440 17.02  0  0    3    2\nValiant            12   6  225 105 2.76 3.460 20.22  1  0    3    1"
  },
  {
    "objectID": "rbasics.html#write-data-to-file-saving-data",
    "href": "rbasics.html#write-data-to-file-saving-data",
    "title": "Packages & reading/writing data",
    "section": "Write data to file (saving data)",
    "text": "Write data to file (saving data)\nWe use the write.csv function here. a= the name of the dataframe and the name we want to give the file goes after ‘file=’  The file name must be in quotes and must include an extension. Since we are using write.csv we MUST use .csv \n\nwrite.csv(a, file='mtcars.csv')"
  },
  {
    "objectID": "rbasics.html#read-a-file-in-import-data-into-r",
    "href": "rbasics.html#read-a-file-in-import-data-into-r",
    "title": "Packages & reading/writing data",
    "section": "Read a file in (import data into R)",
    "text": "Read a file in (import data into R)\nNOTE: if you have a .xls file make sure you convert to .csv. Ensure the file is clean and orderly (rows x columns). Only 1 excel tab can be in each .csv, so plan accordingly\n\nb&lt;-read.csv('mtcars.csv')\nhead(b)\n\n                  X mpg cyl disp  hp drat    wt  qsec vs am gear carb\n1         Mazda RX4  16   6  160 110 3.90 2.620 16.46  0  1    4    4\n2     Mazda RX4 Wag  16   6  160 110 3.90 2.875 17.02  0  1    4    4\n3        Datsun 710  19   4  108  93 3.85 2.320 18.61  1  1    4    1\n4    Hornet 4 Drive  17   6  258 110 3.08 3.215 19.44  1  0    3    1\n5 Hornet Sportabout  13   8  360 175 3.15 3.440 17.02  0  0    3    2\n6           Valiant  12   6  225 105 2.76 3.460 20.22  1  0    3    1\n\n\nYou are welcome to use other functions to read in data (including read_csv or read.xls). Especially for beginners, I strongly encourage you to use .csv format. Other file formats can get complicated (often unnecessarily complicated). That said, R can also handle .txt, .xls, images, shapefiles (for spatial analysis or GIS style work), etc. It is very versatile! Feel free to explore :)\nA note on read_csv -&gt; I consider this to be the “best” option for reading in .csv files. It is a ‘smarter’ version of read.csv and can automatically figure out what kind of data (numeric, factor, date, etc) each column is. If you use read.csv, you have often have to manually change these options."
  },
  {
    "objectID": "basic_graphs.html",
    "href": "basic_graphs.html",
    "title": "DATA VIZ 1",
    "section": "",
    "text": "Tutorials and Resources for graphs in ggplot\nBasics of ggplot\nColors with ggsci\nMany plots, 1 page w/ Patchwork\n\n\n\n1: What makes a good graph vs a bad graph?\nTake a look at some graphs of data for your field of interest. You may have a look at papers you have recently read or graphs you find in textbooks or assignments. Consider what you like or don’t like about these graphs. What looks good and/or makes a graph easy to interpret? What doesn’t? Making figures is both an art and a science.\nTo learn more about what makes graphs good (or bad), read Chapter 1 of Kieran Healy’s online data visualization book –&gt; What makes figures bad?\n\nTo continue your learning, have a look at this more detailed data visualization book by Claus Wilke Fundamentals of Data Visualization\n\n# 2: Let’s make some graphs!\nMaking nice looking graphs is a key feature of R and of data science in general. The best way to do this in R is through use of the ggplot2 package. This package is the most user friendly and flexible way to make nice plots in R. Notably, ggplot2 is a package that is contained within the tidyverse package, which is more of a style of R usage than a package. So, let’s load tidyverse and a few other useful packages for today.\n\n#Load packages\nlibrary(tidyverse)\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.4.0      ✔ purrr   1.0.0 \n✔ tibble  3.1.8      ✔ dplyr   1.0.10\n✔ tidyr   1.2.1      ✔ stringr 1.5.0 \n✔ readr   2.1.3      ✔ forcats 0.5.2 \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n\nlibrary(ggsci) #for easy color scales\nlibrary(patchwork) #to make multi-panel plots \nlibrary(palmerpenguins) # our fave penguin friends :)\n\n\n\n3: ggplot basics\n\nIntroductionggplot()histogramboxplotbar graphline graphscatter plotAdding error bars\n\n\nggplot2 is the preferred graphics package for most R users. It allows users to build a graph piece by piece from your own data through mapping of aesthetics. It is much easier to make pretty (publication and presentation quality) plots with ggplot2 than it is with the base plot function in R. If you prefer base plot() that is ok. You can use whatever you’d like but when we talk about graphs we will be using the language of ggplot.\nAttached here are the Tidyverse Cheat Sheets for ggplot2\n\n\n\n\n\n\nThe ggplot() function is the base of the ggplot2 package. Using it creates the space that we use to build a graph. If we run just the ggplot() function we will get a gray rectangle. This is the space (and background) of our plot!\n\nggplot()\n\n\n\n\nTo build a plot on the background, we must add to the ggplot call. First, we need to tell it what data to use. Next, we need to tell it where in the data frame to pull data from to build the axes and data points. The part of the ggplot() function we use to build a graph is called aes() or aesthetics.\nHere is an example using penguins: I am telling ggplot that the data we are using is ‘penguins’ and then defining the x and y axis in the aes() call with column names from penguins\n\nhead(penguins)\n\n# A tibble: 6 × 8\n  species island    bill_length_mm bill_depth_mm flipper_l…¹ body_…² sex    year\n  &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;       &lt;int&gt;   &lt;int&gt; &lt;fct&gt; &lt;int&gt;\n1 Adelie  Torgersen           39.1          18.7         181    3750 male   2007\n2 Adelie  Torgersen           39.5          17.4         186    3800 fema…  2007\n3 Adelie  Torgersen           40.3          18           195    3250 fema…  2007\n4 Adelie  Torgersen           NA            NA            NA      NA &lt;NA&gt;   2007\n5 Adelie  Torgersen           36.7          19.3         193    3450 fema…  2007\n6 Adelie  Torgersen           39.3          20.6         190    3650 male   2007\n# … with abbreviated variable names ¹​flipper_length_mm, ²​body_mass_g\n\nggplot(data=penguins, aes(x=species, y= bill_length_mm)) \n\n\n\n\nLike anything in R, we can give our plot a name and call it later\n\nplot1&lt;-ggplot(data=penguins, aes(x=species, y= bill_length_mm)) \n\nplot1\n\n\n\n\nThis is incredibly useful in ggplot as we can essentially add pieces to make a more complete graph\n\nplot1+\n  geom_boxplot()+\n  geom_point()+\n  theme_bw()\n\nWarning: Removed 2 rows containing non-finite values (`stat_boxplot()`).\n\n\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n\n\n\n\n\nBefore we get too excited about making perfect graphs, let’s take a look at the types of graphs we have available to us…\n\n\n\nHistograms are used to explore the frequency distribution of a single variable. We can check for normality (a bell curve) using this feature. We can also look for means, skewed data, and other trends.\n\nggplot(data=penguins, aes(bill_length_mm))+\n  geom_histogram()\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nWarning: Removed 2 rows containing non-finite values (`stat_bin()`).\n\n\n\n\n\nWithin geom_histogram we can use bin_width to change the width of our x-axis groupings.\n\nggplot(data=penguins, aes(bill_length_mm))+\n  geom_histogram(binwidth=5)\n\nWarning: Removed 2 rows containing non-finite values (`stat_bin()`).\n\n\n\n\n\n\n\nA boxplot is a really useful plot to assess median and range of data. It can also identify outliers! The defaults for a boxplot in ggplot produce a median and interquartile range (IQR). The 1st quartile is the bottom of the box and the 3rd quartile is the top. The whiskers show the spread of the data where the ends of the whiskers represent the data points that are the furthest from the median in either direction. Notably, if a data point is 1.5 * IQR from the box (either the 1st or 3rd quartile) it is an outlier. Outliers are excluded from whiskers and are presented as points. There\nHere’s an example\n\nggplot(data=penguins, aes(x=species, y= bill_length_mm)) +\n  geom_boxplot()\n\nWarning: Removed 2 rows containing non-finite values (`stat_boxplot()`).\n\n\n\n\n\nWe can use geom_violin to combine boxplot with a density plot (similar to a histogram) Here we can see the distribution of values within bill length by species.\n\nggplot(data=penguins, aes(x=species, y= bill_length_mm)) +\n  #geom_boxplot()+\n  geom_violin()\n\nWarning: Removed 2 rows containing non-finite values (`stat_ydensity()`).\n\n\n\n\n\n\n\n\nWe can make bar graphs in ggplot using geom_bar(). There are some tricks to getting bar graphs to work exactly right, which I will try to detail below. NOTE Bar graphs are very rarely useful. If we want to show means, why not just use points + error bars? What does the bar actually represent? There aren’t that many cases where we really need bar graphs. There are exceptions, like when we have a population and we want to see the demographics of that population by count or percentage (see example below)\nHere is a simple bar chart.\n\nggplot(data=penguins, aes(species)) +\n  geom_bar()\n\n\n\n\nHere is a more elaborate boxplot that shows species breakdown by island! Note that we use an aes() call within geom_bar to define a fill. That means fill by species, or add a color for each species.\n\nggplot(data=penguins, aes(island)) +\n  geom_bar(aes(fill=species))\n\n\n\n\nAnd here is that same plot with the bars unstacked. Instead of stacking, we have used “dodged” each color to be its own bar.\n\nggplot(data=penguins, aes(island)) +\n  geom_bar(aes(fill=species), position= position_dodge())\n\n\n\n\nWe learned when the best (only) times to use bar graphs are. Do you remember what those were? Are the examples above representative of that?\n\n\n\nA line graph can be extremely useful, especially if we are looking at time series data or rates!\nHere is an example of CO2 uptake vs concentration in plants. Each color represents a different plant. NOTE: the dataset called ‘CO2’ is built into R, so we can just use it without loading anything :)\n\nhead(CO2)\n\n  Plant   Type  Treatment conc uptake\n1   Qn1 Quebec nonchilled   95   16.0\n2   Qn1 Quebec nonchilled  175   30.4\n3   Qn1 Quebec nonchilled  250   34.8\n4   Qn1 Quebec nonchilled  350   37.2\n5   Qn1 Quebec nonchilled  500   35.3\n6   Qn1 Quebec nonchilled  675   39.2\n\nggplot(data=CO2, aes(x=conc, y= uptake, color=Plant)) +\n  geom_line()\n\n\n\n\nWe can change the aesthetics of the lines using color, linetype, size, etc. Here I am changing the linetype based on the plant species and increasing the size of ALL lines to 2. This is a good example of how aes() works. Anything within the aes() call is conditional. That means, I give it a name (such as a column or variable name) and it changes based on that column or variable. To change an aesthetic across all lines, points, etc, I just put the code outside of the aes(). As I did for size. That makes the size of ALL lines = 2.\n\nggplot(data=CO2, aes(x=conc, y= uptake, color=Plant)) +\n  geom_line(aes(linetype=Plant),size=2)\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n\n\n\n\n\n\nThe scatter plot is probably the most commonly used graphical tool in ggplot. It is based on the geom_point() function\n\nggplot(data=penguins, aes(x=species, y= bill_length_mm)) +\n  geom_point()\n\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n\n\n\n\n\nImportantly, we can use the data= and aes() calls within geom_point() or any other geom instead of within ggplot() if needed. Why might this be important?\n\nggplot() +\n  geom_point(data=penguins, aes(x=species, y= bill_length_mm))\n\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n\n\n\n\n\nSometimes we don’t want to plot all of our points on the same vertical line. If that is the case, we can use geom_jitter()\n\nggplot(data=penguins, aes(x=species, y= bill_length_mm)) +\n  geom_jitter()\n\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n\n\n\n\n\n\n\n\nWe often want to present means and error in our visualizations. This can be done through the use of geom_boxplot() or through combining geom_point() with geom_errorbar()\nHere is an example of the later…\n\n#First, we need to calculate a mean bill length for our penguins by species and island\nsumpens&lt;- penguins %&gt;%\n  group_by(species, island) %&gt;%\n  na.omit() %&gt;% #removes rows with NA values (a few rows may otherwise have NA due to sampling error in the field)\n  summarize(meanbill=mean(bill_length_mm), sd=sd(bill_length_mm), n=n(), se=sd/sqrt(n))\n\nsumpens\n\n# A tibble: 5 × 6\n# Groups:   species [3]\n  species   island    meanbill    sd     n    se\n  &lt;fct&gt;     &lt;fct&gt;        &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt;\n1 Adelie    Biscoe        39.0  2.48    44 0.374\n2 Adelie    Dream         38.5  2.48    55 0.335\n3 Adelie    Torgersen     39.0  3.03    47 0.442\n4 Chinstrap Dream         48.8  3.34    68 0.405\n5 Gentoo    Biscoe        47.6  3.11   119 0.285\n\n# Now we can plot! \nggplot(data=sumpens, aes(x=species, y=meanbill, color=island))+\n  geom_point()+\n  geom_errorbar(data=sumpens, aes(x=species, ymin=meanbill-se, ymax=meanbill+se), width=0.2)\n\n\n\n\nAnd if we want to be extra fancy (and rigorous), we can plot the raw data behind the mean+error This is considered a graphical best practice as we can see the mean, error, and the true spread of the data!\n\nggplot()+\n  geom_jitter(data= penguins, aes(x=species, y=bill_length_mm, color=island), alpha=0.5, width=0.2)+ #this is the raw data\n  geom_point(data=sumpens, aes(x=species, y=meanbill, color=island), size=3)+ #this is the averages\n  geom_errorbar(data=sumpens, aes(x=species, ymin=meanbill-se, ymax=meanbill+se), width=0.1)\n\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n\n\n\n\n\nAn alternative to geom_jitter, which doesn’t always work, is to use geom_point but force the points to not overlap with position_dodge. Here is an example\n\n#first we should define the distance of our position_dodge\npd&lt;-position_dodge(width=0.2)\n\nggplot(data=sumpens, aes(x=species, y=meanbill, color=island))+\n  geom_point(data= penguins, aes(x=species, y=bill_length_mm, color=island), alpha=0.2, width=0.2, position=pd)+ #raw data\n  geom_point(size=3, position=pd)+ #averages\n  geom_errorbar(aes(ymin=meanbill-se, ymax=meanbill+se), width=0.2, position=pd)\n\nWarning in geom_point(data = penguins, aes(x = species, y = bill_length_mm, :\nIgnoring unknown parameters: `width`\n\n\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n\n\n\n\n\nThis code will produce the same graph as above. Note that in geom_jitter we just replaced width = with position =\n\nggplot(sumpens, aes(x=species, y= meanbill, color=island))+\n  geom_jitter(data= penguins, aes(x=species, y=bill_length_mm, color=island), alpha=0.5, position=pd)+ #this is the raw data\n  geom_point(size=3,position=pd)+ #this is the averages\n  geom_errorbar(aes(ymin=meanbill-se, ymax=meanbill+se), width=0.2, position=pd)\n\nWarning: Removed 2 rows containing missing values (`geom_point()`)."
  },
  {
    "objectID": "axes.html",
    "href": "axes.html",
    "title": "Axes labels and Titles",
    "section": "",
    "text": "#Load packages\nlibrary(tidyverse)\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.4.0      ✔ purrr   1.0.0 \n✔ tibble  3.1.8      ✔ dplyr   1.0.10\n✔ tidyr   1.2.1      ✔ stringr 1.5.0 \n✔ readr   2.1.3      ✔ forcats 0.5.2 \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n\nlibrary(ggsci) #for easy color scales\nlibrary(patchwork) #to make multi-panel plots \nlibrary(palmerpenguins) # our fave penguin friends :)\n\n\ntitles and axis labels\nTitles and axis labels are easy to add and change in ggplot! We simply add another line to our code. NOTE you can also add a subtitle, caption, or change the legend title using labs!\n\nggplot(data=penguins, aes(x=species, y= bill_length_mm)) +\n  geom_boxplot(aes(fill=species))+\n  scale_fill_aaas()+\n  theme_classic()+\n  labs(x = 'Species', y='Bill length (mm)', title='Penguin bill length by species', fill='Species')+ #here I change the x-axis and y-axis labels, add a title, and change the legend label (to capitalize the 'S' in 'species')\n  theme(text=element_text(size=18))\n\nWarning: Removed 2 rows containing non-finite values (`stat_boxplot()`)."
  },
  {
    "objectID": "colors.html",
    "href": "colors.html",
    "title": "Colors",
    "section": "",
    "text": "#Load packages\nlibrary(tidyverse)\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.4.0      ✔ purrr   1.0.0 \n✔ tibble  3.1.8      ✔ dplyr   1.0.10\n✔ tidyr   1.2.1      ✔ stringr 1.5.0 \n✔ readr   2.1.3      ✔ forcats 0.5.2 \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n\nlibrary(ggsci) #for easy color scales\nlibrary(patchwork) #to make multi-panel plots \nlibrary(palmerpenguins) # our fave penguin friends :)\n\n\nColors\nWe can change colors conditionally or manually.\nConditional Color Change To change colors conditionally, we use color= or fill= within an aes() call.\nHere I have changed the outline color (color=) for a series of boxplots based on species\n\nggplot(data=penguins, aes(x=species, y= bill_length_mm, color=species)) +\n  geom_boxplot()\n\nWarning: Removed 2 rows containing non-finite values (`stat_boxplot()`).\n\n\n\n\n\nI can also change the fill of the boxplots\n\nggplot(data=penguins, aes(x=species, y= bill_length_mm, fill=species)) +\n  geom_boxplot()\n\nWarning: Removed 2 rows containing non-finite values (`stat_boxplot()`).\n\n\n\n\n\nManual Color Change We can also change colors manually by using one of many options within ggplot. scale_color_manual (or scale_fill_manual) is the easiest. We simply define colors we want to use by name or hexcode.\n\nggplot(data=penguins, aes(x=species, y= bill_length_mm)) +\n  geom_boxplot(aes(fill=species))+\n  scale_fill_manual(values=c('red', 'black', 'blue'))\n\nWarning: Removed 2 rows containing non-finite values (`stat_boxplot()`).\n\n\n\n\n\nHere’s a giant table of color options in ggplot  You can also make your own color palette and apply that to your figure!\n\nmypal&lt;-c('dodgerblue', 'forestgreen', 'coral') # here I've made a 3 color palette\n\nggplot(data=penguins, aes(x=species, y= bill_length_mm)) +\n  geom_boxplot(aes(fill=species))+\n  scale_fill_manual(values=mypal)\n\nWarning: Removed 2 rows containing non-finite values (`stat_boxplot()`).\n\n\n\n\n\nYou can use the package RColorBrewer to make palettes as well. I’ll let you explore that one on your own!\nFinally, EASY and nice looking palettes with ggsci ggsci is a simple and neat package that allows us to use scientific journal color themes for our data (usually colorblind friendly and nice looking). we simply change our “scale_color_manual” to “scale_color_palname” where “palname” is one of many provided by ggsci. For example, we might use scale_color_aaas()\n\nggplot(data=penguins, aes(x=species, y= bill_length_mm)) +\n  geom_boxplot(aes(fill=species))+\n  scale_fill_aaas()\n\nWarning: Removed 2 rows containing non-finite values (`stat_boxplot()`)."
  },
  {
    "objectID": "shapes.html",
    "href": "shapes.html",
    "title": "Shapes",
    "section": "",
    "text": "#Load packages\nlibrary(tidyverse)\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.4.0      ✔ purrr   1.0.0 \n✔ tibble  3.1.8      ✔ dplyr   1.0.10\n✔ tidyr   1.2.1      ✔ stringr 1.5.0 \n✔ readr   2.1.3      ✔ forcats 0.5.2 \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n\nlibrary(ggsci) #for easy color scales\nlibrary(patchwork) #to make multi-panel plots \nlibrary(palmerpenguins) # our fave penguin friends :)\n\n\nShapes\nggplot gives us options to change point shape using the aesethic option ‘shape’  We can either change shape based on a characterstic of the data (‘cyl’, for example), make all the shapes the same, or manually control shape\nBelow is a table of shape options:\n\n\n\nggplot shape options\n\n\nConditional Shape Change\n\nggplot(data=penguins, aes(x=species, y=bill_length_mm, color=island, shape=island))+ \n  geom_jitter(size=2)+\n  theme_classic()\n\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n\n\n\n\n\nChange all shapes to triangles\n\nggplot(data=mtcars, aes(x=cyl, y=mpg, color=cyl))+\n  geom_point(shape=17) #Here 'shape=' is inside the settings for geom_point. Note that it is outside the aes() function, as that applied aesethics conditionally)\n\n\n\n#example 2, same w/ different syntax\nggplot()+\n  geom_point(data=mtcars, aes(x=cyl, y=mpg, color=cyl), shape=17)\n\n\n\n\nManual shape changes\n\nggplot(data=penguins, aes(x=species, y=bill_length_mm, color=island, shape=island))+ \n  geom_jitter(size=2)+\n  theme_classic()+  \n  scale_shape_manual(values=c(2,3,4)) #scale_shape_manual allows us to choose shapes for each group (cyl in this case). c stands for concatenate, as we've seen before\n\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n\n\n\n\n\nChanging Size of points\nConditional Shape Change\n\nggplot(data=mtcars, aes(x=cyl, y=mpg, color=cyl, size=cyl))+ #note that we added 'size=' to our aes. \n  geom_point()\n\n\n\n#note the warning message that using size for a discrete variable is not best practice. \n#Instead, let's use the size to five us an idea of hp (a 3rd variable)\n\nggplot(data=mtcars, aes(x=cyl, y=mpg, color=cyl, size=hp))+ #note that we added 'size=' to our aes. \n  geom_point()\n\n\n\n\nChange size of all points (all points must be same size)\n\nggplot(data=mtcars, aes(x=cyl, y=mpg, color=cyl))+  \n  geom_point(size=5) #as w/ shape, point needs to be outside the aes() here."
  },
  {
    "objectID": "themes.html",
    "href": "themes.html",
    "title": "Themes",
    "section": "",
    "text": "#Load packages\nlibrary(tidyverse)\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.4.0      ✔ purrr   1.0.0 \n✔ tibble  3.1.8      ✔ dplyr   1.0.10\n✔ tidyr   1.2.1      ✔ stringr 1.5.0 \n✔ readr   2.1.3      ✔ forcats 0.5.2 \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n\nlibrary(ggsci) #for easy color scales\nlibrary(patchwork) #to make multi-panel plots \nlibrary(palmerpenguins) # our fave penguin friends :)"
  },
  {
    "objectID": "themes.html#themes",
    "href": "themes.html#themes",
    "title": "Themes",
    "section": "Themes",
    "text": "Themes\nThemes allow us to change the background color and most other aspects of a plot. There are a range of theme options within ggplot that will allow us to quickly make clean plots. The two that are most commonly used are theme_bw() and theme_classic()\nDefault theme (with terrible gray background)\n\nggplot(data=penguins, aes(x=species, y= bill_length_mm)) +\n  geom_boxplot(aes(fill=species))+\n  scale_fill_aaas()+\n  labs(x = 'Species', y='Bill length (mm)', title='Penguin bill length by species')\n\nWarning: Removed 2 rows containing non-finite values (`stat_boxplot()`).\n\n\n\n\n\ntheme_bw() (removes gray background)\n\nggplot(data=penguins, aes(x=species, y= bill_length_mm)) +\n  geom_boxplot(aes(fill=species))+\n  scale_fill_aaas()+\n  labs(x = 'Species', y='Bill length (mm)', title='Penguin bill length by species')+\n  theme_bw()\n\nWarning: Removed 2 rows containing non-finite values (`stat_boxplot()`).\n\n\n\n\n\ntheme_classic() (removes gray and grid lines)\n\nggplot(data=penguins, aes(x=species, y= bill_length_mm)) +\n  geom_boxplot(aes(fill=species))+\n  scale_fill_aaas()+\n  labs(x = 'Species', y='Bill length (mm)', title='Penguin bill length by species')+\n  theme_classic()\n\nWarning: Removed 2 rows containing non-finite values (`stat_boxplot()`).\n\n\n\n\n\nThe theme() function in ggplot is SUPER flexible. You can pretty much do anything with it. This is key for customizing plots. I’d encourage you to play around with this a bit. Here is a great place to learn more and see examples.\n##Some examples of using theme()\nChanging text size\n\nggplot(data=penguins, aes(x=species, y= bill_length_mm)) +\n  geom_boxplot(aes(fill=species))+\n  scale_fill_aaas()+\n  labs(x = 'Species', y='Bill length (mm)', title='Penguin bill length by species')+\n  theme(text=element_text(size=24))\n\nWarning: Removed 2 rows containing non-finite values (`stat_boxplot()`).\n\n\n\n\n\nRemove the gray background\n\nggplot(data=penguins, aes(x=species, y= bill_length_mm)) +\n  geom_boxplot(aes(fill=species))+\n  scale_fill_aaas()+\n  labs(x = 'Species', y='Bill length (mm)', title='Penguin bill length by species')+\n  theme(text=element_text(size=24), panel.background = element_rect(fill=\"white\")) #can use any color\n\nWarning: Removed 2 rows containing non-finite values (`stat_boxplot()`).\n\n\n\n\n\nTurn the X-Axis text\n\nggplot(data=penguins, aes(x=species, y= bill_length_mm)) +\n  geom_boxplot(aes(fill=species))+\n  scale_fill_aaas()+\n  labs(x = 'Species', y='Bill length (mm)', title='Penguin bill length by species')+\n  theme(text=element_text(size=24), panel.background = element_rect(fill=\"white\"), axis.text.x=element_text(angle=90, vjust=0.5, hjust=0.8)) #can adjust vertical and horizontal text positions\n\nWarning: Removed 2 rows containing non-finite values (`stat_boxplot()`)."
  }
]