[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Introduction to R for Biology & Ecology",
    "section": "",
    "text": "If you are here you are likely learning R and RStudio or you are teaching R and RStudio. Thanks for being here. I hope you find these resources helpful.\n\n\n\nThe materials on this website have been designed for use in teaching R to undergraduate students who range in experience from never using R (or any programming language before) to beginner and intermediate R users. I have designed these resources for use in my 200 level Biostatistics course, 300 level Biology electives, and to teach my research students how to use R. That said, anyone who is trying to learn R (or learning how to teach R) may find these tutorials and exercises useful.\n\n\n\n\nNavigate using the navbar at the top of the page. You can find specific tutorials using the drop down menus. Tutorial content is organized by section. If you are looking for exercises to do yourself (assignments, challenges, etc), you can find those in the “exercises” drop down menu in the navbar. These are downloadable .qmd files that you can open in your own instance of R and modify!\n\n\n\nYou can visit my professional website, github, and twitter pages. You can also email me with questions, comments, and suggestions.\n…"
  },
  {
    "objectID": "Lab1.html",
    "href": "Lab1.html",
    "title": "Lab 1: Intro to R, RStudio, and Quarto",
    "section": "",
    "text": "IN THIS TUTORIAL YOU WILL LEARN:\n1.) How to navigate RStudio\n2.) How to install and load packages\n3.) How to view data\n4.) How to read and write data files\n5.) How to use Quarto to make a document"
  },
  {
    "objectID": "Lab1.html#how-to-set-the-working-directory",
    "href": "Lab1.html#how-to-set-the-working-directory",
    "title": "Lab 1: Intro to R, RStudio, and Quarto",
    "section": "How to SET the working directory",
    "text": "How to SET the working directory\n1.) Using the “Files” tab to set manually: a.) Using the ‘…’ in the ‘Files’ tab you can select any directory (folder) on your computer. You can also set a google drive, box, dropbox, or other shared folder as your working directory if you’d like (as long as you are syncing a folder between the cloud and your computer – ASK me if you have questions about this!) b.) Once you navigate to a directory you still need to SET IT as your working directory. You do this in the “More” cog– select “Set as working directory”\n2.) Set working directory with code: We use the ‘setwd()’ function for this\n\nsetwd(\"C:/Users/Justin Baumann/Desktop/r_for_bioeco\")\n\nNote that I am using rstudio.mtholyoke.edu, a cloud version of RStudio. As such, my setwd() looks weird! ‘~’ just tells R I want to look in the same parent directory I am currently working in. Your version of this might be setwd(“C://username/biol234/code”) or similar. You use a “/” between each folder. As always, ask questions if you have them! The manual setting using “Files” is usually easier for most people."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "testpage.html",
    "href": "testpage.html",
    "title": "testpage",
    "section": "",
    "text": "This is a test page\n\n#here is some test code\n\nlibrary(tidyverse)\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.4.0      ✔ purrr   1.0.0 \n✔ tibble  3.1.8      ✔ dplyr   1.0.10\n✔ tidyr   1.2.1      ✔ stringr 1.5.0 \n✔ readr   2.1.3      ✔ forcats 0.5.2 \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n\nlibrary(palmerpenguins)\n\nAnd some more\n\nhead(penguins)\n\n# A tibble: 6 × 8\n  species island    bill_length_mm bill_depth_mm flipper_l…¹ body_…² sex    year\n  &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;       &lt;int&gt;   &lt;int&gt; &lt;fct&gt; &lt;int&gt;\n1 Adelie  Torgersen           39.1          18.7         181    3750 male   2007\n2 Adelie  Torgersen           39.5          17.4         186    3800 fema…  2007\n3 Adelie  Torgersen           40.3          18           195    3250 fema…  2007\n4 Adelie  Torgersen           NA            NA            NA      NA &lt;NA&gt;   2007\n5 Adelie  Torgersen           36.7          19.3         193    3450 fema…  2007\n6 Adelie  Torgersen           39.3          20.6         190    3650 male   2007\n# … with abbreviated variable names ¹​flipper_length_mm, ²​body_mass_g"
  },
  {
    "objectID": "getting_started.html",
    "href": "getting_started.html",
    "title": "Getting Started with RStudio",
    "section": "",
    "text": "IN THIS TUTORIAL YOU WILL LEARN:\n1.) How to access and/or install R and RStudio\n2.) How to navigate RStudio\n3.) How to set and change the working directory\n4.) How to setup an RStudio Project"
  },
  {
    "objectID": "getting_started.html#how-to-set-the-working-directory",
    "href": "getting_started.html#how-to-set-the-working-directory",
    "title": "Getting Started with RStudio",
    "section": "How to SET the working directory",
    "text": "How to SET the working directory\n1.) Using the “Files” tab to set manually: a.) Using the ‘…’ in the ‘Files’ tab you can select any directory (folder) on your computer. You can also set a google drive, box, dropbox, or other shared folder as your working directory if you’d like (as long as you are syncing a folder between the cloud and your computer – ASK me if you have questions about this!) b.) Once you navigate to a directory you still need to SET IT as your working directory. You do this in the “More” cog– select “Set as working directory”\n2.) Set working directory with code: We use the ‘setwd()’ function for this. Below is an example. You will need to replace the path details with your own!\n\nsetwd(\"C:/Users/Justin Baumann/Desktop/BIOL234_Biostats_MHC/Spring 2023/Labs\")"
  },
  {
    "objectID": "usingquarto.html",
    "href": "usingquarto.html",
    "title": "Getting Started with Quarto",
    "section": "",
    "text": "1.) Understand the purpose of a quarto document / any markdown file\n\n2.) Learn the basics of Quarto document formatting\n\n3.) Build a simple Quarto document!"
  },
  {
    "objectID": "usingquarto.html#to-make-a-quarto-document",
    "href": "usingquarto.html#to-make-a-quarto-document",
    "title": "Getting Started with Quarto",
    "section": "To make a Quarto document",
    "text": "To make a Quarto document\nclick file -&gt; new file -&gt; Quarto document / Complete the pop up prompts and then wait for the document to load. / We want to replace the top bit (our YAML header, everything between the two lines that contains just — at the top) with the following (use your name and title!)\n\n---\ntitle: \"Lab 1: Intro to R, RStudio, and Quarto\"\nauthor: \"Justin Baumann\"\nformat: \n  html:\n    toc: true\n  pdf:\n    toc: true\n    number-sections: true\n    colorlinks: true\neditor: visual\n---"
  },
  {
    "objectID": "usingquarto.html#formatting-text",
    "href": "usingquarto.html#formatting-text",
    "title": "Getting Started with Quarto",
    "section": "Formatting text",
    "text": "Formatting text\nUnlike in a regular R script, using the ‘#’ at the start of a line will not comment that line out. Instead, you can type as you would normally in an R Markdown (Rmd) document. We can format our text in the following ways:\n Bold: ‘’ on either end of a word, phrase, or line will make it bold! this is in bold** =’‘this is in bold’’ without the quotes around the **\n\nLine breaks: DO you want text to be on different lines? Insert a ’’ at the end of a line to make a line break!"
  },
  {
    "objectID": "usingquarto.html#making-a-code-chunk",
    "href": "usingquarto.html#making-a-code-chunk",
    "title": "Getting Started with Quarto",
    "section": "Making a code chunk",
    "text": "Making a code chunk\nSince qmd documents are text based, we need to tell RStudio when we want to actually include code. To do this, we will insert a code chunk. To insert a code chunk:\n\n1.) Use the keyboard shortcut ‘ctrl’+‘alt’+‘i’ (PC) or ‘cmd’+‘alt’+‘i’ (Mac) to insert a code chunk.\n\n2.) Navigate to the top bar (of the top left quadrant of RStudio), find “+c” at the right of the bar to insert an R code chink.\nOnce you have a code chunk inserted you will notice that the background of the chunk is gray instead of your default background color (white or black if you are in dark mode)\n\n#this is an example code chunk\n\n# Using '#' at the start of a line indicates a comment, which is not runnable code!"
  },
  {
    "objectID": "usingquarto.html#rendering-your-report",
    "href": "usingquarto.html#rendering-your-report",
    "title": "Getting Started with Quarto",
    "section": "Rendering your report",
    "text": "Rendering your report\nTo Visualize what your report will look like, click the ‘visual’ tab in the top bar (on the left). Note that if you do this, it CAN change your code–so be careful. You can also use the GUI to alter your report in the visual tab. This provides a nice alternative to the code based formatting options in the ‘source’ tab.\n\nTo actually render into an html or pdf document, you must click “Render”. You can use the arrow to the right of “Render” to choose render to html or render to pdf. I suggest using HTML most of the time but you can use pdf if you prefer. You will need to successfull Render your quarto document into an html or pdf report in order to turn in your labs!"
  },
  {
    "objectID": "rbasics.html",
    "href": "rbasics.html",
    "title": "Packages & reading/writing data",
    "section": "",
    "text": "1.) How to install and load libraries\n2.) How to view and inspect data\n3.) Read in data files & output data (write to file)"
  },
  {
    "objectID": "rbasics.html#installing-and-loading-libraries",
    "href": "rbasics.html#installing-and-loading-libraries",
    "title": "Packages & reading/writing data",
    "section": "Installing and Loading libraries",
    "text": "Installing and Loading libraries\nLibraries are packages of functions (and sometimes data) that we use to execute tasks in R. Packages are what make R so versatile! We can do almost anything with R if we learn how to utilize the right packages.\nIf we do not have a package already installed (for example, if you have only just downloaded R/ RStudio), we will need to use install.packages(‘packagename’) to install each package that we need.\n\ninstall.packages(tidyverse)\n\nOR - We can use the ‘Packages’ tab in the bottom right quadrant to install packages. Simply navigate to ‘Packages’, select ‘install packages’ and enter the package names you need (separate each package by commas). NOTE for users for rstudio.mtholyoke.edu – You cannot install packages to the Mt Holyoke cloud instance of R. If we need something that isn’t installed we will need to contact IT!\nIn order for a package to work, we must first load it! We do this as with the code libary(packagename)\n\nlibrary(tidyverse) #for data manipulation\nlibrary(palmerpenguins) #for some fun data!\n\nIt is best practice to load all of the packages you will need at the top of your script\nIn this course we will be following a best practices guide that utilizes a library called ‘Tidyverse’ for data manipulation and analysis. Tidyverse contains many packages all in one, including the very functional ‘dplyr’ and ‘ggplot2’ packages. You will almost always use Tidyverse, so make sure to load it in :)\nNote the ‘#’ with notes after them in the code chunk above. These are called comments. You can comment out any line of code in R by using a ‘#’. This is strongly recommended when you are programming. We will discuss more later!"
  },
  {
    "objectID": "rbasics.html#looking-at-data",
    "href": "rbasics.html#looking-at-data",
    "title": "Packages & reading/writing data",
    "section": "Looking at data!",
    "text": "Looking at data!\nR has integrated data sets that we can use to play around with code and learn. \nexamples: mtcars (a dataframe all about cars, this is available in R without loading a package), and iris (in the ‘vegan’ package, great for testing out ecology related functions and code)\nLoad a dataset R has some test datasets built into it. Let’s load one and look at it!\n\nmtcars \n\n                     mpg cyl  disp  hp drat    wt  qsec vs am gear carb\nMazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2\nValiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1\nDuster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4\nMerc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2\nMerc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2\nMerc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4\nMerc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4\nMerc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3\nMerc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3\nMerc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3\nCadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4\nLincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4\nChrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4\nFiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1\nHonda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2\nToyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1\nToyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1\nDodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2\nAMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2\nCamaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4\nPontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2\nFiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1\nPorsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2\nLotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2\nFord Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4\nFerrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6\nMaserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8\nVolvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2\n\n\nUsing head() and tail() Now let’s look at the data frame (df) using head() and tail()  These tell us the column names, and let us see the top or bottom 6 rows of data.\n\nhead(mtcars) \n\n                   mpg cyl disp  hp drat    wt  qsec vs am gear carb\nMazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\nValiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1\n\ntail(mtcars) #tail shows the header and the last 6 rows \n\n                mpg cyl  disp  hp drat    wt qsec vs am gear carb\nPorsche 914-2  26.0   4 120.3  91 4.43 2.140 16.7  0  1    5    2\nLotus Europa   30.4   4  95.1 113 3.77 1.513 16.9  1  1    5    2\nFord Pantera L 15.8   8 351.0 264 4.22 3.170 14.5  0  1    5    4\nFerrari Dino   19.7   6 145.0 175 3.62 2.770 15.5  0  1    5    6\nMaserati Bora  15.0   8 301.0 335 3.54 3.570 14.6  0  1    5    8\nVolvo 142E     21.4   4 121.0 109 4.11 2.780 18.6  1  1    4    2\n\n\ncolumn attributes If we want to see the attributes of each column we can use the str() function\n\nstr(mtcars) #str shows attributes of each column\n\n'data.frame':   32 obs. of  11 variables:\n $ mpg : num  21 21 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 ...\n $ cyl : num  6 6 4 6 8 6 8 4 4 6 ...\n $ disp: num  160 160 108 258 360 ...\n $ hp  : num  110 110 93 110 175 105 245 62 95 123 ...\n $ drat: num  3.9 3.9 3.85 3.08 3.15 2.76 3.21 3.69 3.92 3.92 ...\n $ wt  : num  2.62 2.88 2.32 3.21 3.44 ...\n $ qsec: num  16.5 17 18.6 19.4 17 ...\n $ vs  : num  0 0 1 1 0 1 0 1 1 1 ...\n $ am  : num  1 1 1 0 0 0 0 0 0 0 ...\n $ gear: num  4 4 4 3 3 3 3 4 4 4 ...\n $ carb: num  4 4 1 1 2 1 4 2 2 4 ...\n\n\nstr() is very important because it allows you to see the type of data in each column. Types include: integer, numeric, factor, date, and more. If the data in a column are factors instead of numbers you may have an issue in your data (your spreadsheet)\nChanging column attributes Importantly, you can change the type of the column. Here is an example\n\nmtcars$mpg=as.factor(mtcars$mpg) # Makes mpg a factor instead of a number\nstr(mtcars)\n\n'data.frame':   32 obs. of  11 variables:\n $ mpg : Factor w/ 25 levels \"10.4\",\"13.3\",..: 16 16 19 17 13 12 3 20 19 14 ...\n $ cyl : num  6 6 4 6 8 6 8 4 4 6 ...\n $ disp: num  160 160 108 258 360 ...\n $ hp  : num  110 110 93 110 175 105 245 62 95 123 ...\n $ drat: num  3.9 3.9 3.85 3.08 3.15 2.76 3.21 3.69 3.92 3.92 ...\n $ wt  : num  2.62 2.88 2.32 3.21 3.44 ...\n $ qsec: num  16.5 17 18.6 19.4 17 ...\n $ vs  : num  0 0 1 1 0 1 0 1 1 1 ...\n $ am  : num  1 1 1 0 0 0 0 0 0 0 ...\n $ gear: num  4 4 4 3 3 3 3 4 4 4 ...\n $ carb: num  4 4 1 1 2 1 4 2 2 4 ...\n\nmtcars$mpg=as.numeric(as.character(mtcars$mpg)) #Changes mpg back to a number\nstr(mtcars)\n\n'data.frame':   32 obs. of  11 variables:\n $ mpg : num  21 21 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 ...\n $ cyl : num  6 6 4 6 8 6 8 4 4 6 ...\n $ disp: num  160 160 108 258 360 ...\n $ hp  : num  110 110 93 110 175 105 245 62 95 123 ...\n $ drat: num  3.9 3.9 3.85 3.08 3.15 2.76 3.21 3.69 3.92 3.92 ...\n $ wt  : num  2.62 2.88 2.32 3.21 3.44 ...\n $ qsec: num  16.5 17 18.6 19.4 17 ...\n $ vs  : num  0 0 1 1 0 1 0 1 1 1 ...\n $ am  : num  1 1 1 0 0 0 0 0 0 0 ...\n $ gear: num  4 4 4 3 3 3 3 4 4 4 ...\n $ carb: num  4 4 1 1 2 1 4 2 2 4 ...\n\n\nSummary statistics To see summary statistics on each column (mean, median, min, max, range), we can use summary()\n\nsummary(mtcars) #summarizes each column\n\n      mpg             cyl             disp             hp       \n Min.   :10.40   Min.   :4.000   Min.   : 71.1   Min.   : 52.0  \n 1st Qu.:15.43   1st Qu.:4.000   1st Qu.:120.8   1st Qu.: 96.5  \n Median :19.20   Median :6.000   Median :196.3   Median :123.0  \n Mean   :20.09   Mean   :6.188   Mean   :230.7   Mean   :146.7  \n 3rd Qu.:22.80   3rd Qu.:8.000   3rd Qu.:326.0   3rd Qu.:180.0  \n Max.   :33.90   Max.   :8.000   Max.   :472.0   Max.   :335.0  \n      drat             wt             qsec             vs        \n Min.   :2.760   Min.   :1.513   Min.   :14.50   Min.   :0.0000  \n 1st Qu.:3.080   1st Qu.:2.581   1st Qu.:16.89   1st Qu.:0.0000  \n Median :3.695   Median :3.325   Median :17.71   Median :0.0000  \n Mean   :3.597   Mean   :3.217   Mean   :17.85   Mean   :0.4375  \n 3rd Qu.:3.920   3rd Qu.:3.610   3rd Qu.:18.90   3rd Qu.:1.0000  \n Max.   :4.930   Max.   :5.424   Max.   :22.90   Max.   :1.0000  \n       am              gear            carb      \n Min.   :0.0000   Min.   :3.000   Min.   :1.000  \n 1st Qu.:0.0000   1st Qu.:3.000   1st Qu.:2.000  \n Median :0.0000   Median :4.000   Median :2.000  \n Mean   :0.4062   Mean   :3.688   Mean   :2.812  \n 3rd Qu.:1.0000   3rd Qu.:4.000   3rd Qu.:4.000  \n Max.   :1.0000   Max.   :5.000   Max.   :8.000  \n\n\nCounting rows and columns To see the number of rows and columns we can use nrow() and ncol()\n\nnrow(mtcars) #gives number of rows\n\n[1] 32\n\nncol(mtcars) #gives number of columns\n\n[1] 11\n\n\nNaming dataframes Rename mtcars and view in Environment tab in Rstudio\n\na&lt;-mtcars\na\n\n                     mpg cyl  disp  hp drat    wt  qsec vs am gear carb\nMazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2\nValiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1\nDuster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4\nMerc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2\nMerc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2\nMerc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4\nMerc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4\nMerc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3\nMerc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3\nMerc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3\nCadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4\nLincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4\nChrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4\nFiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1\nHonda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2\nToyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1\nToyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1\nDodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2\nAMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2\nCamaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4\nPontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2\nFiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1\nPorsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2\nLotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2\nFord Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4\nFerrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6\nMaserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8\nVolvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2\n\nhead(a)\n\n                   mpg cyl disp  hp drat    wt  qsec vs am gear carb\nMazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\nValiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1"
  },
  {
    "objectID": "rbasics.html#write-data-to-file-saving-data",
    "href": "rbasics.html#write-data-to-file-saving-data",
    "title": "Packages & reading/writing data",
    "section": "Write data to file (saving data)",
    "text": "Write data to file (saving data)\nWe use the write.csv function here. a= the name of the dataframe and the name we want to give the file goes after ‘file=’  The file name must be in quotes and must include an extension. Since we are using write.csv we MUST use .csv \n\nwrite.csv(a, file='mtcars.csv')"
  },
  {
    "objectID": "rbasics.html#read-a-file-in-import-data-into-r",
    "href": "rbasics.html#read-a-file-in-import-data-into-r",
    "title": "Packages & reading/writing data",
    "section": "Read a file in (import data into R)",
    "text": "Read a file in (import data into R)\nNOTE: if you have a .xls file make sure you convert to .csv. Ensure the file is clean and orderly (rows x columns). Only 1 excel tab can be in each .csv, so plan accordingly. Note that in order to read a file in to R from your computer (or cloud server), that file MUST be located within your working directory (or you must know and enter the file path).\nIF your file is in your working directory, you can read it in like this:\n\nb&lt;-read.csv('mtcars.csv')\nhead(b)\n\n                  X  mpg cyl disp  hp drat    wt  qsec vs am gear carb\n1         Mazda RX4 21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\n2     Mazda RX4 Wag 21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\n3        Datsun 710 22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\n4    Hornet 4 Drive 21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\n5 Hornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\n6           Valiant 18.1   6  225 105 2.76 3.460 20.22  1  0    3    1\n\n\nYou are welcome to use other functions to read in data (including read_csv or read.xls). Especially for beginners, I strongly encourage you to use .csv format. Other file formats can get complicated (often unnecessarily complicated). That said, R can also handle .txt, .xls, images, shapefiles (for spatial analysis or GIS style work), etc. It is very versatile! Feel free to explore :)\nA note on read_csv -&gt; I consider this to be the “best” option for reading in .csv files. It is a ‘smarter’ version of read.csv and can automatically figure out what kind of data (numeric, factor, date, etc) each column is. If you use read.csv, you have often have to manually change these options."
  },
  {
    "objectID": "basic_graphs.html",
    "href": "basic_graphs.html",
    "title": "Intro to ggplot2",
    "section": "",
    "text": "Tutorials and Resources for graphs in ggplot\nBasics of ggplot\nColors with ggsci\nMany plots, 1 page w/ Patchwork\n\n\n\n1: What makes a good graph vs a bad graph?\nTake a look at some graphs of data for your field of interest. You may have a look at papers you have recently read or graphs you find in textbooks or assignments. Consider what you like or don’t like about these graphs. What looks good and/or makes a graph easy to interpret? What doesn’t? Making figures is both an art and a science.\nTo learn more about what makes graphs good (or bad), read Chapter 1 of Kieran Healy’s online data visualization book –&gt; What makes figures bad?\n\nTo continue your learning, have a look at this more detailed data visualization book by Claus Wilke Fundamentals of Data Visualization\n\n# 2: Let’s make some graphs!\nMaking nice looking graphs is a key feature of R and of data science in general. The best way to do this in R is through use of the ggplot2 package. This package is the most user friendly and flexible way to make nice plots in R. Notably, ggplot2 is a package that is contained within the tidyverse package, which is more of a style of R usage than a package. So, let’s load tidyverse and a few other useful packages for today.\n\n#Load packages\nlibrary(tidyverse)\nlibrary(ggsci) #for easy color scales\nlibrary(patchwork) #to make multi-panel plots \nlibrary(palmerpenguins) # our fave penguin friends :)\n\n\n\n3: ggplot basics\n\nIntroductionggplot()histogramboxplotbar graphline graphscatter plotAdding error bars\n\n\nggplot2 is the preferred graphics package for most R users. It allows users to build a graph piece by piece from your own data through mapping of aesthetics. It is much easier to make pretty (publication and presentation quality) plots with ggplot2 than it is with the base plot function in R. If you prefer base plot() that is ok. You can use whatever you’d like but when we talk about graphs we will be using the language of ggplot.\nAttached here are the Tidyverse Cheat Sheets for ggplot2\n\n\n\n\n\n\nThe ggplot() function is the base of the ggplot2 package. Using it creates the space that we use to build a graph. If we run just the ggplot() function we will get a gray rectangle. This is the space (and background) of our plot!\n\nggplot()\n\n\n\n\nTo build a plot on the background, we must add to the ggplot call. First, we need to tell it what data to use. Next, we need to tell it where in the data frame to pull data from to build the axes and data points. The part of the ggplot() function we use to build a graph is called aes() or aesthetics.\nHere is an example using penguins: I am telling ggplot that the data we are using is ‘penguins’ and then defining the x and y axis in the aes() call with column names from penguins\n\nhead(penguins)\n\n# A tibble: 6 × 8\n  species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n1 Adelie  Torgersen           39.1          18.7               181        3750\n2 Adelie  Torgersen           39.5          17.4               186        3800\n3 Adelie  Torgersen           40.3          18                 195        3250\n4 Adelie  Torgersen           NA            NA                  NA          NA\n5 Adelie  Torgersen           36.7          19.3               193        3450\n6 Adelie  Torgersen           39.3          20.6               190        3650\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\nggplot(data=penguins, aes(x=species, y= bill_length_mm)) \n\n\n\n\nLike anything in R, we can give our plot a name and call it later\n\nplot1&lt;-ggplot(data=penguins, aes(x=species, y= bill_length_mm)) \n\nplot1\n\n\n\n\nThis is incredibly useful in ggplot as we can essentially add pieces to make a more complete graph\n\nplot1+\n  geom_boxplot()+\n  geom_point()+\n  theme_bw()\n\nWarning: Removed 2 rows containing non-finite values (`stat_boxplot()`).\n\n\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n\n\n\n\n\nBefore we get too excited about making perfect graphs, let’s take a look at the types of graphs we have available to us…\n\n\n\nHistograms are used to explore the frequency distribution of a single variable. We can check for normality (a bell curve) using this feature. We can also look for means, skewed data, and other trends.\n\nggplot(data=penguins, aes(bill_length_mm))+\n  geom_histogram()\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nWarning: Removed 2 rows containing non-finite values (`stat_bin()`).\n\n\n\n\n\nWithin geom_histogram we can use bin_width to change the width of our x-axis groupings.\n\nggplot(data=penguins, aes(bill_length_mm))+\n  geom_histogram(binwidth=5)\n\nWarning: Removed 2 rows containing non-finite values (`stat_bin()`).\n\n\n\n\n\n\n\nA boxplot is a really useful plot to assess median and range of data. It can also identify outliers! The defaults for a boxplot in ggplot produce a median and interquartile range (IQR). The 1st quartile is the bottom of the box and the 3rd quartile is the top. The whiskers show the spread of the data where the ends of the whiskers represent the data points that are the furthest from the median in either direction. Notably, if a data point is 1.5 * IQR from the box (either the 1st or 3rd quartile) it is an outlier. Outliers are excluded from whiskers and are presented as points. There\nHere’s an example\n\nggplot(data=penguins, aes(x=species, y= bill_length_mm)) +\n  geom_boxplot()\n\nWarning: Removed 2 rows containing non-finite values (`stat_boxplot()`).\n\n\n\n\n\nWe can use geom_violin to combine boxplot with a density plot (similar to a histogram) Here we can see the distribution of values within bill length by species.\n\nggplot(data=penguins, aes(x=species, y= bill_length_mm)) +\n  #geom_boxplot()+\n  geom_violin()\n\nWarning: Removed 2 rows containing non-finite values (`stat_ydensity()`).\n\n\n\n\n\n\n\n\nWe can make bar graphs in ggplot using geom_bar(). There are some tricks to getting bar graphs to work exactly right, which I will try to detail below. NOTE Bar graphs are very rarely useful. If we want to show means, why not just use points + error bars? What does the bar actually represent? There aren’t that many cases where we really need bar graphs. There are exceptions, like when we have a population and we want to see the demographics of that population by count or percentage (see example below)\nHere is a simple bar chart.\n\nggplot(data=penguins, aes(species)) +\n  geom_bar()\n\n\n\n\nHere is a more elaborate boxplot that shows species breakdown by island! Note that we use an aes() call within geom_bar to define a fill. That means fill by species, or add a color for each species.\n\nggplot(data=penguins, aes(island)) +\n  geom_bar(aes(fill=species))\n\n\n\n\nAnd here is that same plot with the bars unstacked. Instead of stacking, we have used “dodged” each color to be its own bar.\n\nggplot(data=penguins, aes(island)) +\n  geom_bar(aes(fill=species), position= position_dodge())\n\n\n\n\nWe learned when the best (only) times to use bar graphs are. Do you remember what those were? Are the examples above representative of that?\n\n\n\nA line graph can be extremely useful, especially if we are looking at time series data or rates!\nHere is an example of CO2 uptake vs concentration in plants. Each color represents a different plant. NOTE: the dataset called ‘CO2’ is built into R, so we can just use it without loading anything :)\n\nhead(CO2)\n\n  Plant   Type  Treatment conc uptake\n1   Qn1 Quebec nonchilled   95   16.0\n2   Qn1 Quebec nonchilled  175   30.4\n3   Qn1 Quebec nonchilled  250   34.8\n4   Qn1 Quebec nonchilled  350   37.2\n5   Qn1 Quebec nonchilled  500   35.3\n6   Qn1 Quebec nonchilled  675   39.2\n\nggplot(data=CO2, aes(x=conc, y= uptake, color=Plant)) +\n  geom_line()\n\n\n\n\nWe can change the aesthetics of the lines using color, linetype, size, etc. Here I am changing the linetype based on the plant species and increasing the size of ALL lines to 2. This is a good example of how aes() works. Anything within the aes() call is conditional. That means, I give it a name (such as a column or variable name) and it changes based on that column or variable. To change an aesthetic across all lines, points, etc, I just put the code outside of the aes(). As I did for size. That makes the size of ALL lines = 2.\n\nggplot(data=CO2, aes(x=conc, y= uptake, color=Plant)) +\n  geom_line(aes(linetype=Plant),size=2)\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n\n\n\n\n\n\nThe scatter plot is probably the most commonly used graphical tool in ggplot. It is based on the geom_point() function\n\nggplot(data=penguins, aes(x=species, y= bill_length_mm)) +\n  geom_point()\n\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n\n\n\n\n\nImportantly, we can use the data= and aes() calls within geom_point() or any other geom instead of within ggplot() if needed. Why might this be important?\n\nggplot() +\n  geom_point(data=penguins, aes(x=species, y= bill_length_mm))\n\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n\n\n\n\n\nSometimes we don’t want to plot all of our points on the same vertical line. If that is the case, we can use geom_jitter()\n\nggplot(data=penguins, aes(x=species, y= bill_length_mm)) +\n  geom_jitter()\n\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n\n\n\n\n\n\n\n\nWe often want to present means and error in our visualizations. This can be done through the use of geom_boxplot() or through combining geom_point() with geom_errorbar()\nHere is an example of the later…\n\n#First, we need to calculate a mean bill length for our penguins by species and island\nsumpens&lt;- penguins %&gt;%\n  group_by(species, island) %&gt;%\n  na.omit() %&gt;% #removes rows with NA values (a few rows may otherwise have NA due to sampling error in the field)\n  summarize(meanbill=mean(bill_length_mm), sd=sd(bill_length_mm), n=n(), se=sd/sqrt(n))\n\nsumpens\n\n# A tibble: 5 × 6\n# Groups:   species [3]\n  species   island    meanbill    sd     n    se\n  &lt;fct&gt;     &lt;fct&gt;        &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt;\n1 Adelie    Biscoe        39.0  2.48    44 0.374\n2 Adelie    Dream         38.5  2.48    55 0.335\n3 Adelie    Torgersen     39.0  3.03    47 0.442\n4 Chinstrap Dream         48.8  3.34    68 0.405\n5 Gentoo    Biscoe        47.6  3.11   119 0.285\n\n# Now we can plot! \nggplot(data=sumpens, aes(x=species, y=meanbill, color=island))+\n  geom_point()+\n  geom_errorbar(data=sumpens, aes(x=species, ymin=meanbill-se, ymax=meanbill+se), width=0.2)\n\n\n\n\nAnd if we want to be extra fancy (and rigorous), we can plot the raw data behind the mean+error This is considered a graphical best practice as we can see the mean, error, and the true spread of the data!\n\nggplot()+\n  geom_jitter(data= penguins, aes(x=species, y=bill_length_mm, color=island), alpha=0.5, width=0.2)+ #this is the raw data\n  geom_point(data=sumpens, aes(x=species, y=meanbill, color=island), size=3)+ #this is the averages\n  geom_errorbar(data=sumpens, aes(x=species, ymin=meanbill-se, ymax=meanbill+se), width=0.1)\n\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n\n\n\n\n\nAn alternative to geom_jitter, which doesn’t always work, is to use geom_point but force the points to not overlap with position_dodge. Here is an example\n\n#first we should define the distance of our position_dodge\npd&lt;-position_dodge(width=0.2)\n\nggplot(data=sumpens, aes(x=species, y=meanbill, color=island))+\n  geom_point(data= penguins, aes(x=species, y=bill_length_mm, color=island), alpha=0.2, width=0.2, position=pd)+ #raw data\n  geom_point(size=3, position=pd)+ #averages\n  geom_errorbar(aes(ymin=meanbill-se, ymax=meanbill+se), width=0.2, position=pd)\n\nWarning in geom_point(data = penguins, aes(x = species, y = bill_length_mm, :\nIgnoring unknown parameters: `width`\n\n\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n\n\n\n\n\nThis code will produce the same graph as above. Note that in geom_jitter we just replaced width = with position =\n\nggplot(sumpens, aes(x=species, y= meanbill, color=island))+\n  geom_jitter(data= penguins, aes(x=species, y=bill_length_mm, color=island), alpha=0.5, position=pd)+ #this is the raw data\n  geom_point(size=3,position=pd)+ #this is the averages\n  geom_errorbar(aes(ymin=meanbill-se, ymax=meanbill+se), width=0.2, position=pd)\n\nWarning: Removed 2 rows containing missing values (`geom_point()`)."
  },
  {
    "objectID": "axes.html",
    "href": "axes.html",
    "title": "Axes labels and Titles",
    "section": "",
    "text": "#Load packages\nlibrary(tidyverse)\nlibrary(ggsci) #for easy color scales\nlibrary(patchwork) #to make multi-panel plots \nlibrary(palmerpenguins) # our fave penguin friends :)\n\n\ntitles and axis labels\nTitles and axis labels are easy to add and change in ggplot! We simply add another line to our code. NOTE you can also add a subtitle, caption, or change the legend title using labs!\n\nggplot(data=penguins, aes(x=species, y= bill_length_mm)) +\n  geom_boxplot(aes(fill=species))+\n  scale_fill_aaas()+\n  theme_classic()+\n  labs(x = 'Species', y='Bill length (mm)', title='Penguin bill length by species', fill='Species')+ #here I change the x-axis and y-axis labels, add a title, and change the legend label (to capitalize the 'S' in 'species')\n  theme(text=element_text(size=18))\n\nWarning: Removed 2 rows containing non-finite values (`stat_boxplot()`)."
  },
  {
    "objectID": "colors.html",
    "href": "colors.html",
    "title": "Colors",
    "section": "",
    "text": "#Load packages\nlibrary(tidyverse)\nlibrary(ggsci) #for easy color scales\nlibrary(patchwork) #to make multi-panel plots \nlibrary(palmerpenguins) # our fave penguin friends :)\n\n\nColors\nWe can change colors conditionally or manually.\nConditional Color Change To change colors conditionally, we use color= or fill= within an aes() call.\nHere I have changed the outline color (color=) for a series of boxplots based on species\n\nggplot(data=penguins, aes(x=species, y= bill_length_mm, color=species)) +\n  geom_boxplot()\n\nWarning: Removed 2 rows containing non-finite values (`stat_boxplot()`).\n\n\n\n\n\nI can also change the fill of the boxplots\n\nggplot(data=penguins, aes(x=species, y= bill_length_mm, fill=species)) +\n  geom_boxplot()\n\nWarning: Removed 2 rows containing non-finite values (`stat_boxplot()`).\n\n\n\n\n\nManual Color Change We can also change colors manually by using one of many options within ggplot. scale_color_manual (or scale_fill_manual) is the easiest. We simply define colors we want to use by name or hexcode.\n\nggplot(data=penguins, aes(x=species, y= bill_length_mm)) +\n  geom_boxplot(aes(fill=species))+\n  scale_fill_manual(values=c('red', 'black', 'blue'))\n\nWarning: Removed 2 rows containing non-finite values (`stat_boxplot()`).\n\n\n\n\n\nHere’s a giant table of color options in ggplot  You can also make your own color palette and apply that to your figure!\n\nmypal&lt;-c('dodgerblue', 'forestgreen', 'coral') # here I've made a 3 color palette\n\nggplot(data=penguins, aes(x=species, y= bill_length_mm)) +\n  geom_boxplot(aes(fill=species))+\n  scale_fill_manual(values=mypal)\n\nWarning: Removed 2 rows containing non-finite values (`stat_boxplot()`).\n\n\n\n\n\nYou can use the package RColorBrewer to make palettes as well. I’ll let you explore that one on your own!\nFinally, EASY and nice looking palettes with ggsci ggsci is a simple and neat package that allows us to use scientific journal color themes for our data (usually colorblind friendly and nice looking). we simply change our “scale_color_manual” to “scale_color_palname” where “palname” is one of many provided by ggsci. For example, we might use scale_color_aaas()\n\nggplot(data=penguins, aes(x=species, y= bill_length_mm)) +\n  geom_boxplot(aes(fill=species))+\n  scale_fill_aaas()\n\nWarning: Removed 2 rows containing non-finite values (`stat_boxplot()`)."
  },
  {
    "objectID": "shapes.html",
    "href": "shapes.html",
    "title": "Shapes",
    "section": "",
    "text": "#Load packages\nlibrary(tidyverse)\nlibrary(ggsci) #for easy color scales\nlibrary(patchwork) #to make multi-panel plots \nlibrary(palmerpenguins) # our fave penguin friends :)\n\n\nShapes\nggplot gives us options to change point shape using the aesethic option ‘shape’  We can either change shape based on a characterstic of the data (‘cyl’, for example), make all the shapes the same, or manually control shape\nBelow is a table of shape options:\n\n\n\nggplot shape options\n\n\nConditional Shape Change\n\nggplot(data=penguins, aes(x=species, y=bill_length_mm, color=island, shape=island))+ \n  geom_jitter(size=2)+\n  theme_classic()\n\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n\n\n\n\n\nChange all shapes to triangles\n\nggplot(data=mtcars, aes(x=cyl, y=mpg, color=cyl))+\n  geom_point(shape=17) #Here 'shape=' is inside the settings for geom_point. Note that it is outside the aes() function, as that applied aesethics conditionally)\n\n\n\n#example 2, same w/ different syntax\nggplot()+\n  geom_point(data=mtcars, aes(x=cyl, y=mpg, color=cyl), shape=17)\n\n\n\n\nManual shape changes\n\nggplot(data=penguins, aes(x=species, y=bill_length_mm, color=island, shape=island))+ \n  geom_jitter(size=2)+\n  theme_classic()+  \n  scale_shape_manual(values=c(2,3,4)) #scale_shape_manual allows us to choose shapes for each group (cyl in this case). c stands for concatenate, as we've seen before\n\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n\n\n\n\n\nChanging Size of points\nConditional Shape Change\n\nggplot(data=mtcars, aes(x=cyl, y=mpg, color=cyl, size=cyl))+ #note that we added 'size=' to our aes. \n  geom_point()\n\n\n\n#note the warning message that using size for a discrete variable is not best practice. \n#Instead, let's use the size to five us an idea of hp (a 3rd variable)\n\nggplot(data=mtcars, aes(x=cyl, y=mpg, color=cyl, size=hp))+ #note that we added 'size=' to our aes. \n  geom_point()\n\n\n\n\nChange size of all points (all points must be same size)\n\nggplot(data=mtcars, aes(x=cyl, y=mpg, color=cyl))+  \n  geom_point(size=5) #as w/ shape, point needs to be outside the aes() here."
  },
  {
    "objectID": "themes.html",
    "href": "themes.html",
    "title": "Themes",
    "section": "",
    "text": "#Load packages\nlibrary(tidyverse)\nlibrary(ggsci) #for easy color scales\nlibrary(patchwork) #to make multi-panel plots \nlibrary(palmerpenguins) # our fave penguin friends :)"
  },
  {
    "objectID": "themes.html#themes",
    "href": "themes.html#themes",
    "title": "Themes",
    "section": "Themes",
    "text": "Themes\nThemes allow us to change the background color and most other aspects of a plot. There are a range of theme options within ggplot that will allow us to quickly make clean plots. The two that are most commonly used are theme_bw() and theme_classic()\nDefault theme (with terrible gray background)\n\nggplot(data=penguins, aes(x=species, y= bill_length_mm)) +\n  geom_boxplot(aes(fill=species))+\n  scale_fill_aaas()+\n  labs(x = 'Species', y='Bill length (mm)', title='Penguin bill length by species')\n\nWarning: Removed 2 rows containing non-finite values (`stat_boxplot()`).\n\n\n\n\n\ntheme_bw() (removes gray background)\n\nggplot(data=penguins, aes(x=species, y= bill_length_mm)) +\n  geom_boxplot(aes(fill=species))+\n  scale_fill_aaas()+\n  labs(x = 'Species', y='Bill length (mm)', title='Penguin bill length by species')+\n  theme_bw()\n\nWarning: Removed 2 rows containing non-finite values (`stat_boxplot()`).\n\n\n\n\n\ntheme_classic() (removes gray and grid lines)\n\nggplot(data=penguins, aes(x=species, y= bill_length_mm)) +\n  geom_boxplot(aes(fill=species))+\n  scale_fill_aaas()+\n  labs(x = 'Species', y='Bill length (mm)', title='Penguin bill length by species')+\n  theme_classic()\n\nWarning: Removed 2 rows containing non-finite values (`stat_boxplot()`).\n\n\n\n\n\nThe theme() function in ggplot is SUPER flexible. You can pretty much do anything with it. This is key for customizing plots. I’d encourage you to play around with this a bit. Here is a great place to learn more and see examples.\n##Some examples of using theme()\nChanging text size\n\nggplot(data=penguins, aes(x=species, y= bill_length_mm)) +\n  geom_boxplot(aes(fill=species))+\n  scale_fill_aaas()+\n  labs(x = 'Species', y='Bill length (mm)', title='Penguin bill length by species')+\n  theme(text=element_text(size=24))\n\nWarning: Removed 2 rows containing non-finite values (`stat_boxplot()`).\n\n\n\n\n\nRemove the gray background\n\nggplot(data=penguins, aes(x=species, y= bill_length_mm)) +\n  geom_boxplot(aes(fill=species))+\n  scale_fill_aaas()+\n  labs(x = 'Species', y='Bill length (mm)', title='Penguin bill length by species')+\n  theme(text=element_text(size=24), panel.background = element_rect(fill=\"white\")) #can use any color\n\nWarning: Removed 2 rows containing non-finite values (`stat_boxplot()`).\n\n\n\n\n\nTurn the X-Axis text\n\nggplot(data=penguins, aes(x=species, y= bill_length_mm)) +\n  geom_boxplot(aes(fill=species))+\n  scale_fill_aaas()+\n  labs(x = 'Species', y='Bill length (mm)', title='Penguin bill length by species')+\n  theme(text=element_text(size=24), panel.background = element_rect(fill=\"white\"), axis.text.x=element_text(angle=90, vjust=0.5, hjust=0.8)) #can adjust vertical and horizontal text positions\n\nWarning: Removed 2 rows containing non-finite values (`stat_boxplot()`)."
  },
  {
    "objectID": "facets.html",
    "href": "facets.html",
    "title": "Multiple panels and multiple graphs",
    "section": "",
    "text": "Often in science we are interested in comparing several graphs at once or looking at 3 or 4 variables at a time. This means we may want to have multi-panel graphs or multiple graphs on the same page. While it is common to produce graphs in R and combine them into “final” manuscript ready version in other programs, such as Adobe Illustrator or Inkscape (a free alternative to Illustrator), producing manuscript quality figures in R is possible! In fact, it is only getting easier, thanks to some new packages (like patchwork). Below I will show you how to make multipanel figures (aka facets) and how to put many figures on one page (using the patchwork package– the easiest of the many options for doing this).\n#Load packages\nlibrary(tidyverse)\nlibrary(ggsci) #for easy color scales\nlibrary(patchwork) #to make multi-panel plots \nlibrary(palmerpenguins) # our fave penguin friends :)"
  },
  {
    "objectID": "facets.html#facets",
    "href": "facets.html#facets",
    "title": "Multiple panels and multiple graphs",
    "section": "facets",
    "text": "facets\nFacets allow us to produce multiple graph panels with one ggplot code. We can separate out a variable for easier viewing or even create a grid of graphs using multiple variables.\nfacet_wrap() allows us to make multiple panels. The panels are aligned in columns and rows. We need to use ‘~’ in our facet_wrap code. The ‘~’ essentially means “by”\n\nggplot(data=penguins, aes(x=island, y= bill_length_mm, fill=species)) +\n  geom_boxplot()+\n  facet_wrap(~island)+\n  scale_color_aaas()+\n  theme_classic()\n\nWarning: Removed 2 rows containing non-finite values (`stat_boxplot()`).\n\n\n\n\n\nWe can specify the number of columns and rows we want to built the panels how we like them\n\nggplot(data=penguins, aes(x=year, y= bill_length_mm, fill=species)) +\n  geom_boxplot()+\n  facet_wrap(~island, ncol=2)+ #2 columns \n  scale_color_aaas()+\n  theme_classic()\n\nWarning: Removed 2 rows containing non-finite values (`stat_boxplot()`).\n\n\n\n\n\n\nggplot(data=penguins, aes(x=year, y= bill_length_mm, fill=species)) +\n  geom_boxplot()+\n  facet_wrap(~island, nrow=3)+ #3 rows\n  scale_color_aaas()+\n  theme_classic()\n\nWarning: Removed 2 rows containing non-finite values (`stat_boxplot()`).\n\n\n\n\n\nWe can even use a formula for building our facets if we’d like!\n\nggplot(data=penguins, aes(x=island, y= bill_length_mm, fill=species)) +\n  geom_boxplot()+\n  facet_wrap(~species+year)+\n  scale_color_aaas()+\n  theme_classic()\n\nWarning: Removed 2 rows containing non-finite values (`stat_boxplot()`)."
  },
  {
    "objectID": "facets.html#multiple-plots-on-the-same-page",
    "href": "facets.html#multiple-plots-on-the-same-page",
    "title": "Multiple panels and multiple graphs",
    "section": "Multiple plots on the same page",
    "text": "Multiple plots on the same page\nUsing the simple and wonderful patchwork package, we can place multiple plots on the same page. To do this, we must actually name each plot. Here’s an example.\nPatchwork is super easy! Learn more here(with examples)\nFirst, let’s make some graphs and name them\n\n#First, we need to calculate a mean bill length for our penguins by species and island\nsumpens&lt;- penguins %&gt;%\n  group_by(species, island) %&gt;%\n  na.omit() %&gt;% #removes rows with NA values (a few rows may otherwise have NA due to sampling error in the field)\n  summarize(meanbill=mean(bill_length_mm), sd=sd(bill_length_mm), n=n(), se=sd/sqrt(n))\n\n`summarise()` has grouped output by 'species'. You can override using the\n`.groups` argument.\n\nsumpens\n\n# A tibble: 5 × 6\n# Groups:   species [3]\n  species   island    meanbill    sd     n    se\n  &lt;fct&gt;     &lt;fct&gt;        &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt;\n1 Adelie    Biscoe        39.0  2.48    44 0.374\n2 Adelie    Dream         38.5  2.48    55 0.335\n3 Adelie    Torgersen     39.0  3.03    47 0.442\n4 Chinstrap Dream         48.8  3.34    68 0.405\n5 Gentoo    Biscoe        47.6  3.11   119 0.285\n\n# Next, we can make our graphs!\n\np1&lt;-ggplot(data=penguins, aes(bill_length_mm))+\n  geom_histogram()+\n  theme_classic()\n\n\np2&lt;-ggplot()+\n  geom_jitter(data= penguins, aes(x=species, y=bill_length_mm, color=island), alpha=0.5, width=0.2)+\n  geom_point(data=sumpens, aes(x=species, y=meanbill, color=island), size=3)+\n  geom_errorbar(data=sumpens, aes(x=species, ymin=meanbill-se, ymax=meanbill+se), width=0.1)+\n  theme_classic()+\n  scale_color_aaas()\n\np3&lt;-ggplot(data=penguins, aes(island)) +\n  geom_bar(aes(fill=species), position= position_dodge())+\n  theme_classic()+\n  scale_fill_aaas()\n\nNow let’s patchwork them together! We make a simple formula to make a patchwork. Addition puts everything in the same row. But we can use division and other symbols to organize.\n\nlibrary(patchwork)\n\np1+p2+p3\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nWarning: Removed 2 rows containing non-finite values (`stat_bin()`).\n\n\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n\n\n\n\n\nDivision allows us to put panels in columns\n\np1/p2/p3\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nWarning: Removed 2 rows containing non-finite values (`stat_bin()`).\n\n\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n\n\n\n\n\nWe can also combine addition and division (order of operations is still a thing!)\n\n(p1+p2) / p3\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nWarning: Removed 2 rows containing non-finite values (`stat_bin()`).\n\n\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n\n\n\n\n\nThere are other functions in patchwork that allow us to annotate plots, give them labels, move/combine legends, etc."
  },
  {
    "objectID": "intro_tidyverse.html",
    "href": "intro_tidyverse.html",
    "title": "Intro to the Tidyverse",
    "section": "",
    "text": "The Tidyverse is a collection of R packages that can be used together for many different data science practices. They share syntax and are very versatile. For most users, the Tidyverse provides a structure of “best practices” that will allow a user to do just about anything with data.\nWe can load the Tidyverse as a single package in R:\n\nlibrary(tidyverse)\n\nThe tidyverse package contains the following packages: 1.) ggplot2: the best graphing package in R\n2.) dplyr: most of our data wrangling tools come from here\n3.) tidyr: tools for data tidying (cleaning, reshaping)\n4.) readr: tools for reading in different types of data – this is where the read_csv() function comes from\n5.) purrr: tools for working with functions and vectors (useful but likely not right away for beginners)\n6.) stringr: functions to help us work with strings (like sentences, paragraphs, lists, etc)\n7.) forcats: “for categories” - makes working with factors (categorical data) easier!\nLearn more about the Tidyverse\nThis section contains some worked examples of Tidyverse best practices for data manipulation. If you just want a quick refresher, you can take a look at the cheat sheet below!\n\n\n\n\nWe can mess with a few data sets that are built into R or into R packages.\nA common one is mtcars, which is part of base R (attributes of a bunch of cars)\n\nhead(mtcars)\n\n                   mpg cyl disp  hp drat    wt  qsec vs am gear carb\nMazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\nValiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1\n\n\nAnother fun one is CO2, which is also part of base R (CO2 uptake from different plants). Note: co2 (no caps) is also a dataset in R. It’s just the CO2 concentration at Maona Loa observatory every year (as a list).\n\nhead(CO2)\n\n  Plant   Type  Treatment conc uptake\n1   Qn1 Quebec nonchilled   95   16.0\n2   Qn1 Quebec nonchilled  175   30.4\n3   Qn1 Quebec nonchilled  250   34.8\n4   Qn1 Quebec nonchilled  350   37.2\n5   Qn1 Quebec nonchilled  500   35.3\n6   Qn1 Quebec nonchilled  675   39.2\n\n\nYou are welcome to use these to practice with or you can choose from any of the datasets in the ‘datasets’ or ‘MASS’ packages (you have to load the package to get the datasets).\nYou can also load in your own data or pick something from online, as we learned how to do last time.\nLet’s stick with what we know for now– I will use the penguins data from the palmerpenguins package\nload the data\n\nlibrary(palmerpenguins)\npenguins\n\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\nadd the dataframe to our environment As you learned in the Rstudio basics tutorial above, one of the four main panels of the RStudio window contains the Environment tab. In this tab, we can see data that are stored locally in our session of R. While penguins is pre-loaded in R, it is nice to make a local copy so we can modify it easily.\nHere’s how we do that:\n\npenguins&lt;-penguins \n\nHere, the name of the new dataframe we want in our environment is to the left of the arrow and the name of the object we are calling is to the right. In simpler terms, we are defining a new dataframe called penguins (or any name we want) and it is defined as just an exact copy of penguins (the object that is already defined within palmerpenguins. This is the simplest example – we will quickly move on to more complex things. You will see that when you run this the dataframe ‘penguins’ appears in the local environment. You can call your local file anything you want, it does not need to be an exact copy of the orignal name! Choose names that are meaningful to you, but keep the names short and avoid spaces and other special characters as much as possible."
  },
  {
    "objectID": "intro_tidyverse.html#read-in-some-data",
    "href": "intro_tidyverse.html#read-in-some-data",
    "title": "Intro to the Tidyverse",
    "section": "",
    "text": "We can mess with a few data sets that are built into R or into R packages.\nA common one is mtcars, which is part of base R (attributes of a bunch of cars)\n\nhead(mtcars)\n\n                   mpg cyl disp  hp drat    wt  qsec vs am gear carb\nMazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\nValiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1\n\n\nAnother fun one is CO2, which is also part of base R (CO2 uptake from different plants). Note: co2 (no caps) is also a dataset in R. It’s just the CO2 concentration at Maona Loa observatory every year (as a list).\n\nhead(CO2)\n\n  Plant   Type  Treatment conc uptake\n1   Qn1 Quebec nonchilled   95   16.0\n2   Qn1 Quebec nonchilled  175   30.4\n3   Qn1 Quebec nonchilled  250   34.8\n4   Qn1 Quebec nonchilled  350   37.2\n5   Qn1 Quebec nonchilled  500   35.3\n6   Qn1 Quebec nonchilled  675   39.2\n\n\nYou are welcome to use these to practice with or you can choose from any of the datasets in the ‘datasets’ or ‘MASS’ packages (you have to load the package to get the datasets).\nYou can also load in your own data or pick something from online, as we learned how to do last time.\nLet’s stick with what we know for now– I will use the penguins data from the palmerpenguins package\nload the data\n\nlibrary(palmerpenguins)\npenguins\n\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\nadd the dataframe to our environment As you learned in the Rstudio basics tutorial above, one of the four main panels of the RStudio window contains the Environment tab. In this tab, we can see data that are stored locally in our session of R. While penguins is pre-loaded in R, it is nice to make a local copy so we can modify it easily.\nHere’s how we do that:\n\npenguins&lt;-penguins \n\nHere, the name of the new dataframe we want in our environment is to the left of the arrow and the name of the object we are calling is to the right. In simpler terms, we are defining a new dataframe called penguins (or any name we want) and it is defined as just an exact copy of penguins (the object that is already defined within palmerpenguins. This is the simplest example – we will quickly move on to more complex things. You will see that when you run this the dataframe ‘penguins’ appears in the local environment. You can call your local file anything you want, it does not need to be an exact copy of the orignal name! Choose names that are meaningful to you, but keep the names short and avoid spaces and other special characters as much as possible."
  },
  {
    "objectID": "intro_tidyverse.html#select-or-remove-columnsrows",
    "href": "intro_tidyverse.html#select-or-remove-columnsrows",
    "title": "Intro to the Tidyverse",
    "section": "Select or remove columns/rows",
    "text": "Select or remove columns/rows\nLet’s look at penguins\n\nhead(penguins)\n\n# A tibble: 6 × 8\n  species island    bill_length_mm bill_depth_mm flipper_l…¹ body_…² sex    year\n  &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;       &lt;int&gt;   &lt;int&gt; &lt;fct&gt; &lt;int&gt;\n1 Adelie  Torgersen           39.1          18.7         181    3750 male   2007\n2 Adelie  Torgersen           39.5          17.4         186    3800 fema…  2007\n3 Adelie  Torgersen           40.3          18           195    3250 fema…  2007\n4 Adelie  Torgersen           NA            NA            NA      NA &lt;NA&gt;   2007\n5 Adelie  Torgersen           36.7          19.3         193    3450 fema…  2007\n6 Adelie  Torgersen           39.3          20.6         190    3650 male   2007\n# … with abbreviated variable names ¹​flipper_length_mm, ²​body_mass_g\n\n\nNow let’s say we only really care about species and bill length. We can select those columns to keep and remove the rest of the columns because they are just clutter at this point. There are two ways we can do this: 1.) Select the columns we want to keep 2.) Select the columns we want to remove\nHere are two ways to do that:\nBase R example For those with some coding experience you may like this method as this syntax is common in other coding languages\nStep 1.) Count the column numbers. Column 1 is the left most column. Remember we can use ncol() to count the total number of columns (useful when we have a huge number of columns)\n\nncol(penguins) # we have 8 columns\n\n[1] 8\n\n\nSpecies is column 1 and bill length is column 3. Those are the only columns we want!\nStep 2.) Select columns we want to keep using bracket syntax. Here we wil use this basic syntax: df[rows, columns] We can input the rows and/or columns we want inside our brackets. If we want more than 1 row or column we will need to use a ‘c()’ for concatenate (combine). To select just species and bill length we would do the following:\n\nhead(penguins[,c(1,3)]) #Selecting NO specific rows and 2 columns (numbers 1 and 3)\n\n# A tibble: 6 × 2\n  species bill_length_mm\n  &lt;fct&gt;            &lt;dbl&gt;\n1 Adelie            39.1\n2 Adelie            39.5\n3 Adelie            40.3\n4 Adelie            NA  \n5 Adelie            36.7\n6 Adelie            39.3\n\n\nIMPORTANT When we do this kind of manipulation it is super helpful to NAME the output. In the above example I didn’t do that. If I don’t name the output I cannot easily call it later. If I do name it, I can use it later and see it in my ‘Environment’ tab. So, I should do this:\n\npens&lt;-penguins[,c(1,3)]\nhead(pens)\n\n# A tibble: 6 × 2\n  species bill_length_mm\n  &lt;fct&gt;            &lt;dbl&gt;\n1 Adelie            39.1\n2 Adelie            39.5\n3 Adelie            40.3\n4 Adelie            NA  \n5 Adelie            36.7\n6 Adelie            39.3\n\n\nNow, here’s how you do the same selection step by removing the columns you DO NOT want.\n\npens2&lt;-penguins[,-c(2,4:8)] #NOTE that ':' is just shorthand for all columns between 4 and 8. I could also use -c(2,4,5,6,7,8)\nhead(pens2)\n\n# A tibble: 6 × 2\n  species bill_length_mm\n  &lt;fct&gt;            &lt;dbl&gt;\n1 Adelie            39.1\n2 Adelie            39.5\n3 Adelie            40.3\n4 Adelie            NA  \n5 Adelie            36.7\n6 Adelie            39.3\n\n\n\nTidyverse example (select())\nPerhaps that example above was a little confusing? This is why we like Tidyverse! We can do the same thing using the select() function in Tidyverse and it is easier!\nI still want just species and bill length. Here’s how I select them:\n\nhead(select(penguins, species, bill_length_mm))\n\n# A tibble: 6 × 2\n  species bill_length_mm\n  &lt;fct&gt;            &lt;dbl&gt;\n1 Adelie            39.1\n2 Adelie            39.5\n3 Adelie            40.3\n4 Adelie            NA  \n5 Adelie            36.7\n6 Adelie            39.3\n\n\nEASY. Don’t forget to name the output for use later :)\nLike this:\n\nshortpen&lt;-select(penguins, species, bill_length_mm)\nhead(shortpen)\n\n# A tibble: 6 × 2\n  species bill_length_mm\n  &lt;fct&gt;            &lt;dbl&gt;\n1 Adelie            39.1\n2 Adelie            39.5\n3 Adelie            40.3\n4 Adelie            NA  \n5 Adelie            36.7\n6 Adelie            39.3"
  },
  {
    "objectID": "intro_tidyverse.html#add-new-columns-or-change-existing-ones",
    "href": "intro_tidyverse.html#add-new-columns-or-change-existing-ones",
    "title": "Intro to the Tidyverse",
    "section": "Add new columns or change existing ones",
    "text": "Add new columns or change existing ones\nAdding a new column Sometimes we may want to do some math on a column (or a series of columns). Maybe we want to calculate a ratio, volume, or area. Maybe we just want to scale a variable by taking the log or changing it from cm to mm. We can do all of this with the mutate() function in Tidyverse!\n\n#convert bill length to cm (and make a new column)\nhead(penguins)\n\n# A tibble: 6 × 8\n  species island    bill_length_mm bill_depth_mm flipper_l…¹ body_…² sex    year\n  &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;       &lt;int&gt;   &lt;int&gt; &lt;fct&gt; &lt;int&gt;\n1 Adelie  Torgersen           39.1          18.7         181    3750 male   2007\n2 Adelie  Torgersen           39.5          17.4         186    3800 fema…  2007\n3 Adelie  Torgersen           40.3          18           195    3250 fema…  2007\n4 Adelie  Torgersen           NA            NA            NA      NA &lt;NA&gt;   2007\n5 Adelie  Torgersen           36.7          19.3         193    3450 fema…  2007\n6 Adelie  Torgersen           39.3          20.6         190    3650 male   2007\n# … with abbreviated variable names ¹​flipper_length_mm, ²​body_mass_g\n\nmutpen&lt;-(mutate(penguins, bill_length_cm=bill_length_mm/10))\nhead(mutpen)         \n\n# A tibble: 6 × 9\n  species island    bill_length_mm bill_de…¹ flipp…² body_…³ sex    year bill_…⁴\n  &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;     &lt;dbl&gt;   &lt;int&gt;   &lt;int&gt; &lt;fct&gt; &lt;int&gt;   &lt;dbl&gt;\n1 Adelie  Torgersen           39.1      18.7     181    3750 male   2007    3.91\n2 Adelie  Torgersen           39.5      17.4     186    3800 fema…  2007    3.95\n3 Adelie  Torgersen           40.3      18       195    3250 fema…  2007    4.03\n4 Adelie  Torgersen           NA        NA        NA      NA &lt;NA&gt;   2007   NA   \n5 Adelie  Torgersen           36.7      19.3     193    3450 fema…  2007    3.67\n6 Adelie  Torgersen           39.3      20.6     190    3650 male   2007    3.93\n# … with abbreviated variable names ¹​bill_depth_mm, ²​flipper_length_mm,\n#   ³​body_mass_g, ⁴​bill_length_cm\n\n\nChange existing column The code above makes a new column in which bill length in cm is added as a new column to the data frame. We could have also just done the math in the original column if we wanted. That would look like this:\n\nhead(penguins)\n\n# A tibble: 6 × 8\n  species island    bill_length_mm bill_depth_mm flipper_l…¹ body_…² sex    year\n  &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;       &lt;int&gt;   &lt;int&gt; &lt;fct&gt; &lt;int&gt;\n1 Adelie  Torgersen           39.1          18.7         181    3750 male   2007\n2 Adelie  Torgersen           39.5          17.4         186    3800 fema…  2007\n3 Adelie  Torgersen           40.3          18           195    3250 fema…  2007\n4 Adelie  Torgersen           NA            NA            NA      NA &lt;NA&gt;   2007\n5 Adelie  Torgersen           36.7          19.3         193    3450 fema…  2007\n6 Adelie  Torgersen           39.3          20.6         190    3650 male   2007\n# … with abbreviated variable names ¹​flipper_length_mm, ²​body_mass_g\n\nmutpen&lt;-(mutate(penguins, bill_length_mm=bill_length_mm/10))\nhead(mutpen) \n\n# A tibble: 6 × 8\n  species island    bill_length_mm bill_depth_mm flipper_l…¹ body_…² sex    year\n  &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;       &lt;int&gt;   &lt;int&gt; &lt;fct&gt; &lt;int&gt;\n1 Adelie  Torgersen           3.91          18.7         181    3750 male   2007\n2 Adelie  Torgersen           3.95          17.4         186    3800 fema…  2007\n3 Adelie  Torgersen           4.03          18           195    3250 fema…  2007\n4 Adelie  Torgersen          NA             NA            NA      NA &lt;NA&gt;   2007\n5 Adelie  Torgersen           3.67          19.3         193    3450 fema…  2007\n6 Adelie  Torgersen           3.93          20.6         190    3650 male   2007\n# … with abbreviated variable names ¹​flipper_length_mm, ²​body_mass_g\n\n\nNOTE This is misleading because now the values in bill_length_mm are in cm. Thus, it was better to just make a new column in this case. But you don’t have to make a new column every time if you would prefer not to. Just be careful.\nColumn math in Base R Column manipulation is easy enough in base R as well. We can do the same thing we did above without Tidyverse like this:\n\npenguins$bill_length_cm = penguins$bill_length_mm /10\nhead(penguins)\n\n# A tibble: 6 × 9\n  species island    bill_length_mm bill_de…¹ flipp…² body_…³ sex    year bill_…⁴\n  &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;     &lt;dbl&gt;   &lt;int&gt;   &lt;int&gt; &lt;fct&gt; &lt;int&gt;   &lt;dbl&gt;\n1 Adelie  Torgersen           39.1      18.7     181    3750 male   2007    3.91\n2 Adelie  Torgersen           39.5      17.4     186    3800 fema…  2007    3.95\n3 Adelie  Torgersen           40.3      18       195    3250 fema…  2007    4.03\n4 Adelie  Torgersen           NA        NA        NA      NA &lt;NA&gt;   2007   NA   \n5 Adelie  Torgersen           36.7      19.3     193    3450 fema…  2007    3.67\n6 Adelie  Torgersen           39.3      20.6     190    3650 male   2007    3.93\n# … with abbreviated variable names ¹​bill_depth_mm, ²​flipper_length_mm,\n#   ³​body_mass_g, ⁴​bill_length_cm"
  },
  {
    "objectID": "intro_tidyverse.html#pivot-data-wide-to-long-long-to-wide",
    "href": "intro_tidyverse.html#pivot-data-wide-to-long-long-to-wide",
    "title": "Intro to the Tidyverse",
    "section": "Pivot data (wide to long / long to wide)",
    "text": "Pivot data (wide to long / long to wide)\n‘Pivoting’ data means changing the format of the data. Tidyverse and ggplot in particular tend to like data in ‘long’ format. Long format means few columns and many rows. Wide format is the opposite- many columns and fewer rows.\nWide format is usually how the human brain organizes data. For example, a spreadsheet in which every species is in its own column is wide format. You might take this sheet to the field and record present/absence or count of each species at each site or something. This is great but it might be easier for us to calculate averages or do group based analysis in R if we have a column called ‘species’ in which every single species observation is a row. This leads to A LOT of repeated categorical variables (site, date, etc), which is fine.\nExample of Long Format The built in dataset ‘fish_encounters’ is a simple example of long format data. Penguins, iris, and others are also in long format but are more complex\n\nhead(fish_encounters) # here we see 3 columns that track each fish (column 1) across MANY stations (column 2) \n\n# A tibble: 6 × 3\n  fish  station  seen\n  &lt;fct&gt; &lt;fct&gt;   &lt;int&gt;\n1 4842  Release     1\n2 4842  I80_1       1\n3 4842  Lisbon      1\n4 4842  Rstr        1\n5 4842  Base_TD     1\n6 4842  BCE         1\n\n\nConverting from long to wide using pivot_wider (Tidyverse) Although we know that long format is preferred for working in Tidyverse and doing graphing and data analysis in R, we sometimes do want data to be in wide format. There are certain functions and operations that may require wide format. This is also the format that we are most likely to use in the field. So, let’s convert fish_encounters back to what it likely was when the data were recorded in the field…\n\n#penguins long to wide using pivot_wider\n\nwidefish&lt;-fish_encounters %&gt;%\n  pivot_wider(names_from= station, values_from = seen)\n\nhead(widefish)\n\n# A tibble: 6 × 12\n  fish  Release I80_1 Lisbon  Rstr Base_TD   BCE   BCW  BCE2  BCW2   MAE   MAW\n  &lt;fct&gt;   &lt;int&gt; &lt;int&gt;  &lt;int&gt; &lt;int&gt;   &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;\n1 4842        1     1      1     1       1     1     1     1     1     1     1\n2 4843        1     1      1     1       1     1     1     1     1     1     1\n3 4844        1     1      1     1       1     1     1     1     1     1     1\n4 4845        1     1      1     1       1    NA    NA    NA    NA    NA    NA\n5 4847        1     1      1    NA      NA    NA    NA    NA    NA    NA    NA\n6 4848        1     1      1     1      NA    NA    NA    NA    NA    NA    NA\n\n\nThe resulting data frame above is a wide version of the orignal in which each station now has its own column. This is likely how we would record the data in the field!\nExample of Wide Format Data Let’s just use widefish for this since we just made it into wide format :)\n\nhead(widefish)\n\n# A tibble: 6 × 12\n  fish  Release I80_1 Lisbon  Rstr Base_TD   BCE   BCW  BCE2  BCW2   MAE   MAW\n  &lt;fct&gt;   &lt;int&gt; &lt;int&gt;  &lt;int&gt; &lt;int&gt;   &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;\n1 4842        1     1      1     1       1     1     1     1     1     1     1\n2 4843        1     1      1     1       1     1     1     1     1     1     1\n3 4844        1     1      1     1       1     1     1     1     1     1     1\n4 4845        1     1      1     1       1    NA    NA    NA    NA    NA    NA\n5 4847        1     1      1    NA      NA    NA    NA    NA    NA    NA    NA\n6 4848        1     1      1     1      NA    NA    NA    NA    NA    NA    NA\n\n\nConverting from Wide to Long using pivot_longer (Tidyverse)\n\nlongfish&lt;- widefish %&gt;%\n  pivot_longer(!fish, names_to = 'station', values_to = 'seen')\n\nhead(longfish)\n\n# A tibble: 6 × 3\n  fish  station  seen\n  &lt;fct&gt; &lt;chr&gt;   &lt;int&gt;\n1 4842  Release     1\n2 4842  I80_1       1\n3 4842  Lisbon      1\n4 4842  Rstr        1\n5 4842  Base_TD     1\n6 4842  BCE         1\n\n\nAnd now we are back to our original data frame! The ‘!fish’ means simply that we do not wish to pivot the fish column. It remains unchanged. A ‘!’ before something in code usually means to exclude or remove. We’ve used names_to and values_to to give names to our new columns. pivot_longer will look for facotrs and put those in the names_to column and it will look for values (numeric) to pupt in the values_to column.\nNOTES There are MANY other ways to modify pivot_wider() and pivot_longer(). I encourage you to look in the help tab, the tidyR/ Tidyverse documentation online, and for other examples on google and stack overflow.\n\n:::"
  },
  {
    "objectID": "rbasics.html#read-a-file-from-an-online-source",
    "href": "rbasics.html#read-a-file-from-an-online-source",
    "title": "Packages & reading/writing data",
    "section": "Read a file from an online source",
    "text": "Read a file from an online source\nIn some cases you may be using data you’ve found online. Perhaps you can download, save, and then read your file into R. Sometimes that is more work than we want to do. You can just call a file directly from it’s URL. Here is an example:\nI have a dataframe on coral cover from Belize that I want to read in. It is located on my github coral cover data. Let’s read it directly into R! The URL you see above is NOT what we use in R. If you find a file on Github you want to locate the ‘raw’ version of the file. To do this:\n1.) Click the link above (or find a data file on github)\n2.) Navigate to the top right menu and look for the box that says “Raw” in it. You can click on that and open the raw file and then copy the URL. OR, you can click the box next to the “Raw” box to copy the link to the raw file. We use this link to read our data into R. This will work for any .csv you find on github. I like to get practice data from the TidyTuesday project on Github. You can find their data at the following link:\nTidy Tuesday Data\n\n\ncoralcover&lt;- read_csv('https://raw.githubusercontent.com/jbaumann3/BIOL234_Biostats_MHC/main/coralcover.csv')\n\nRows: 77 Columns: 6\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): type\ndbl (5): site, lat, transect, diver, cc_percent\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nhead(coralcover)\n\n# A tibble: 6 × 6\n   site type         lat transect diver cc_percent\n  &lt;dbl&gt; &lt;chr&gt;      &lt;dbl&gt;    &lt;dbl&gt; &lt;dbl&gt;      &lt;dbl&gt;\n1     1 Back Reef      3        1     4      5.84 \n2     1 Back Reef      3        2     4      0.951\n3     1 Back Reef      3        3     4      5.24 \n4     1 Back Reef      3        4     5      5.00 \n5     1 Back Reef      3        5     5      5.90 \n6     2 Patch Reef     3        1     4      5.28"
  },
  {
    "objectID": "intro_tidyverse.html#subsetting-and-filtering-data",
    "href": "intro_tidyverse.html#subsetting-and-filtering-data",
    "title": "Intro to the Tidyverse",
    "section": "Subsetting and filtering data",
    "text": "Subsetting and filtering data\nSometimes we only want to look at data from a subset of the data frame\n\nFor example, maybe we only want to examine data from chinstrap penguins in the penguins data. OR perhaps we only care about 4 cylinder cars in mtcars. We can filter out the data we don’t want easily using Tidyverse (filter) or base R (subset)\nTidyverse example - Using filter()\nLet’s go ahead and filter the penguins data to only include chinstraps and the mtcars data to only include 4 cylinder cars\nThe syntax for filter is: filter(df, column =&gt;&lt;== number or factor)\n\n#filter penguins to only contain chinstrap\nchins&lt;-filter(penguins, species=='Chinstrap')\nhead(chins)\n\n# A tibble: 6 × 8\n  species   island bill_length_mm bill_depth_mm flipper_le…¹ body_…² sex    year\n  &lt;fct&gt;     &lt;fct&gt;           &lt;dbl&gt;         &lt;dbl&gt;        &lt;int&gt;   &lt;int&gt; &lt;fct&gt; &lt;int&gt;\n1 Chinstrap Dream            46.5          17.9          192    3500 fema…  2007\n2 Chinstrap Dream            50            19.5          196    3900 male   2007\n3 Chinstrap Dream            51.3          19.2          193    3650 male   2007\n4 Chinstrap Dream            45.4          18.7          188    3525 fema…  2007\n5 Chinstrap Dream            52.7          19.8          197    3725 male   2007\n6 Chinstrap Dream            45.2          17.8          198    3950 fema…  2007\n# … with abbreviated variable names ¹​flipper_length_mm, ²​body_mass_g\n\n#confirm that we only have chinstraps\nchins$species\n\n [1] Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap\n [8] Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap\n[15] Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap\n[22] Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap\n[29] Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap\n[36] Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap\n[43] Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap\n[50] Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap\n[57] Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap\n[64] Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap\nLevels: Adelie Chinstrap Gentoo\n\n\nNow for mtcars…\n\n#filter mtcars to only contain 4 cylinder cars\ncars4cyl&lt;-filter(mtcars, cyl == \"4\")\nhead(cars4cyl)\n\n                mpg cyl  disp hp drat    wt  qsec vs am gear carb\nDatsun 710     22.8   4 108.0 93 3.85 2.320 18.61  1  1    4    1\nMerc 240D      24.4   4 146.7 62 3.69 3.190 20.00  1  0    4    2\nMerc 230       22.8   4 140.8 95 3.92 3.150 22.90  1  0    4    2\nFiat 128       32.4   4  78.7 66 4.08 2.200 19.47  1  1    4    1\nHonda Civic    30.4   4  75.7 52 4.93 1.615 18.52  1  1    4    2\nToyota Corolla 33.9   4  71.1 65 4.22 1.835 19.90  1  1    4    1\n\n#confirm it worked\nstr(cars4cyl) #str shows us the observations and variables in each column\n\n'data.frame':   11 obs. of  11 variables:\n $ mpg : num  22.8 24.4 22.8 32.4 30.4 33.9 21.5 27.3 26 30.4 ...\n $ cyl : num  4 4 4 4 4 4 4 4 4 4 ...\n $ disp: num  108 146.7 140.8 78.7 75.7 ...\n $ hp  : num  93 62 95 66 52 65 97 66 91 113 ...\n $ drat: num  3.85 3.69 3.92 4.08 4.93 4.22 3.7 4.08 4.43 3.77 ...\n $ wt  : num  2.32 3.19 3.15 2.2 1.61 ...\n $ qsec: num  18.6 20 22.9 19.5 18.5 ...\n $ vs  : num  1 1 1 1 1 1 1 1 0 1 ...\n $ am  : num  1 0 0 1 1 1 0 1 1 1 ...\n $ gear: num  4 4 4 4 4 4 3 4 5 5 ...\n $ carb: num  1 2 2 1 2 1 1 1 2 2 ...\n\ncars4cyl$cyl #shows us only the observations in the cyl column!\n\n [1] 4 4 4 4 4 4 4 4 4 4 4\n\n\nBase R example (subset) In this case, the subset() function that is in base R works almost exactly like the filter() function. You can essentially use them interchangably.\n\n#subset mtcars to include only 4 cylinder cars\ncars4cyl2.0&lt;-subset(mtcars, cyl=='4')\ncars4cyl2.0\n\n                mpg cyl  disp  hp drat    wt  qsec vs am gear carb\nDatsun 710     22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1\nMerc 240D      24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2\nMerc 230       22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2\nFiat 128       32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1\nHonda Civic    30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2\nToyota Corolla 33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1\nToyota Corona  21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1\nFiat X1-9      27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1\nPorsche 914-2  26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2\nLotus Europa   30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2\nVolvo 142E     21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2"
  },
  {
    "objectID": "pipe.html",
    "href": "pipe.html",
    "title": "Stringing functions together with the pipe",
    "section": "",
    "text": "First, we need to load packages!\n\nlibrary(tidyverse)\nlibrary(palmerpenguins) #for practice data :)\n\n\n\nThe pipe, denoted as ‘|’ in most programming languages but as ‘%&gt;%’ in R, is used to link functions together. This is an oversimplification, but it works for our needs.\nA pipe (%&gt;%) is useful when we want to do a sequence of actions to an original data frame. For example, maybe we want to select() some columns and then filter() the resulting selection before finally calculating an average (or something). We can do all of those steps individually or we can use pipes to do them all at once and create one output.\nWe can think of the pipe as the phrase “and then.” I will show examples in the next section.\nWhen not to use a pipe: 1.) When you want to do manipulate multiple data frames at the same time 2.) When there are meanginful intermediate objects (aka we want an intermediate step to produce a named data frame)\n\n\n\n\nThe pipe is coded as ‘%&gt;%’ and should have a single space on either side of it at all times.\nLet’s do an example with penguins. Here we will select only species and bill length and then we will filter so that we only have chinstrap penguins.\nRemember that we think of pipe as the phrase ‘and then’\n\nhead(penguins)\n\n# A tibble: 6 × 8\n  species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n1 Adelie  Torgersen           39.1          18.7               181        3750\n2 Adelie  Torgersen           39.5          17.4               186        3800\n3 Adelie  Torgersen           40.3          18                 195        3250\n4 Adelie  Torgersen           NA            NA                  NA          NA\n5 Adelie  Torgersen           36.7          19.3               193        3450\n6 Adelie  Torgersen           39.3          20.6               190        3650\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n#pseudocode / logic: look at dataframe penguins AND THEN (%&gt;%) select() species and bill length AND THEN (%&gt;%) filter by chinstrap\n\npipepen&lt;- penguins %&gt;% #first step of the pipe is to call the orignal dataframe so we can modify it!\n  select(species, bill_length_mm)%&gt;% #selected our columns\n  filter(species == 'Chinstrap') #filtered for chinstrap\n\nhead(pipepen) #it worked! We didn't have to mess with intermediate dataframes and we got exactly what we needed :)\n\n# A tibble: 6 × 2\n  species   bill_length_mm\n  &lt;fct&gt;              &lt;dbl&gt;\n1 Chinstrap           46.5\n2 Chinstrap           50  \n3 Chinstrap           51.3\n4 Chinstrap           45.4\n5 Chinstrap           52.7\n6 Chinstrap           45.2\n\n\nNow we will learn how to use the pipe to do calculations that are more meaningful for us!\n\n\n\n\nThe pipe becomes especially useful when we are interesting in calculating averages. This is something you’ll almost certainly be doing at some point for graphs and statistics! Pipes make this pretty easy.\nWhen thinking about scientific hypotheses and data analysis, we often consider how groups or populations vary (both within the group and between groups). As such, a simple statistical analysis that is common is called analysis of variance (ANOVA). We often also use linear models to assess differences between groups. We will get into statistical theory later, but this does mean that it is often meaningful to graph population and group level means (with error) for the sake of comparison. So let’s learn how to calculate those!\nThere are three steps: 1.) Manipulate the data as needed (correct format, select what you need, filter if necessary, etc)\n2.) Group the data as needed (so R know how to calculate the averages)\n3.) Do your calculatiuons!\nHere’s what that looks like in code form:\nLet’s use mtcars and calculate the mean miles per gallon (mpg) of cars by cylinder.\n\nmpgpercyl&lt;-mtcars%&gt;%\n  group_by(cyl)%&gt;% #group = cylinder \n  summarize(mean=mean(mpg),error=sd(mpg)) # a simple summarize with just mean and standard deviation\n\nhead(mpgpercyl)\n\n# A tibble: 3 × 3\n    cyl  mean error\n  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1     4  26.7  4.51\n2     6  19.7  1.45\n3     8  15.1  2.56\n\n\nNow, maybe we want something more complex. Let’s say we want to look only at 4 cylinder cars that have more than 100 horsepower. Then we want to see the min, max, and mean mpg in addition to some error.\n\nmpgdf&lt;-mtcars%&gt;%\n  filter(cyl=='4' , hp &gt;100) %&gt;% #filters mtcars to only include cars w/ 4 cylinders and hp greater than 100\n  summarize(min = min(mpg), max = max(mpg), mean = mean(mpg), error=sd(mpg))\n\nhead(mpgdf)\n\n   min  max mean    error\n1 21.4 30.4 25.9 6.363961\n\n\nLet’s do one more using penguins. This time, I want to know how bill length various between species, islands, and sex. I also prefer to use standard error of the mean in my error bars over standard deviation. So I want to calculate that in my summarize function.\n\nhead(penguins)\n\n# A tibble: 6 × 8\n  species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n1 Adelie  Torgersen           39.1          18.7               181        3750\n2 Adelie  Torgersen           39.5          17.4               186        3800\n3 Adelie  Torgersen           40.3          18                 195        3250\n4 Adelie  Torgersen           NA            NA                  NA          NA\n5 Adelie  Torgersen           36.7          19.3               193        3450\n6 Adelie  Torgersen           39.3          20.6               190        3650\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\nsumpens&lt;- penguins %&gt;%\n  group_by(species, island, sex) %&gt;%\n  summarize(meanbill=mean(bill_length_mm), sd=sd(bill_length_mm), n=n(), se=sd/sqrt(n))%&gt;%\n  na.omit() #removes rows with NA values (a few rows would otherwise have NA in 'sex' due to sampling error in the field)\n\n`summarise()` has grouped output by 'species', 'island'. You can override using\nthe `.groups` argument.\n\nsumpens\n\n# A tibble: 10 × 7\n# Groups:   species, island [5]\n   species   island    sex    meanbill    sd     n    se\n   &lt;fct&gt;     &lt;fct&gt;     &lt;fct&gt;     &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt;\n 1 Adelie    Biscoe    female     37.4  1.76    22 0.376\n 2 Adelie    Biscoe    male       40.6  2.01    22 0.428\n 3 Adelie    Dream     female     36.9  2.09    27 0.402\n 4 Adelie    Dream     male       40.1  1.75    28 0.330\n 5 Adelie    Torgersen female     37.6  2.21    24 0.451\n 6 Adelie    Torgersen male       40.6  3.03    23 0.631\n 7 Chinstrap Dream     female     46.6  3.11    34 0.533\n 8 Chinstrap Dream     male       51.1  1.56    34 0.268\n 9 Gentoo    Biscoe    female     45.6  2.05    58 0.269\n10 Gentoo    Biscoe    male       49.5  2.72    61 0.348\n\n\nAs you can see, this is complex but with just a few lines we have all of the info we might need to make some pretty cool plots and visually inspect for differences.\nSome notes on the pieces of the summarize function I used up there: meanbill is just a mean() calculation. sd is just a standard deviation calculation- sd(). n=n() calculate the sample size for each group. Standard error cannot be calculated with a built in function in R (without packages that we aren’t using here) so I wrote the formula for it myself. Standard Error = standard deviation / squareroot(sample size) in other words: se=sd/sqrt(n)\nPS: here’s the payoff… we can use the dataframe we just made to build a really nice plot, like the one below. You will be learning ggplot next time! NOTE: this plot is about as complex as we’d ever expect you to get. So don’t worry, we aren’t starting with this kind of plot.\n\n\nWarning: package 'ggsci' was built under R version 4.2.3"
  },
  {
    "objectID": "pipe.html#what-is-a-pipe",
    "href": "pipe.html#what-is-a-pipe",
    "title": "Stringing functions together with the pipe",
    "section": "",
    "text": "The pipe, denoted as ‘|’ in most programming languages but as ‘%&gt;%’ in R, is used to link functions together. This is an oversimplification, but it works for our needs.\nA pipe (%&gt;%) is useful when we want to do a sequence of actions to an original data frame. For example, maybe we want to select() some columns and then filter() the resulting selection before finally calculating an average (or something). We can do all of those steps individually or we can use pipes to do them all at once and create one output.\nWe can think of the pipe as the phrase “and then.” I will show examples in the next section.\nWhen not to use a pipe: 1.) When you want to do manipulate multiple data frames at the same time 2.) When there are meanginful intermediate objects (aka we want an intermediate step to produce a named data frame)"
  },
  {
    "objectID": "pipe.html#how-to-use-the-pipe",
    "href": "pipe.html#how-to-use-the-pipe",
    "title": "Stringing functions together with the pipe",
    "section": "",
    "text": "The pipe is coded as ‘%&gt;%’ and should have a single space on either side of it at all times.\nLet’s do an example with penguins. Here we will select only species and bill length and then we will filter so that we only have chinstrap penguins.\nRemember that we think of pipe as the phrase ‘and then’\n\nhead(penguins)\n\n# A tibble: 6 × 8\n  species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n1 Adelie  Torgersen           39.1          18.7               181        3750\n2 Adelie  Torgersen           39.5          17.4               186        3800\n3 Adelie  Torgersen           40.3          18                 195        3250\n4 Adelie  Torgersen           NA            NA                  NA          NA\n5 Adelie  Torgersen           36.7          19.3               193        3450\n6 Adelie  Torgersen           39.3          20.6               190        3650\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n#pseudocode / logic: look at dataframe penguins AND THEN (%&gt;%) select() species and bill length AND THEN (%&gt;%) filter by chinstrap\n\npipepen&lt;- penguins %&gt;% #first step of the pipe is to call the orignal dataframe so we can modify it!\n  select(species, bill_length_mm)%&gt;% #selected our columns\n  filter(species == 'Chinstrap') #filtered for chinstrap\n\nhead(pipepen) #it worked! We didn't have to mess with intermediate dataframes and we got exactly what we needed :)\n\n# A tibble: 6 × 2\n  species   bill_length_mm\n  &lt;fct&gt;              &lt;dbl&gt;\n1 Chinstrap           46.5\n2 Chinstrap           50  \n3 Chinstrap           51.3\n4 Chinstrap           45.4\n5 Chinstrap           52.7\n6 Chinstrap           45.2\n\n\nNow we will learn how to use the pipe to do calculations that are more meaningful for us!"
  },
  {
    "objectID": "pipe.html#grouping-and-summarize-average-error-calculations",
    "href": "pipe.html#grouping-and-summarize-average-error-calculations",
    "title": "Stringing functions together with the pipe",
    "section": "",
    "text": "The pipe becomes especially useful when we are interesting in calculating averages. This is something you’ll almost certainly be doing at some point for graphs and statistics! Pipes make this pretty easy.\nWhen thinking about scientific hypotheses and data analysis, we often consider how groups or populations vary (both within the group and between groups). As such, a simple statistical analysis that is common is called analysis of variance (ANOVA). We often also use linear models to assess differences between groups. We will get into statistical theory later, but this does mean that it is often meaningful to graph population and group level means (with error) for the sake of comparison. So let’s learn how to calculate those!\nThere are three steps: 1.) Manipulate the data as needed (correct format, select what you need, filter if necessary, etc)\n2.) Group the data as needed (so R know how to calculate the averages)\n3.) Do your calculatiuons!\nHere’s what that looks like in code form:\nLet’s use mtcars and calculate the mean miles per gallon (mpg) of cars by cylinder.\n\nmpgpercyl&lt;-mtcars%&gt;%\n  group_by(cyl)%&gt;% #group = cylinder \n  summarize(mean=mean(mpg),error=sd(mpg)) # a simple summarize with just mean and standard deviation\n\nhead(mpgpercyl)\n\n# A tibble: 3 × 3\n    cyl  mean error\n  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1     4  26.7  4.51\n2     6  19.7  1.45\n3     8  15.1  2.56\n\n\nNow, maybe we want something more complex. Let’s say we want to look only at 4 cylinder cars that have more than 100 horsepower. Then we want to see the min, max, and mean mpg in addition to some error.\n\nmpgdf&lt;-mtcars%&gt;%\n  filter(cyl=='4' , hp &gt;100) %&gt;% #filters mtcars to only include cars w/ 4 cylinders and hp greater than 100\n  summarize(min = min(mpg), max = max(mpg), mean = mean(mpg), error=sd(mpg))\n\nhead(mpgdf)\n\n   min  max mean    error\n1 21.4 30.4 25.9 6.363961\n\n\nLet’s do one more using penguins. This time, I want to know how bill length various between species, islands, and sex. I also prefer to use standard error of the mean in my error bars over standard deviation. So I want to calculate that in my summarize function.\n\nhead(penguins)\n\n# A tibble: 6 × 8\n  species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n1 Adelie  Torgersen           39.1          18.7               181        3750\n2 Adelie  Torgersen           39.5          17.4               186        3800\n3 Adelie  Torgersen           40.3          18                 195        3250\n4 Adelie  Torgersen           NA            NA                  NA          NA\n5 Adelie  Torgersen           36.7          19.3               193        3450\n6 Adelie  Torgersen           39.3          20.6               190        3650\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\nsumpens&lt;- penguins %&gt;%\n  group_by(species, island, sex) %&gt;%\n  summarize(meanbill=mean(bill_length_mm), sd=sd(bill_length_mm), n=n(), se=sd/sqrt(n))%&gt;%\n  na.omit() #removes rows with NA values (a few rows would otherwise have NA in 'sex' due to sampling error in the field)\n\n`summarise()` has grouped output by 'species', 'island'. You can override using\nthe `.groups` argument.\n\nsumpens\n\n# A tibble: 10 × 7\n# Groups:   species, island [5]\n   species   island    sex    meanbill    sd     n    se\n   &lt;fct&gt;     &lt;fct&gt;     &lt;fct&gt;     &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt;\n 1 Adelie    Biscoe    female     37.4  1.76    22 0.376\n 2 Adelie    Biscoe    male       40.6  2.01    22 0.428\n 3 Adelie    Dream     female     36.9  2.09    27 0.402\n 4 Adelie    Dream     male       40.1  1.75    28 0.330\n 5 Adelie    Torgersen female     37.6  2.21    24 0.451\n 6 Adelie    Torgersen male       40.6  3.03    23 0.631\n 7 Chinstrap Dream     female     46.6  3.11    34 0.533\n 8 Chinstrap Dream     male       51.1  1.56    34 0.268\n 9 Gentoo    Biscoe    female     45.6  2.05    58 0.269\n10 Gentoo    Biscoe    male       49.5  2.72    61 0.348\n\n\nAs you can see, this is complex but with just a few lines we have all of the info we might need to make some pretty cool plots and visually inspect for differences.\nSome notes on the pieces of the summarize function I used up there: meanbill is just a mean() calculation. sd is just a standard deviation calculation- sd(). n=n() calculate the sample size for each group. Standard error cannot be calculated with a built in function in R (without packages that we aren’t using here) so I wrote the formula for it myself. Standard Error = standard deviation / squareroot(sample size) in other words: se=sd/sqrt(n)\nPS: here’s the payoff… we can use the dataframe we just made to build a really nice plot, like the one below. You will be learning ggplot next time! NOTE: this plot is about as complex as we’d ever expect you to get. So don’t worry, we aren’t starting with this kind of plot.\n\n\nWarning: package 'ggsci' was built under R version 4.2.3"
  },
  {
    "objectID": "groupsmeans.html",
    "href": "groupsmeans.html",
    "title": "Summarizing Data",
    "section": "",
    "text": "The pipe becomes especially useful when we are interesting in calculating averages. This is something you’ll almost certainly be doing at some point for graphs and statistics! Pipes make this pretty easy.\nWhen thinking about scientific hypotheses and data analysis, we often consider how groups or populations vary (both within the group and between groups). As such, a simple statistical analysis that is common is called analysis of variance (ANOVA). We often also use linear models to assess differences between groups. We will get into statistical theory later, but this does mean that it is often meaningful to graph population and group level means (with error) for the sake of comparison. So let’s learn how to calculate those!\nThere are three steps: 1.) Manipulate the data as needed (correct format, select what you need, filter if necessary, etc)\n2.) Group the data as needed (so R know how to calculate the averages)\n3.) Do your calculatiuons!\nHere’s what that looks like in code form:\nLet’s use mtcars and calculate the mean miles per gallon (mpg) of cars by cylinder.\nDon’t forget to load packages!\n\nlibrary(tidyverse)\nlibrary(palmerpenguins)\n\n\n# A quick reminder that that %&gt;% and |&gt; syntax are equivalent and interchangable \n\nmpgpercyl&lt;-mtcars%&gt;%\n  group_by(cyl)%&gt;% #group = cylinder \n  summarize(mean=mean(mpg),error=sd(mpg)) # a simple summarize with just mean and standard deviation\n\nhead(mpgpercyl)\n\n# A tibble: 3 × 3\n    cyl  mean error\n  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1     4  26.7  4.51\n2     6  19.7  1.45\n3     8  15.1  2.56\n\n\nNow, maybe we want something more complex. Let’s say we want to look only at 4 cylinder cars that have more than 100 horsepower. Then we want to see the min, max, and mean mpg in addition to some error.\n\nmpgdf&lt;-mtcars%&gt;%\n  filter(cyl=='4' , hp &gt;100) %&gt;% #filters mtcars to only include cars w/ 4 cylinders and hp greater than 100\n  summarize(min = min(mpg), max = max(mpg), mean = mean(mpg), error=sd(mpg))\n\nhead(mpgdf)\n\n   min  max mean    error\n1 21.4 30.4 25.9 6.363961\n\n\nLet’s do one more using penguins. This time, I want to know how bill length various between species, islands, and sex. I also prefer to use standard error of the mean in my error bars over standard deviation. So I want to calculate that in my summarize function.\n\nhead(penguins)\n\n# A tibble: 6 × 8\n  species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n1 Adelie  Torgersen           39.1          18.7               181        3750\n2 Adelie  Torgersen           39.5          17.4               186        3800\n3 Adelie  Torgersen           40.3          18                 195        3250\n4 Adelie  Torgersen           NA            NA                  NA          NA\n5 Adelie  Torgersen           36.7          19.3               193        3450\n6 Adelie  Torgersen           39.3          20.6               190        3650\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\nsumpens&lt;- penguins %&gt;%\n  group_by(species, island, sex) %&gt;%\n  drop_na(sex) %&gt;% #removes rows with NA values (a few rows would otherwise have NA in 'sex' due to sampling error in the field)\n  summarize(meanbill=mean(bill_length_mm), sd=sd(bill_length_mm), n=n(), se=sd/sqrt(n))\n\n`summarise()` has grouped output by 'species', 'island'. You can override using\nthe `.groups` argument.\n\nsumpens\n\n# A tibble: 10 × 7\n# Groups:   species, island [5]\n   species   island    sex    meanbill    sd     n    se\n   &lt;fct&gt;     &lt;fct&gt;     &lt;fct&gt;     &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt;\n 1 Adelie    Biscoe    female     37.4  1.76    22 0.376\n 2 Adelie    Biscoe    male       40.6  2.01    22 0.428\n 3 Adelie    Dream     female     36.9  2.09    27 0.402\n 4 Adelie    Dream     male       40.1  1.75    28 0.330\n 5 Adelie    Torgersen female     37.6  2.21    24 0.451\n 6 Adelie    Torgersen male       40.6  3.03    23 0.631\n 7 Chinstrap Dream     female     46.6  3.11    34 0.533\n 8 Chinstrap Dream     male       51.1  1.56    34 0.268\n 9 Gentoo    Biscoe    female     45.6  2.05    58 0.269\n10 Gentoo    Biscoe    male       49.5  2.72    61 0.348\n\n\nAs you can see, this is complex but with just a few lines we have all of the info we might need to make some pretty cool plots and visually inspect for differences.\nSome notes on the pieces of the summarize function I used up there: meanbill is just a mean() calculation. sd is just a standard deviation calculation- sd(). n=n() calculate the sample size for each group. Standard error cannot be calculated with a built in function in R (without packages that we aren’t using here) so I wrote the formula for it myself. Standard Error = standard deviation / squareroot(sample size) in other words: se=sd/sqrt(n)\nPS: here’s the payoff… we can use the dataframe we just made to build a really nice plot, like the one below. You will be learning ggplot next time! NOTE: this plot is about as complex as we’d ever expect you to get. So don’t worry, we aren’t starting with this kind of plot."
  },
  {
    "objectID": "groupsmeans.html#grouping-and-summarize-average-error-calculations",
    "href": "groupsmeans.html#grouping-and-summarize-average-error-calculations",
    "title": "Summarizing Data",
    "section": "",
    "text": "The pipe becomes especially useful when we are interesting in calculating averages. This is something you’ll almost certainly be doing at some point for graphs and statistics! Pipes make this pretty easy.\nWhen thinking about scientific hypotheses and data analysis, we often consider how groups or populations vary (both within the group and between groups). As such, a simple statistical analysis that is common is called analysis of variance (ANOVA). We often also use linear models to assess differences between groups. We will get into statistical theory later, but this does mean that it is often meaningful to graph population and group level means (with error) for the sake of comparison. So let’s learn how to calculate those!\nThere are three steps: 1.) Manipulate the data as needed (correct format, select what you need, filter if necessary, etc)\n2.) Group the data as needed (so R know how to calculate the averages)\n3.) Do your calculatiuons!\nHere’s what that looks like in code form:\nLet’s use mtcars and calculate the mean miles per gallon (mpg) of cars by cylinder.\nDon’t forget to load packages!\n\nlibrary(tidyverse)\nlibrary(palmerpenguins)\n\n\n# A quick reminder that that %&gt;% and |&gt; syntax are equivalent and interchangable \n\nmpgpercyl&lt;-mtcars%&gt;%\n  group_by(cyl)%&gt;% #group = cylinder \n  summarize(mean=mean(mpg),error=sd(mpg)) # a simple summarize with just mean and standard deviation\n\nhead(mpgpercyl)\n\n# A tibble: 3 × 3\n    cyl  mean error\n  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1     4  26.7  4.51\n2     6  19.7  1.45\n3     8  15.1  2.56\n\n\nNow, maybe we want something more complex. Let’s say we want to look only at 4 cylinder cars that have more than 100 horsepower. Then we want to see the min, max, and mean mpg in addition to some error.\n\nmpgdf&lt;-mtcars%&gt;%\n  filter(cyl=='4' , hp &gt;100) %&gt;% #filters mtcars to only include cars w/ 4 cylinders and hp greater than 100\n  summarize(min = min(mpg), max = max(mpg), mean = mean(mpg), error=sd(mpg))\n\nhead(mpgdf)\n\n   min  max mean    error\n1 21.4 30.4 25.9 6.363961\n\n\nLet’s do one more using penguins. This time, I want to know how bill length various between species, islands, and sex. I also prefer to use standard error of the mean in my error bars over standard deviation. So I want to calculate that in my summarize function.\n\nhead(penguins)\n\n# A tibble: 6 × 8\n  species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n1 Adelie  Torgersen           39.1          18.7               181        3750\n2 Adelie  Torgersen           39.5          17.4               186        3800\n3 Adelie  Torgersen           40.3          18                 195        3250\n4 Adelie  Torgersen           NA            NA                  NA          NA\n5 Adelie  Torgersen           36.7          19.3               193        3450\n6 Adelie  Torgersen           39.3          20.6               190        3650\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\nsumpens&lt;- penguins %&gt;%\n  group_by(species, island, sex) %&gt;%\n  drop_na(sex) %&gt;% #removes rows with NA values (a few rows would otherwise have NA in 'sex' due to sampling error in the field)\n  summarize(meanbill=mean(bill_length_mm), sd=sd(bill_length_mm), n=n(), se=sd/sqrt(n))\n\n`summarise()` has grouped output by 'species', 'island'. You can override using\nthe `.groups` argument.\n\nsumpens\n\n# A tibble: 10 × 7\n# Groups:   species, island [5]\n   species   island    sex    meanbill    sd     n    se\n   &lt;fct&gt;     &lt;fct&gt;     &lt;fct&gt;     &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt;\n 1 Adelie    Biscoe    female     37.4  1.76    22 0.376\n 2 Adelie    Biscoe    male       40.6  2.01    22 0.428\n 3 Adelie    Dream     female     36.9  2.09    27 0.402\n 4 Adelie    Dream     male       40.1  1.75    28 0.330\n 5 Adelie    Torgersen female     37.6  2.21    24 0.451\n 6 Adelie    Torgersen male       40.6  3.03    23 0.631\n 7 Chinstrap Dream     female     46.6  3.11    34 0.533\n 8 Chinstrap Dream     male       51.1  1.56    34 0.268\n 9 Gentoo    Biscoe    female     45.6  2.05    58 0.269\n10 Gentoo    Biscoe    male       49.5  2.72    61 0.348\n\n\nAs you can see, this is complex but with just a few lines we have all of the info we might need to make some pretty cool plots and visually inspect for differences.\nSome notes on the pieces of the summarize function I used up there: meanbill is just a mean() calculation. sd is just a standard deviation calculation- sd(). n=n() calculate the sample size for each group. Standard error cannot be calculated with a built in function in R (without packages that we aren’t using here) so I wrote the formula for it myself. Standard Error = standard deviation / squareroot(sample size) in other words: se=sd/sqrt(n)\nPS: here’s the payoff… we can use the dataframe we just made to build a really nice plot, like the one below. You will be learning ggplot next time! NOTE: this plot is about as complex as we’d ever expect you to get. So don’t worry, we aren’t starting with this kind of plot."
  },
  {
    "objectID": "datetime.html",
    "href": "datetime.html",
    "title": "Date and Time",
    "section": "",
    "text": "Date and time are often important variables in scientific data analysis. We are often interested in change over time and we also often do time series sampling. Learning how to manage dates and times in R is essential! Luckily, there is a user friendly and tidyverse friendly package that can help us with dates, times, and datetimes. That package is called ‘lubridate’ and we will learn all about it below.\nFirst, we need to load packages\n\nlibrary(tidyverse)\nlibrary(lubridate)"
  },
  {
    "objectID": "datetime.html#read-in-some-data-to-practice-with",
    "href": "datetime.html#read-in-some-data-to-practice-with",
    "title": "Date and Time",
    "section": "Read in some data to practice with",
    "text": "Read in some data to practice with\n\ndat&lt;-read.csv('https://raw.githubusercontent.com/jbaumann3/Intro-to-R-for-Ecology/main/final_bucket_mesocosm_apex_data.csv')\nhead(dat) #take a look at the data to see how it is formatted\n\n  X                date probe_name probe_type value\n1 1 07/01/2021 00:00:00      B2_T2       Temp 18.10\n2 2 07/01/2021 00:00:00     B2_pH2         pH  4.53\n3 3 07/01/2021 00:00:00     B1_pH2         pH  8.12\n4 4 07/01/2021 00:00:00      B1_T2       Temp 17.70\n5 5 07/01/2021 00:00:00      B1_T1       Temp 17.70\n6 6 07/01/2021 00:00:00     B1_pH1         pH  8.12\n\nstr(dat) #what are the attributes of each column (NOTE the attirbutes of the date column -- it is a factor and we want it to be a date/time0)\n\n'data.frame':   47200 obs. of  5 variables:\n $ X         : int  1 2 3 4 5 6 7 8 9 10 ...\n $ date      : chr  \"07/01/2021 00:00:00\" \"07/01/2021 00:00:00\" \"07/01/2021 00:00:00\" \"07/01/2021 00:00:00\" ...\n $ probe_name: chr  \"B2_T2\" \"B2_pH2\" \"B1_pH2\" \"B1_T2\" ...\n $ probe_type: chr  \"Temp\" \"pH\" \"pH\" \"Temp\" ...\n $ value     : num  18.1 4.53 8.12 17.7 17.7 8.12 19.7 7.99 18.1 4.53 ..."
  },
  {
    "objectID": "datetime.html#change-date-column-factor-to-datetime-format",
    "href": "datetime.html#change-date-column-factor-to-datetime-format",
    "title": "Date and Time",
    "section": "Change date column (factor) to date/time format",
    "text": "Change date column (factor) to date/time format\nTo do this we just need to recognize the order of or date/time. For example, we might have year, month, day, hours, minutes OR day, month, year, hours, minutes in order from left to right.\nIn this case we have: 07/01/2021 00:00:00 or month/day/year hours:minutes:seconds. We care about the order of these. So to simply, we have mdy_hms Lubridate has functions for all combinations of these formats. So, mdy_hms() is one. You may also have ymd_hm() or any other combo. You just enter your date info followed by an underscore and then your time info. Here’s how you apply this!\n\nstr(dat)\n\n'data.frame':   47200 obs. of  5 variables:\n $ X         : int  1 2 3 4 5 6 7 8 9 10 ...\n $ date      : chr  \"07/01/2021 00:00:00\" \"07/01/2021 00:00:00\" \"07/01/2021 00:00:00\" \"07/01/2021 00:00:00\" ...\n $ probe_name: chr  \"B2_T2\" \"B2_pH2\" \"B1_pH2\" \"B1_T2\" ...\n $ probe_type: chr  \"Temp\" \"pH\" \"pH\" \"Temp\" ...\n $ value     : num  18.1 4.53 8.12 17.7 17.7 8.12 19.7 7.99 18.1 4.53 ...\n\ndat$date&lt;-mdy_hms(dat$date) #converts our date column into a date/time object based on the format (order) of our date and time \n\nstr(dat)# date is no longer a factor but is now a POSIXct object, which means it is in date/time format and can be used for plots and time series!\n\n'data.frame':   47200 obs. of  5 variables:\n $ X         : int  1 2 3 4 5 6 7 8 9 10 ...\n $ date      : POSIXct, format: \"2021-07-01 00:00:00\" \"2021-07-01 00:00:00\" ...\n $ probe_name: chr  \"B2_T2\" \"B2_pH2\" \"B1_pH2\" \"B1_T2\" ...\n $ probe_type: chr  \"Temp\" \"pH\" \"pH\" \"Temp\" ...\n $ value     : num  18.1 4.53 8.12 17.7 17.7 8.12 19.7 7.99 18.1 4.53 ..."
  },
  {
    "objectID": "datetime.html#why-this-matters",
    "href": "datetime.html#why-this-matters",
    "title": "Date and Time",
    "section": "Why this matters",
    "text": "Why this matters\nHere we have two example graphs that show why dates are annoying and how using lubridate helps us!\nA graph using the raw data alone (not changing date to a date/time object)\n\n\n\n\n\nsame graph after making date into a date/time object"
  },
  {
    "objectID": "index.html#who-this-page-is-for",
    "href": "index.html#who-this-page-is-for",
    "title": "Introduction to R for Biology & Ecology",
    "section": "",
    "text": "The materials on this website have been designed for use in teaching R to undergraduate students who range in experience from never using R (or any programming language before) to beginner and intermediate R users. I have designed these resources for use in my 200 level Biostatistics course, 300 level Biology electives, and to teach my research students how to use R. That said, anyone who is trying to learn R (or learning how to teach R) may find these tutorials and exercises useful."
  },
  {
    "objectID": "index.html#how-to-use-this-page",
    "href": "index.html#how-to-use-this-page",
    "title": "Introduction to R for Biology & Ecology",
    "section": "",
    "text": "Navigate using the navbar at the top of the page. You can find specific tutorials using the drop down menus. Tutorial content is organized by section. If you are looking for exercises to do yourself (assignments, challenges, etc), you can find those in the “exercises” drop down menu in the navbar. These are downloadable .qmd files that you can open in your own instance of R and modify!"
  },
  {
    "objectID": "index.html#for-more-about-me",
    "href": "index.html#for-more-about-me",
    "title": "Introduction to R for Biology & Ecology",
    "section": "",
    "text": "You can visit my professional website, github, and twitter pages. You can also email me with questions, comments, and suggestions.\n…"
  },
  {
    "objectID": "cor_reg_chi.html",
    "href": "cor_reg_chi.html",
    "title": "Lab_5_correlation_regression_t_chi",
    "section": "",
    "text": "1.) Explore correlations between numerical variables (two variables and many)\n2.) Practice running and interpreting linear regressions\n3.) Calculate and interpret R^2 values\n4.) Test assumptions of linear regression\n5.) practice running and interpreting t-tests\n6.) test assumptions of t-tests\n7.) Practice chi-square tests and understand their application"
  },
  {
    "objectID": "cor_reg_chi.html#t-test",
    "href": "cor_reg_chi.html#t-test",
    "title": "Lab_5_correlation_regression_t_chi",
    "section": "4. t-test",
    "text": "4. t-test"
  },
  {
    "objectID": "cor_reg.html",
    "href": "cor_reg.html",
    "title": "Correlation and Chi Square",
    "section": "",
    "text": "library(tidyverse)\nlibrary(see)\nlibrary(car)\nlibrary(patchwork)\nlibrary(ggsci)\nlibrary(ggridges)\nlibrary(performance)\nlibrary(Hmisc) #for correlation matrix\nlibrary(corrplot)#to visualize correlation matrices\nlibrary(car) #contains some statistical tests we need to assess assumptions"
  },
  {
    "objectID": "cor_reg.html#correlation-coefficients",
    "href": "cor_reg.html#correlation-coefficients",
    "title": "Correlation and Chi Square",
    "section": "Correlation Coefficients",
    "text": "Correlation Coefficients\nA correlation coefficient (r) tells us the relationship (strength and direction) between two variables. These coefficients can be positive or negative and will range from 0 to 1 (or negative 1). Values nearer to 1 (or negative 1) indicate stronger correlations and values closer to 0 indicate weaker correlations\nLet’s try out some correlations using the iris data.\nIs there a correlation between sepal length and sepal width? Let’s test each species separately for now.\nStep 1: make a scatterplot\n\n#filter down to a single species\nvirg&lt;-iris %&gt;%\n  filter(Species=='virginica')\n\n#make a plot\nggplot(virg, aes(x=Sepal.Length, y=Sepal.Width))+\n  geom_point()+\n  theme_classic()\n\n\n\n\n\nStep 2: Calculate a correlation coeficient (r)\n\ncor(virg$Sepal.Length, virg$Sepal.Width)\n\n[1] 0.4572278\n\n\nThis value (r=0.45) positive and middle of the road/strong. This tells us that some correlation likely exists.\nStep 3: Do a hypothesis test on the correlation Spearman’s Test\nH0: The correlation between these two variables is 0\nHa: The correlation != 0\n\n\ncor.test(virg$Sepal.Length, virg$Sepal.Width, method=\"spearman\")\n\nWarning in cor.test.default(virg$Sepal.Length, virg$Sepal.Width, method =\n\"spearman\"): Cannot compute exact p-value with ties\n\n\n\n    Spearman's rank correlation rho\n\ndata:  virg$Sepal.Length and virg$Sepal.Width\nS = 11943, p-value = 0.002011\nalternative hypothesis: true rho is not equal to 0\nsample estimates:\n      rho \n0.4265165 \n\n\nThe above output gives us the r value (cor=0.457) AND a p-value for a hypothesis test that the two correlations do not differ. If p&lt;0.05 we can reject our H0 and say that the correlation differs from 0. Here, p=0.0008 so we can reject H0 and suggest that we have a significant positive correlation! Rho is similar to r and is this case our correlation coefficient (0.42). It is slightly lower than the r we calculated above."
  },
  {
    "objectID": "cor_reg.html#multiple-correlations",
    "href": "cor_reg.html#multiple-correlations",
    "title": "Correlation and Chi Square",
    "section": "Multiple Correlations",
    "text": "Multiple Correlations\n\niris2&lt;-iris[,c(1:4)] #filter iris so we only have the numerical columns!\n\niris_cor&lt;-cor(iris2, method=\"spearman\")\n\niris_cor\n\n             Sepal.Length Sepal.Width Petal.Length Petal.Width\nSepal.Length    1.0000000  -0.1667777    0.8818981   0.8342888\nSepal.Width    -0.1667777   1.0000000   -0.3096351  -0.2890317\nPetal.Length    0.8818981  -0.3096351    1.0000000   0.9376668\nPetal.Width     0.8342888  -0.2890317    0.9376668   1.0000000\n\n\nThe above correlation matrix shows r (correlation coefficient) not p values!\nGetting r and p values\n\nmydata.rcorr = rcorr(as.matrix(iris2))\nmydata.rcorr #top matrix = r, bottom matrix = p\n\n             Sepal.Length Sepal.Width Petal.Length Petal.Width\nSepal.Length         1.00       -0.12         0.87        0.82\nSepal.Width         -0.12        1.00        -0.43       -0.37\nPetal.Length         0.87       -0.43         1.00        0.96\nPetal.Width          0.82       -0.37         0.96        1.00\n\nn= 150 \n\n\nP\n             Sepal.Length Sepal.Width Petal.Length Petal.Width\nSepal.Length              0.1519      0.0000       0.0000     \nSepal.Width  0.1519                   0.0000       0.0000     \nPetal.Length 0.0000       0.0000                   0.0000     \nPetal.Width  0.0000       0.0000      0.0000                  \n\n\nPlotting our correlations\n\ncorrplot(iris_cor)"
  },
  {
    "objectID": "cor_reg.html#categorical-correlations-chi-square",
    "href": "cor_reg.html#categorical-correlations-chi-square",
    "title": "Correlation and Chi Square",
    "section": "Categorical correlations (Chi-Square)",
    "text": "Categorical correlations (Chi-Square)\nA Chi-square test is a statistical test used to determine if two categorical variables have a significant correlation between them. These two variables should be selected from the same population. An example - Is the color of a thing red or green? Is the answer to a simple question yes or no?\n\nData format Technically, a chi-square test is done on data that are in a contingency table (contains columns (variables) in which numbers represent counts. For example, here is a contingency table of household chore data (exciting)\n\nchore &lt;- read.delim(\"http://www.sthda.com/sthda/RDoc/data/housetasks.txt\", row.names=1)\nchore\n\n           Wife Alternating Husband Jointly\nLaundry     156          14       2       4\nMain_meal   124          20       5       4\nDinner       77          11       7      13\nBreakfeast   82          36      15       7\nTidying      53          11       1      57\nDishes       32          24       4      53\nShopping     33          23       9      55\nOfficial     12          46      23      15\nDriving      10          51      75       3\nFinances     13          13      21      66\nInsurance     8           1      53      77\nRepairs       0           3     160       2\nHolidays      0           1       6     153\n\n\nH0 = The row and column data of the contingency table are independent (no relationship) Ha= Row and column variables are dependent (there is a relationship between them)\nThe test\n\nchorechi&lt;-chisq.test(chore)\nchorechi\n\n\n    Pearson's Chi-squared test\n\ndata:  chore\nX-squared = 1944.5, df = 36, p-value &lt; 2.2e-16\n\n\nThis result demonstrates that there is a significant association between the columns and rows in the data (they are dependent).\n\nA second example\nLet’s try to assess correlation between two categorical variables in a dataframe we know! We will use mtcars\n\nhead(mtcars)\n\n                   mpg cyl disp  hp drat    wt  qsec vs am gear carb\nMazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\nValiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1\n\n#make a contingency table\ncartab&lt;-table(mtcars$carb, mtcars$cyl)\n\nchisq.test(cartab)\n\nWarning in chisq.test(cartab): Chi-squared approximation may be incorrect\n\n\n\n    Pearson's Chi-squared test\n\ndata:  cartab\nX-squared = 24.389, df = 10, p-value = 0.006632\n\n#note that we don't NEED to make the table. We can just do this\nchisq.test(mtcars$carb, mtcars$cyl)\n\nWarning in chisq.test(mtcars$carb, mtcars$cyl): Chi-squared approximation may\nbe incorrect\n\n\n\n    Pearson's Chi-squared test\n\ndata:  mtcars$carb and mtcars$cyl\nX-squared = 24.389, df = 10, p-value = 0.006632\n\n\nBoth tests above are the same (just two options for you). We see that p&lt;0.05, thus we have evidence to reject H0 and suggest that carb and cyl are dependent / correlated."
  },
  {
    "objectID": "cor_chi.html",
    "href": "cor_chi.html",
    "title": "Correlation and Chi Square",
    "section": "",
    "text": "library(tidyverse)\nlibrary(see)\nlibrary(car)\nlibrary(patchwork)\nlibrary(ggsci)\nlibrary(ggridges)\nlibrary(performance)\nlibrary(Hmisc) #for correlation matrix\nlibrary(corrplot)#to visualize correlation matrices\nlibrary(car) #contains some statistical tests we need to assess assumptions"
  },
  {
    "objectID": "cor_chi.html#correlation-coefficients",
    "href": "cor_chi.html#correlation-coefficients",
    "title": "Correlation and Chi Square",
    "section": "Correlation Coefficients",
    "text": "Correlation Coefficients\nA correlation coefficient (r) tells us the relationship (strength and direction) between two variables. These coefficients can be positive or negative and will range from 0 to 1 (or negative 1). Values nearer to 1 (or negative 1) indicate stronger correlations and values closer to 0 indicate weaker correlations\nLet’s try out some correlations using the iris data.\nIs there a correlation between sepal length and sepal width? Let’s test each species separately for now.\nStep 1: make a scatterplot\n\n#filter down to a single species\nvirg&lt;-iris %&gt;%\n  filter(Species=='virginica')\n\n#make a plot\nggplot(virg, aes(x=Sepal.Length, y=Sepal.Width))+\n  geom_point()+\n  theme_classic()\n\n\n\n\n\nStep 2: Calculate a correlation coeficient (r)\n\ncor(virg$Sepal.Length, virg$Sepal.Width)\n\n[1] 0.4572278\n\n\nThis value (r=0.45) positive and middle of the road/strong. This tells us that some correlation likely exists.\nStep 3: Do a hypothesis test on the correlation Spearman’s Test\nH0: The correlation between these two variables is 0\nHa: The correlation != 0\n\n\ncor.test(virg$Sepal.Length, virg$Sepal.Width, method=\"spearman\")\n\nWarning in cor.test.default(virg$Sepal.Length, virg$Sepal.Width, method =\n\"spearman\"): Cannot compute exact p-value with ties\n\n\n\n    Spearman's rank correlation rho\n\ndata:  virg$Sepal.Length and virg$Sepal.Width\nS = 11943, p-value = 0.002011\nalternative hypothesis: true rho is not equal to 0\nsample estimates:\n      rho \n0.4265165 \n\n\nThe above output gives us the r value (cor=0.457) AND a p-value for a hypothesis test that the two correlations do not differ. If p&lt;0.05 we can reject our H0 and say that the correlation differs from 0. Here, p=0.0008 so we can reject H0 and suggest that we have a significant positive correlation! Rho is similar to r and is this case our correlation coefficient (0.42). It is slightly lower than the r we calculated above."
  },
  {
    "objectID": "cor_chi.html#multiple-correlations",
    "href": "cor_chi.html#multiple-correlations",
    "title": "Correlation and Chi Square",
    "section": "Multiple Correlations",
    "text": "Multiple Correlations\n\niris2&lt;-iris[,c(1:4)] #filter iris so we only have the numerical columns!\n\niris_cor&lt;-cor(iris2, method=\"spearman\")\n\niris_cor\n\n             Sepal.Length Sepal.Width Petal.Length Petal.Width\nSepal.Length    1.0000000  -0.1667777    0.8818981   0.8342888\nSepal.Width    -0.1667777   1.0000000   -0.3096351  -0.2890317\nPetal.Length    0.8818981  -0.3096351    1.0000000   0.9376668\nPetal.Width     0.8342888  -0.2890317    0.9376668   1.0000000\n\n\nThe above correlation matrix shows r (correlation coefficient) not p values!\nGetting r and p values\n\nmydata.rcorr = rcorr(as.matrix(iris2))\nmydata.rcorr #top matrix = r, bottom matrix = p\n\n             Sepal.Length Sepal.Width Petal.Length Petal.Width\nSepal.Length         1.00       -0.12         0.87        0.82\nSepal.Width         -0.12        1.00        -0.43       -0.37\nPetal.Length         0.87       -0.43         1.00        0.96\nPetal.Width          0.82       -0.37         0.96        1.00\n\nn= 150 \n\n\nP\n             Sepal.Length Sepal.Width Petal.Length Petal.Width\nSepal.Length              0.1519      0.0000       0.0000     \nSepal.Width  0.1519                   0.0000       0.0000     \nPetal.Length 0.0000       0.0000                   0.0000     \nPetal.Width  0.0000       0.0000      0.0000                  \n\n\nPlotting our correlations\n\ncorrplot(iris_cor)"
  },
  {
    "objectID": "cor_chi.html#categorical-correlations-chi-square",
    "href": "cor_chi.html#categorical-correlations-chi-square",
    "title": "Correlation and Chi Square",
    "section": "Categorical correlations (Chi-Square)",
    "text": "Categorical correlations (Chi-Square)\nA Chi-square test is a statistical test used to determine if two categorical variables have a significant correlation between them. These two variables should be selected from the same population. An example - Is the color of a thing red or green? Is the answer to a simple question yes or no?\n\nData format Technically, a chi-square test is done on data that are in a contingency table (contains columns (variables) in which numbers represent counts. For example, here is a contingency table of household chore data (exciting)\n\nchore &lt;- read.delim(\"http://www.sthda.com/sthda/RDoc/data/housetasks.txt\", row.names=1)\nchore\n\n           Wife Alternating Husband Jointly\nLaundry     156          14       2       4\nMain_meal   124          20       5       4\nDinner       77          11       7      13\nBreakfeast   82          36      15       7\nTidying      53          11       1      57\nDishes       32          24       4      53\nShopping     33          23       9      55\nOfficial     12          46      23      15\nDriving      10          51      75       3\nFinances     13          13      21      66\nInsurance     8           1      53      77\nRepairs       0           3     160       2\nHolidays      0           1       6     153\n\n\nH0 = The row and column data of the contingency table are independent (no relationship) Ha= Row and column variables are dependent (there is a relationship between them)\nThe test\n\nchorechi&lt;-chisq.test(chore)\nchorechi\n\n\n    Pearson's Chi-squared test\n\ndata:  chore\nX-squared = 1944.5, df = 36, p-value &lt; 2.2e-16\n\n\nThis result demonstrates that there is a significant association between the columns and rows in the data (they are dependent).\n\nA second example\nLet’s try to assess correlation between two categorical variables in a dataframe we know! We will use mtcars\n\nhead(mtcars)\n\n                   mpg cyl disp  hp drat    wt  qsec vs am gear carb\nMazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\nValiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1\n\n#make a contingency table\ncartab&lt;-table(mtcars$carb, mtcars$cyl)\n\nchisq.test(cartab)\n\nWarning in chisq.test(cartab): Chi-squared approximation may be incorrect\n\n\n\n    Pearson's Chi-squared test\n\ndata:  cartab\nX-squared = 24.389, df = 10, p-value = 0.006632\n\n#note that we don't NEED to make the table. We can just do this\nchisq.test(mtcars$carb, mtcars$cyl)\n\nWarning in chisq.test(mtcars$carb, mtcars$cyl): Chi-squared approximation may\nbe incorrect\n\n\n\n    Pearson's Chi-squared test\n\ndata:  mtcars$carb and mtcars$cyl\nX-squared = 24.389, df = 10, p-value = 0.006632\n\n\nBoth tests above are the same (just two options for you). We see that p&lt;0.05, thus we have evidence to reject H0 and suggest that carb and cyl are dependent / correlated."
  },
  {
    "objectID": "regression.html",
    "href": "regression.html",
    "title": "linear regression",
    "section": "",
    "text": "library(tidyverse)\nlibrary(see)\nlibrary(car)\nlibrary(patchwork)\nlibrary(ggsci)\nlibrary(ggridges)\nlibrary(performance)\nlibrary(car) #contains some statistical tests we need to assess assumptions"
  },
  {
    "objectID": "regression.html#plotting-a-regression-line",
    "href": "regression.html#plotting-a-regression-line",
    "title": "linear regression",
    "section": "plotting a regression line",
    "text": "plotting a regression line\nIt is very easy to make a regression line in ggplot. We can plot our scatterplot as we normally would and then we add the regression line using the geom_smooth() argument.\n\nggplot(iris, aes(x=Petal.Length, y=Sepal.Length))+\n  geom_point()+\n  geom_smooth(method='lm')+\n  theme_classic()\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\nThe blue line represents our regression line (y~x). The gray around the line is the SE. We can add SE=FALSE to our geom_smooth() to turn that off:\ngeom_smooth(method=‘lm’, SE=FALSE)"
  },
  {
    "objectID": "regression.html#assumptions",
    "href": "regression.html#assumptions",
    "title": "linear regression",
    "section": "Assumptions",
    "text": "Assumptions\nLinear regressions have 4 assumptions:\n1.) Linearity of the data: We assume the relationship between predictor (x) and outcome/dependent variable (y) is approx. linear. At each value of X there is a population of possible Y-values whose mean lies on the regression line.\n\n2.) Normality of residuals: The residual error are assumed to be normally distributed. In other words: at each value of X, the distribution of possible Y values is normal\n\n3.) Homogeneity of residual variance (homoscedasticity): We assume residual variance is approx. constant. In other words: the variance of Y values is the same at all values of X\n4.) Independence of residual error terms: At each value of X, the Y-measurements represent a random sample from the population of possible Y values.\n\nWe can also make a residual plot to check some of our assumptions. Residuals measure the scatter of points above or below the least-squares regression line. When we calculate the residuals for a linear regression and plot them, y=0 is the least squares line. Residuals essentially represent the distance between each point and the linear regression line we see in our regression graph.\n\nresiduals(lm1)\n\n          1           2           3           4           5           6 \n 0.22090540  0.02090540 -0.13820238 -0.31998683  0.12090540  0.39822871 \n          7           8           9          10          11          12 \n-0.27909460  0.08001317 -0.47909460 -0.01998683  0.48001317 -0.16087906 \n         13          14          15          16          17          18 \n-0.07909460 -0.45641792  1.00268985  0.78001317  0.56179762  0.22090540 \n         19          20          21          22          23          24 \n 0.69822871  0.18001317  0.39822871  0.18001317 -0.11552569  0.09822871 \n         25          26          27          28          29          30 \n-0.28355574  0.03912094  0.03912094  0.28001317  0.32090540 -0.26087906 \n         31          32          33          34          35          36 \n-0.16087906  0.48001317  0.28001317  0.62090540 -0.01998683  0.20268985 \n         37          38          39          40          41          42 \n 0.66179762  0.02090540 -0.43820238  0.18001317  0.16179762 -0.33820238 \n         43          44          45          46          47          48 \n-0.43820238  0.03912094  0.01644426 -0.07909460  0.13912094 -0.27909460 \n         49          50          51          52          53          54 \n 0.38001317  0.12090540  0.77146188  0.25324634  0.58967743 -0.44229252 \n         55          56          57          58          59          60 \n 0.31235411 -0.44675366  0.07146188 -0.75604693  0.41235411 -0.70140030 \n         61          62          63          64          65          66 \n-0.73783139 -0.12407698  0.05770748 -0.12853812 -0.17872361  0.59413856 \n         67          68          69          70          71          72 \n-0.54675366 -0.18318475  0.05324634 -0.30140030 -0.36943035  0.15770748 \n         73          74          75          76          77          78 \n-0.01032257 -0.12853812  0.33503079  0.49413856  0.53056965  0.34878520 \n         79          80          81          82          83          84 \n-0.14675366 -0.03783139 -0.36050807 -0.31961584 -0.10140030 -0.39210703 \n         85          86          87          88          89          90 \n-0.74675366 -0.14675366  0.47146188  0.19413856 -0.38318475 -0.44229252 \n         91          92          93          94          95          96 \n-0.60586144 -0.08764589 -0.14229252 -0.65604693 -0.42407698 -0.32407698 \n         97          98          99         100         101         102 \n-0.32407698  0.13503079 -0.43337025 -0.28318475 -0.46013708 -0.59210703 \n        103         104         105         106         107         108 \n 0.38075515 -0.29656817 -0.17835262  0.59450955 -1.24675366  0.41718624 \n        109         110         111         112         113         114 \n 0.02164738  0.39897069  0.10789297 -0.07389149  0.24432406 -0.65121480 \n        115         116         117         118         119         120 \n-0.59210703 -0.07389149 -0.05567594  0.65361733  0.57183287 -0.35121480 \n        121         122         123         124         125         126 \n 0.26253960 -0.71032257  0.65361733 -0.01032257  0.06253960  0.43986292 \n        127         128         129         130         131         132 \n-0.06943035 -0.21032257 -0.19656817  0.52164738  0.59897069  0.97629401 \n        133         134         135         136         137         138 \n-0.19656817 -0.09210703 -0.49656817  0.89897069 -0.29656817 -0.15567594 \n        139         140         141         142         143         144 \n-0.26943035  0.38521629  0.10343183  0.50789297 -0.59210703  0.08075515 \n        145         146         147         148         149         150 \n 0.06253960  0.26700074 -0.05121480  0.06700074 -0.31478371 -0.49210703 \n\nggplot(lm1, aes(x=.fitted, y=.resid))+\n  geom_point()+\n  geom_hline(yintercept=0, linetype='dashed')+\n  labs(x='Petal Legnth', y='Residuals')+\n  theme_classic()\n\n\n\n\n\nIf assumptions of normality and equal variance are met, a residual plot should have: - A roughly symmetric cloud of points above and below the horizontal line at 0 with a higher density of points close to the line ran away from it.\n- Little noticeable curvature as we move from left to right\n- Approx. equal variance of points above and below the line at all values of X\n\n\nThe residual plot above shows meets all assumptions, though this analysis is somewhat subjective.\nAn alternative assumption check I think it is easier to do a more comprehensive visual check with the performance package in R. We can easily visually check the first 3 assumptions using check_model(). Assumption 4 requires us to think about experimental design.\n\nlm1&lt;-lm(Sepal.Length ~ Petal.Length, data=iris)\n\ncheck_model(lm1)\n\nNot enough model terms in the conditional part of the model to check for\n  multicollinearity.\n\n\n\n\n\n\nUsing the plots above, we can check 3 / 4 of our assumptions and look for influential observations/outliers. The plots even tell us what to look for on them! This is a bit simpler than trying to analyze the residual plot.\nAs with the residual plot, this analysis of assumptions is somewhat subjective. That is ok."
  },
  {
    "objectID": "regression.html#when-data-are-not-linear",
    "href": "regression.html#when-data-are-not-linear",
    "title": "linear regression",
    "section": "when data are not linear",
    "text": "when data are not linear\nSometimes the relationship between two variables is not linear! There are many types of common relationships including logarithmic and exponential. We can often visualize these relationships and Transform our data to make them linear with some simple math.\nLet’s look at an example:\n\nhead(Loblolly)\n\nGrouped Data: height ~ age | Seed\n   height age Seed\n1    4.51   3  301\n15  10.89   5  301\n29  28.72  10  301\n43  41.74  15  301\n57  52.70  20  301\n71  60.92  25  301\n\np1&lt;-ggplot(Loblolly, aes(x=age, y=height))+\n  geom_point()+\n  geom_smooth()+\n  geom_smooth(method='lm', linetype='dashed', color='firebrick')+\n  theme_classic()+\n  labs(title='original')\n#this is roughly logarithmic in shape\n\nlob&lt;-Loblolly\nlob$age2&lt;-log(lob$age)\n\np2&lt;-ggplot(lob, aes(x=age2, y=height))+\n  geom_point()+\n  geom_smooth()+\n  geom_smooth(method='lm', linetype='dashed', color='firebrick')+\n  theme_classic()+\n  labs(title='log transformed')\n\nlob$age3=(lob$age2)^2\np3&lt;-ggplot(lob, aes(x=age3, y=height))+\n  geom_point()+\n  geom_smooth()+\n  geom_smooth(method='lm', linetype='dashed', color='firebrick')+\n  theme_classic()+\n  labs(title='squared')\n\np1/p2/p3\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\nHere we can see that the transformation was fairly trivial (the data were close enough to a straight line already). BUT, technically, the first plot shows a logarithmic trend. We can transform one of the variables to generate a more linear trend. We can guess a transformation and check it with graphs or we can use our knowledge of mathematical relationships to understand how we might make our relationship more linear."
  },
  {
    "objectID": "regression.html#linear-regression-with-categorical-variables",
    "href": "regression.html#linear-regression-with-categorical-variables",
    "title": "linear regression",
    "section": "Linear Regression with categorical variables",
    "text": "Linear Regression with categorical variables\nWe can look at mtcars this time…\n\nhead(mtcars)\n\n                   mpg cyl disp  hp drat    wt  qsec vs am gear carb\nMazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\nValiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1\n\n\nNow, I want to hypothesize that there will be no effect of cylinder on horsepower (this is called a “null hypothesis”). We’ve seen similar hypothesis before in our ANOVA.\nFirst, let’s make cylinder a factor and plot a boxplot so we can see whether there may be a trend here…\n\nmtcars$cyl1=as.factor(mtcars$cyl)\n\nggplot(mtcars, aes(x=cyl1, y=hp))+\n         geom_boxplot()+\n         theme_bw()\n\n\n\n\n\nI think it is safe to say we see what we might suspect to be a linear(ish) relationship between cyl and hp, where hp increases as cyl increases. What do you think?\nNow, let’s do some stats on this."
  },
  {
    "objectID": "regression.html#run-the-lm",
    "href": "regression.html#run-the-lm",
    "title": "linear regression",
    "section": "Run the lm",
    "text": "Run the lm\n\nlmhp&lt;-lm(hp~cyl1, data = mtcars)\nsummary(lmhp)\n\n\nCall:\nlm(formula = hp ~ cyl1, data = mtcars)\n\nResiduals:\n   Min     1Q Median     3Q    Max \n-59.21 -22.78  -8.25  15.97 125.79 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)    82.64      11.43   7.228 5.86e-08 ***\ncyl16          39.65      18.33   2.163   0.0389 *  \ncyl18         126.58      15.28   8.285 3.92e-09 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 37.92 on 29 degrees of freedom\nMultiple R-squared:  0.7139,    Adjusted R-squared:  0.6941 \nF-statistic: 36.18 on 2 and 29 DF,  p-value: 1.319e-08\n\n\nThis time we used a categorical x variable, which makes things a little more interesting. In the coefficients table this time we see cyl = 6 and cyl =8 represented as well as “intercept.” R takes the categorical variables and places them in alpha numeric order in these tables. So “intercept” is actually cyl=4. The “estimate” tells us the effect size of each category relative to “intercept.” SO, the mean of cyl=4 should be 82.64 (check the boxplot above to confirm). The mean of cyl=6 is not 39.65, but is actually 39.65 higher than mean of cyl=4 (82.64 + 39.65 = 132.29, which checks out). The p-values associated with each of the coefficients test the null hypothesis that each coefficient has no effect. A p &lt;0.05 indicates that the coefficient is likely to be meaningful in the model (changes in the predictor’s value are related to changes in the response value). \nFurther down, we see an R-squared of nearly 0.70, which is very good evidence of a linear relationship (70% of the variance in y can be explained by x!). The p-value is very nearly 0.00, which indicates a significant linear correlation."
  },
  {
    "objectID": "regression.html#check-assumptions",
    "href": "regression.html#check-assumptions",
    "title": "linear regression",
    "section": "Check assumptions!",
    "text": "Check assumptions!\n\ncheck_model(lmhp)\n\nNot enough model terms in the conditional part of the model to check for\n  multicollinearity.\n\n\n\n\n\n\nHere we see some concern about Homoscedasticity and homogeneity of variance. We can probably still assume our model is reliable, but we may want to be careful. We learned ways to numerically assess this last week, but again, with high enough sample size, this won’t be an issue. Here, I would suggest that n is too small, so if this were a real statistical test we would have limitations to discuss.\n\nRemember our hypothesis (null) was: “There will be no effect of cylinder on horsepower.” We are able to reject this null hypothesis and suggest that indeed horsepower increases as cylinder increases. We might also add caveats that homoscedasticity was not confirmed due to low sample size, but the result seems clear enough that this likely doesn’t matter."
  },
  {
    "objectID": "t_test.html#a-note-on-statistics-and-experimental-design",
    "href": "t_test.html#a-note-on-statistics-and-experimental-design",
    "title": "T Test",
    "section": "A note on statistics and experimental design",
    "text": "A note on statistics and experimental design\nStatistics is a complex field with a long history. We could spend an entire course or even an entire career focusing on the intricate details of statistical decisions and ideas. We’ve already spent some time on this! I want you to have the statistical grounding necessary to plan your experiments and analyze your data. For biologists, statistics are a tool we can leverage to perform the best possible experiments and test our hypotheses. The T-test is the start of our stats journey. It’s a simple test and one that you may not use often, but the theory behind it sets the stage for what is to come!"
  },
  {
    "objectID": "t_test.html#t-test-theory",
    "href": "t_test.html#t-test-theory",
    "title": "T Test",
    "section": "T-test theory",
    "text": "T-test theory\nThe t-test (or students’ t-test) is a basic statistical test used to assess whether or not the means of two groups are different from one another. In this test, the null hypothesis is that the two means are equal (or that there is no difference between the two means).\nA t-test should only be used if the following assumptions are met:\n1.) the two distributions whose means we are comparing must be normally distributed\n2.) The variances of the two groups must be equal\n\nGenerate example data\n\niris2&lt;-iris %&gt;%\n  filter(Species != 'setosa') %&gt;%\n  droplevels() #removes the empty levels so when we check levels below we only get the ones that are still in the data!\n\n#check levels to make sure we only have 2 species!\nhead(iris2)\n\n  Sepal.Length Sepal.Width Petal.Length Petal.Width    Species\n1          7.0         3.2          4.7         1.4 versicolor\n2          6.4         3.2          4.5         1.5 versicolor\n3          6.9         3.1          4.9         1.5 versicolor\n4          5.5         2.3          4.0         1.3 versicolor\n5          6.5         2.8          4.6         1.5 versicolor\n6          5.7         2.8          4.5         1.3 versicolor\n\nlevels(iris2$Species)\n\n[1] \"versicolor\" \"virginica\" \n\n\nWe will use these data for our examples today. T-test requires only 2 groups/populations. We will assess the alternative hypothesis that one of our numerical variables (sepal length, sepal width, petal length, or petal width) differs by species.\nBut first, we must test our assumptions"
  },
  {
    "objectID": "t_test.html#assumption-1.-assessing-normality",
    "href": "t_test.html#assumption-1.-assessing-normality",
    "title": "T Test",
    "section": "Assumption 1.) Assessing normality",
    "text": "Assumption 1.) Assessing normality\nMethod 1: the Shapiro-Wilk Test If p &lt; 0.05 then the distribution is significantly different from normal.\nStep 1: we need to create separate data frames for each species to assess normality of each variable by species!\n\nversi&lt;-iris2 %&gt;%\n  filter(Species=='versicolor') %&gt;%\n  droplevels()\n\nvirg&lt;-iris2 %&gt;%\n  filter(Species=='virginica') %&gt;%\n  droplevels()\n\n\n\nStep 2: We can run our shapiro-wilk tests on each variable if we’d like\n\nshapiro.test(versi$Petal.Length) #this is normally distributed\n\n\n    Shapiro-Wilk normality test\n\ndata:  versi$Petal.Length\nW = 0.966, p-value = 0.1585\n\nshapiro.test(versi$Petal.Width) # this is not\n\n\n    Shapiro-Wilk normality test\n\ndata:  versi$Petal.Width\nW = 0.94763, p-value = 0.02728\n\nshapiro.test(versi$Sepal.Length) #normal\n\n\n    Shapiro-Wilk normality test\n\ndata:  versi$Sepal.Length\nW = 0.97784, p-value = 0.4647\n\nshapiro.test(versi$Sepal.Width) #normal\n\n\n    Shapiro-Wilk normality test\n\ndata:  versi$Sepal.Width\nW = 0.97413, p-value = 0.338\n\nshapiro.test(virg$Petal.Length) #normal\n\n\n    Shapiro-Wilk normality test\n\ndata:  virg$Petal.Length\nW = 0.96219, p-value = 0.1098\n\nshapiro.test(virg$Petal.Width) #normal\n\n\n    Shapiro-Wilk normality test\n\ndata:  virg$Petal.Width\nW = 0.95977, p-value = 0.08695\n\nshapiro.test(virg$Sepal.Length) #normal\n\n\n    Shapiro-Wilk normality test\n\ndata:  virg$Sepal.Length\nW = 0.97118, p-value = 0.2583\n\nshapiro.test(virg$Sepal.Width) #normal\n\n\n    Shapiro-Wilk normality test\n\ndata:  virg$Sepal.Width\nW = 0.96739, p-value = 0.1809\n\n\n\nMethod 2: Visualization\nExplore the following visualizations. Do you see clear evidence of normality?\n\na1&lt;-ggplot(data=iris2, aes(Petal.Length, fill=Species))+\n  geom_histogram(binwidth = 0.3)+ \n  facet_wrap(~Species)+\n  theme_classic()+\n  scale_fill_aaas()\n\na2&lt;-ggplot(data=iris2, aes(x=Petal.Length, y=Species, fill=Species))+\n  geom_density_ridges()+ #makes a smooth density curve instead of a histogram!\n  theme_classic()+\n  scale_fill_aaas()\n\na1/a2 #compare the visualizations (they are of the same data)- do we see normality here?\n\nPicking joint bandwidth of 0.206\n\n\n\n\n\n\nb1&lt;-ggplot(data=iris2, aes(Petal.Width, fill=Species))+\n  geom_histogram(binwidth = 0.3)+ \n  facet_wrap(~Species)+\n  theme_classic()+\n  scale_fill_aaas()\n\nb2&lt;-ggplot(data=iris2, aes(x=Petal.Width, y=Species, fill=Species))+\n  geom_density_ridges()+ #makes a smooth density curve instead of a histogram!\n  theme_classic()+\n  scale_fill_aaas()\n\nb1/b2 #compare the visualizations (they are of the same data)- do we see normality here?\n\nPicking joint bandwidth of 0.0972\n\n\n\n\n\n\nc1&lt;-ggplot(data=iris2, aes(Sepal.Width, fill=Species))+\n  geom_histogram(binwidth = 0.3)+ \n  facet_wrap(~Species)+\n  theme_classic()+\n  scale_fill_aaas()\n\nc2&lt;-ggplot(data=iris2, aes(x=Sepal.Width, y=Species, fill=Species))+\n  geom_density_ridges()+ #makes a smooth density curve instead of a histogram!\n  theme_classic()+\n  scale_fill_aaas()\n\nc1/c2 #compare the visualizations (they are of the same data)- do we see normality here?\n\nPicking joint bandwidth of 0.122\n\n\n\n\n\n\nd1&lt;-ggplot(data=iris2, aes(Sepal.Length, fill=Species))+\n  geom_histogram(binwidth = 0.3)+ \n  facet_wrap(~Species)+\n  theme_classic()+\n  scale_fill_aaas()\n\nd2&lt;-ggplot(data=iris2, aes(x=Sepal.Length, y=Species, fill=Species))+\n  geom_density_ridges()+ #makes a smooth density curve instead of a histogram!\n  theme_classic()+\n  scale_fill_aaas()\n\nd1/d2 #compare the visualizations (they are of the same data)- do we see normality here?\n\nPicking joint bandwidth of 0.21"
  },
  {
    "objectID": "t_test.html#assumption-2.-assessing-equal-variance",
    "href": "t_test.html#assumption-2.-assessing-equal-variance",
    "title": "T Test",
    "section": "Assumption 2.) Assessing equal variance",
    "text": "Assumption 2.) Assessing equal variance\nAKA homogeneity of variance\n\nMethods 1: F-test We will use the F-Test to compare the variance of two populations. This can only be used with 2 populations and is thus only useful when we run a t-test.\nH0 for an F-test is: The variances of the two groups are equal.\nHa: The variances are different\np&lt;0.05 allows us to reject the null (H0) and suggests that the variances are different\n\nnote: The F-test assumes our data are already normal! You should not run it on non-normal data\n\n#we use var.test to run an F-test\nf1&lt;- var.test(Petal.Length ~ Species, data=iris2)\nf1 # p&gt;0.05, so we fail to reject H0 (the variances are likely equal)\n\n\n    F test to compare two variances\n\ndata:  Petal.Length by Species\nF = 0.72497, num df = 49, denom df = 49, p-value = 0.2637\nalternative hypothesis: true ratio of variances is not equal to 1\n95 percent confidence interval:\n 0.411402 1.277530\nsample estimates:\nratio of variances \n         0.7249678 \n\nf2&lt;- var.test(Petal.Width ~ Species, data=iris2)\nf2 # p&lt;0.05, so we reject H0 (variances are likely different)\n\n\n    F test to compare two variances\n\ndata:  Petal.Width by Species\nF = 0.51842, num df = 49, denom df = 49, p-value = 0.02335\nalternative hypothesis: true ratio of variances is not equal to 1\n95 percent confidence interval:\n 0.2941935 0.9135614\nsample estimates:\nratio of variances \n         0.5184243 \n\nf3&lt;- var.test(Sepal.Length ~ Species, data=iris2)\nf3 # p&gt;0.05, so we fail to reject H0 (the variances are likely equal)\n\n\n    F test to compare two variances\n\ndata:  Sepal.Length by Species\nF = 0.65893, num df = 49, denom df = 49, p-value = 0.1478\nalternative hypothesis: true ratio of variances is not equal to 1\n95 percent confidence interval:\n 0.3739257 1.1611546\nsample estimates:\nratio of variances \n         0.6589276 \n\nf4&lt;- var.test(Sepal.Width ~ Species, data=iris2)\nf4 # p&gt;0.05, so we fail to reject H0 (the variances are likely equal)\n\n\n    F test to compare two variances\n\ndata:  Sepal.Width by Species\nF = 0.94678, num df = 49, denom df = 49, p-value = 0.849\nalternative hypothesis: true ratio of variances is not equal to 1\n95 percent confidence interval:\n 0.5372773 1.6684117\nsample estimates:\nratio of variances \n         0.9467839 \n\n\n\nMethod 2: Levene Test\nA more flexible test of homogeneity of variance is the Levene Test. It can be used to compare the variance of many populations (not just 2) and is more flexible than the F-test, so it can be used even if the normality assumption is violated.\nthis is the most commonly used test for homogeneity of variance\nleveneTest() is in the car package in R!\n\nN0: Variances of all populations are equal\np&lt;0.05 allows us to reject H0\n\nl1&lt;- leveneTest(Petal.Length ~ Species, data=iris2)\nl1 # p&gt;0.05, so we fail to reject H0 (the variances are likely equal)\n\nLevene's Test for Homogeneity of Variance (center = median)\n      Df F value Pr(&gt;F)\ngroup  1  1.0674 0.3041\n      98               \n\nl2&lt;- leveneTest(Petal.Width ~ Species, data=iris2)\nl2 # p&lt;0.05, so we reject H0 (variances are likely different)\n\nLevene's Test for Homogeneity of Variance (center = median)\n      Df F value  Pr(&gt;F)  \ngroup  1  6.5455 0.01205 *\n      98                  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nl3&lt;- leveneTest(Sepal.Length ~ Species, data=iris2)\nl3 # p&gt;0.05, so we fail to reject H0 (the variances are likely equal)\n\nLevene's Test for Homogeneity of Variance (center = median)\n      Df F value Pr(&gt;F)\ngroup  1  1.0245 0.3139\n      98               \n\nl4&lt;- leveneTest(Sepal.Width ~ Species, data=iris2)\nl4 # p&gt;0.05, so we fail to reject H0 (the variances are likely equal)\n\nLevene's Test for Homogeneity of Variance (center = median)\n      Df F value Pr(&gt;F)\ngroup  1  0.0873 0.7683\n      98               \n\n\n\nMethod 3: Visualization\nSince p-values are more like guidelines, we also want to visualize our data to assess homogeneity of variance. We can do that in several ways. You might already have some ideas about this! In general, it seems smart to display the raw data as points and as boxplots. Let’s start there!\n\nv1.1&lt;-ggplot(data=iris2, aes(x=Species, y=Petal.Length, color=Species))+\n  geom_point()+\n  theme_classic()+\n  scale_color_aaas()\n\nv1.2&lt;-ggplot(data=iris2, aes(x=Species, y=Petal.Length, color=Species))+\n  geom_boxplot()+\n  theme_classic()+\n  scale_color_aaas()\n\nv1.1+v1.2\n\n\n\n\n\nv2.1&lt;-ggplot(data=iris2, aes(x=Species, y=Petal.Width, color=Species))+\n  geom_point()+\n  theme_classic()+\n  scale_color_aaas()\n\nv2.2&lt;-ggplot(data=iris2, aes(x=Species, y=Petal.Width, color=Species))+\n  geom_boxplot()+\n  theme_classic()+\n  scale_color_aaas()\n\nv2.1+v2.2\n\n\n\n\n\nv3.1&lt;-ggplot(data=iris2, aes(x=Species, y=Sepal.Width, color=Species))+\n  geom_point()+\n  theme_classic()+\n  scale_color_aaas()\n\nv3.2&lt;-ggplot(data=iris2, aes(x=Species, y=Sepal.Width, color=Species))+\n  geom_boxplot()+\n  theme_classic()+\n  scale_color_aaas()\n\nv3.1+v3.2\n\n\n\n\n\nv4.1&lt;-ggplot(data=iris2, aes(x=Species, y=Sepal.Length, color=Species))+\n  geom_point()+\n  theme_classic()+\n  scale_color_aaas()\n\nv4.2&lt;-ggplot(data=iris2, aes(x=Species, y=Sepal.Length, color=Species))+\n  geom_boxplot()+\n  theme_classic()+\n  scale_color_aaas()\n\nv4.1+v4.2"
  },
  {
    "objectID": "t_test.html#when-can-we-ignore-assumptions",
    "href": "t_test.html#when-can-we-ignore-assumptions",
    "title": "T Test",
    "section": "When can we ignore assumptions?",
    "text": "When can we ignore assumptions?\nWe can if our sample sizes are large. If n is small, we should not ignore this assumption. There are alternatives to dealing with normality that we can discuss in the ANOVA section (such as transforming the data)\nFor more info on that\nWe can also ignore the equal variance requirement if we use the Welch t-test (default in R)"
  },
  {
    "objectID": "t_test.html#a-basic-t-test-in-r",
    "href": "t_test.html#a-basic-t-test-in-r",
    "title": "T Test",
    "section": "A basic T-test in R",
    "text": "A basic T-test in R\nFinally, let’s do some T-tests!\n\nH0: No difference between the means of the 2 populations p&lt;0.05 allows us to reject this H0 (indicating a likely difference)\nStep 1: Calculate means and error and plot!\n\nmeaniris&lt;-iris2 %&gt;%\n  group_by(Species) %&gt;%\n  dplyr::summarise(meanpl=mean(Petal.Length), sdpl=sd(Petal.Length), n=n(), sepl=sdpl/sqrt(n), meanpw=mean(Petal.Width), sdpw=sd(Petal.Width), n=n(), sepw=sdpw/sqrt(n), meansl=mean(Sepal.Length), sdsl=sd(Sepal.Length), n=n(), sesl=sdpl/sqrt(n), meansw=mean(Sepal.Width), sdsw=sd(Sepal.Width), n=n(), sesw=sdsw/sqrt(n))\n\nmeaniris\n\n# A tibble: 2 × 14\n  Species    meanpl  sdpl     n   sepl meanpw  sdpw   sepw meansl  sdsl   sesl\n  &lt;fct&gt;       &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt;  &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;\n1 versicolor   4.26 0.470    50 0.0665   1.33 0.198 0.0280   5.94 0.516 0.0665\n2 virginica    5.55 0.552    50 0.0780   2.03 0.275 0.0388   6.59 0.636 0.0780\n# ℹ 3 more variables: meansw &lt;dbl&gt;, sdsw &lt;dbl&gt;, sesw &lt;dbl&gt;\n\n\n\n\n\np1&lt;-ggplot(meaniris, aes(x=Species, y=meanpl, color=Species))+\n  geom_point()+\n  geom_errorbar(aes(x=Species, ymin=meanpl-sepl, ymax=meanpl+sepl), width=0.2)+\n  scale_color_aaas()+\n  theme_classic()+\n  labs(title='Petal Length')\n\np2&lt;-ggplot(meaniris, aes(x=Species, y=meanpw, color=Species))+\n  geom_point()+\n  geom_errorbar(aes(x=Species, ymin=meanpw-sepw, ymax=meanpw+sepw), width=0.2)+\n  scale_color_aaas()+\n  theme_classic()+\n  labs(title='Petal Width')\n\np3&lt;-ggplot(meaniris, aes(x=Species, y=meansl, color=Species))+\n  geom_point()+\n  geom_errorbar(aes(x=Species, ymin=meansl-sesl, ymax=meansl+sesl), width=0.2)+\n  scale_color_aaas()+\n  theme_classic()+\n  labs(title='Sepal Length')\n\np4&lt;-ggplot(meaniris, aes(x=Species, y=meansw, color=Species))+\n  geom_point()+\n  geom_errorbar(aes(x=Species, ymin=meansw-sesw, ymax=meansw+sesw), width=0.2)+\n  scale_color_aaas()+\n  theme_classic()+\n  labs(title='Sepal Width')\n\n(p1+p2)/(p3+p4)\n\n\n\n\nDoes Petal Length differ by species?\n\nt1&lt;-t.test(data=iris2, Petal.Length~Species, alternative='two.sided', var.equal=FALSE) #two.sided and var.equal= FALSE are default, so we don't have to list them. BUt, we can also change them (as I will show later)\n\nt1 #p&lt;0.05 suggests that there is a significant difference in petal length between species\n\n\n    Welch Two Sample t-test\n\ndata:  Petal.Length by Species\nt = -12.604, df = 95.57, p-value &lt; 2.2e-16\nalternative hypothesis: true difference in means between group versicolor and group virginica is not equal to 0\n95 percent confidence interval:\n -1.49549 -1.08851\nsample estimates:\nmean in group versicolor  mean in group virginica \n                   4.260                    5.552 \n\n\n\nOur p&lt;0.05 suggests that there is a significant effect of species on petal length (petal length differs by species). BUT, do we get a clear explanation of which group is higher or lower? Look at the Welch T-test output and you can see the means! You can also use the graph we made to visualize this!\nDoes Petal Width differ by species?\n\nt2&lt;-t.test(data=iris2, Petal.Width~Species, alternative='two.sided', var.equal=FALSE) #two.sided and var.equal= FALSE are default, so we don't have to list them. BUt, we can also change them (as I will show later)\n\nt2\n\n\n    Welch Two Sample t-test\n\ndata:  Petal.Width by Species\nt = -14.625, df = 89.043, p-value &lt; 2.2e-16\nalternative hypothesis: true difference in means between group versicolor and group virginica is not equal to 0\n95 percent confidence interval:\n -0.7951002 -0.6048998\nsample estimates:\nmean in group versicolor  mean in group virginica \n                   1.326                    2.026 \n\n\n\nDoes Sepal Width differ between species?\n\nt3&lt;-t.test(data=iris2, Sepal.Width~Species, alternative='two.sided', var.equal=FALSE) #two.sided and var.equal= FALSE are default, so we don't have to list them. BUt, we can also change them (as I will show later)\n\nt3\n\n\n    Welch Two Sample t-test\n\ndata:  Sepal.Width by Species\nt = -3.2058, df = 97.927, p-value = 0.001819\nalternative hypothesis: true difference in means between group versicolor and group virginica is not equal to 0\n95 percent confidence interval:\n -0.33028364 -0.07771636\nsample estimates:\nmean in group versicolor  mean in group virginica \n                   2.770                    2.974 \n\n\n\nDoes Sepal Length differ between species?\n\nt4&lt;-t.test(data=iris2, Sepal.Length~Species, alternative='two.sided', var.equal=FALSE) #two.sided and var.equal= FALSE are default, so we don't have to list them. BUt, we can also change them (as I will show later)\n\nt4\n\n\n    Welch Two Sample t-test\n\ndata:  Sepal.Length by Species\nt = -5.6292, df = 94.025, p-value = 1.866e-07\nalternative hypothesis: true difference in means between group versicolor and group virginica is not equal to 0\n95 percent confidence interval:\n -0.8819731 -0.4220269\nsample estimates:\nmean in group versicolor  mean in group virginica \n                   5.936                    6.588 \n\n\nSO, when is a t-test actually useful and when isn’t it? We use a T-test ONLY when we want to compare two means / two populations. If we have more than 2 groups, a T-test is not appropriate! Instead, we need to use an analysis of variance (ANOVA) or possibly something more complex!"
  },
  {
    "objectID": "ANOVA.html",
    "href": "ANOVA.html",
    "title": "ANOVA",
    "section": "",
    "text": "IN THIS TUTORIAL YOU WILL LEARN:\n1.) The theory behind analysis of variance\n2.) How to perform 1 way and multi-way ANOVA in R\n3.) How to use TukeyHSD in R\n4.) How to test assumptions of ANOVA"
  },
  {
    "objectID": "ANOVA.html#another-anova-example",
    "href": "ANOVA.html#another-anova-example",
    "title": "ANOVA",
    "section": "Another Anova example",
    "text": "Another Anova example\nLet’s apply those ANOVA skills to a new dataset. We will use the dataset called ‘iris’ that is built into R. It’s a simply dataframe that contains attributes of different flowers. It is similar to penguins!\nFirst step: Let’s plot some data! I want to assess the effect of species on petal.length\n\nhead(iris)\n\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n4          4.6         3.1          1.5         0.2  setosa\n5          5.0         3.6          1.4         0.2  setosa\n6          5.4         3.9          1.7         0.4  setosa\n\nggplot(data=iris, aes(x=Species, y=Petal.Length, group=Species))+\n  geom_boxplot(aes(fill=Species))+\n  theme_bw()+ #remember this?\n  scale_color_npg()+\n  scale_fill_npg()\n\n\n\n\n\nOur plot shows us that there is almost certainly an effect of species on petal length. But, let’s check that with an anova.\nSecond step: Check ANOVA assumptions.\nIndependence: We will assume this is fine. We can’t possibly know for sure given the source of the data. Outliers: We already checkd visually. Nothing stands out as an extreme outlier. But let’s confirm\n\niris %&gt;% \n  group_by(Species) %&gt;%\n  identify_outliers(Petal.Length) #No extreme outliers, so let's carry on\n\n# A tibble: 5 × 7\n  Species    Sepal.Length Sepal.Width Petal.Length Petal.Width is.outlier\n  &lt;fct&gt;             &lt;dbl&gt;       &lt;dbl&gt;        &lt;dbl&gt;       &lt;dbl&gt; &lt;lgl&gt;     \n1 setosa              4.3         3            1.1         0.1 TRUE      \n2 setosa              4.6         3.6          1           0.2 TRUE      \n3 setosa              4.8         3.4          1.9         0.2 TRUE      \n4 setosa              5.1         3.8          1.9         0.4 TRUE      \n5 versicolor          5.1         2.5          3           1.1 TRUE      \n# ℹ 1 more variable: is.extreme &lt;lgl&gt;\n\n\nNormality and Homoscedasticity\nVisual Check Using check_model() we see that we have a normal distribution (yay) but there is some concern about homogeneity of variance.\n\nmodeliris&lt;-aov(Petal.Length ~ Species, data=iris)\ncheck_model(modeliris)\n\n\n\n\nNumbers check (shapiro for normality, levene for homosced) Normality is fine, but homoscedasticity assumption is not met, so we need a Welch test\n\n#entire model normality\nshapiro_test(residuals(modeliris)) #this comes out significant indicating non-normality in the residuals. This is clearly not the case when we look at all of the other data and figures we have, so let's not worry about it. \n\n# A tibble: 1 × 3\n  variable             statistic p.value\n  &lt;chr&gt;                    &lt;dbl&gt;   &lt;dbl&gt;\n1 residuals(modeliris)     0.981  0.0368\n\n#normality of each group\niris %&gt;%\n  group_by(Species)%&gt;%\n  shapiro_test(Petal.Length) # All come out as normal, note the almost significant p for setosa\n\n# A tibble: 3 × 4\n  Species    variable     statistic      p\n  &lt;fct&gt;      &lt;chr&gt;            &lt;dbl&gt;  &lt;dbl&gt;\n1 setosa     Petal.Length     0.955 0.0548\n2 versicolor Petal.Length     0.966 0.158 \n3 virginica  Petal.Length     0.962 0.110 \n\n#Homogeneity of variance /Homoscedasticity \nleveneTest(Petal.Length~Species, data=iris) #This is significant, so there is an issue with heterogeneity of variance and that assumption is not met. Thus, we need to do a \n\nLevene's Test for Homogeneity of Variance (center = median)\n       Df F value    Pr(&gt;F)    \ngroup   2   19.48 3.129e-08 ***\n      147                      \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nFinally, let’s run the anova and see if we need a welch test\n\n#regular anova\naoviris&lt;-aov(Petal.Length~Species, data=iris) \naoviris #this tells us we may have unbalanced effects\n\nCall:\n   aov(formula = Petal.Length ~ Species, data = iris)\n\nTerms:\n                 Species Residuals\nSum of Squares  437.1028   27.2226\nDeg. of Freedom        2       147\n\nResidual standard error: 0.4303345\nEstimated effects may be unbalanced\n\nsummary(aoviris) #this summary still gives us a p value, so are we really doing something wrong??\n\n             Df Sum Sq Mean Sq F value Pr(&gt;F)    \nSpecies       2  437.1  218.55    1180 &lt;2e-16 ***\nResiduals   147   27.2    0.19                   \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n#welch anova\nwelchiris&lt;-welch_anova_test(Petal.Length~Species, data=iris) # We see a significant effect\nwelchiris\n\n# A tibble: 1 × 7\n  .y.              n statistic   DFn   DFd        p method     \n* &lt;chr&gt;        &lt;int&gt;     &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt; &lt;chr&gt;      \n1 Petal.Length   150     1828.     2  78.1 2.69e-66 Welch ANOVA"
  },
  {
    "objectID": "multiple_regression.html",
    "href": "multiple_regression.html",
    "title": "Multiple Regression & Model Selection",
    "section": "",
    "text": "library(tidyverse)\nlibrary(broom)\nlibrary(palmerpenguins)\nlibrary(data.table)\nlibrary(performance)\nlibrary(patchwork)\nlibrary(car) #to check collinearity\n\nMy favorite mixed models selection tutorial: Our Coding Club\n\n\n\n\npenguins &lt;- palmerpenguins::penguins\n\nhead(penguins)\n\n# A tibble: 6 × 8\n  species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n1 Adelie  Torgersen           39.1          18.7               181        3750\n2 Adelie  Torgersen           39.5          17.4               186        3800\n3 Adelie  Torgersen           40.3          18                 195        3250\n4 Adelie  Torgersen           NA            NA                  NA          NA\n5 Adelie  Torgersen           36.7          19.3               193        3450\n6 Adelie  Torgersen           39.3          20.6               190        3650\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\npenguins&lt;-drop_na(penguins)\n\npenguins$year=as.factor(penguins$year) #we are interested in year as a grouping/categorical variable so we will make it a factor\n\n\n\n\n\n1.) Make a graph to visualize!2.) Build the model3.) view tabular results4.) Model fit assessment5.) A 95% CI plot of model coefficients\n\n\nWe will start with a boxplot for a quick check. We would eventually want to calculate means and error bars for the final visualization though! Note that the graph below is a good way to view the interaction of our explanatory variables, which is not what we modeled… We only consider the additive effects (each variable on its own)\n\n# effect of year on bill depth by species\nggplot(data=penguins, aes(x=as.factor(year), y=bill_depth_mm, color=species))+\n  geom_boxplot()+\n  theme_classic()\n\n\n\n\nVisualization of each variable on its own:\n\nspeciesgraph&lt;-ggplot(data=penguins, aes(x=species, y=bill_depth_mm))+\n  geom_boxplot()+\n  theme_classic()\n\nsexgraph&lt;-ggplot(data=penguins, aes(x=sex, y=bill_depth_mm))+\n  geom_boxplot()+\n  theme_classic()\n\nyeargraph&lt;-ggplot(data=penguins, aes(x=as.factor(year), y=bill_depth_mm))+\n  geom_boxplot()+\n  theme_classic()\n\nspeciesgraph+sexgraph+yeargraph\n\n\n\n\n\n\n\n#build the model\nlm1&lt;- lm(bill_depth_mm ~ species+sex+year, data=penguins)\n\n\n\n\nsummary(lm1) #check R2 and p-value! How well does the model fit?\n\n\nCall:\nlm(formula = bill_depth_mm ~ species + sex + year, data = penguins)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-2.07890 -0.56431 -0.00782  0.48485  3.12581 \n\nCoefficients:\n                 Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)      17.71835    0.10760 164.672   &lt;2e-16 ***\nspeciesChinstrap  0.05649    0.12232   0.462   0.6445    \nspeciesGentoo    -3.36375    0.10268 -32.760   &lt;2e-16 ***\nsexmale           1.50471    0.09107  16.523   &lt;2e-16 ***\nyear2008         -0.21053    0.11374  -1.851   0.0651 .  \nyear2009         -0.14416    0.11239  -1.283   0.2005    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.8308 on 327 degrees of freedom\nMultiple R-squared:  0.8247,    Adjusted R-squared:  0.822 \nF-statistic: 307.6 on 5 and 327 DF,  p-value: &lt; 2.2e-16\n\nsummary(lm1)$coefficient #just the coef table from the summary!\n\n                    Estimate Std. Error     t value      Pr(&gt;|t|)\n(Intercept)      17.71835149 0.10759801 164.6717403 1.229960e-316\nspeciesChinstrap  0.05649237 0.12231501   0.4618597  6.444891e-01\nspeciesGentoo    -3.36375169 0.10267709 -32.7604888 2.664705e-105\nsexmale           1.50470770 0.09106922  16.5226813  5.184519e-45\nyear2008         -0.21053181 0.11373677  -1.8510443  6.506474e-02\nyear2009         -0.14416134 0.11238907  -1.2826989  2.005060e-01\n\nanova(lm1) # an ANOVA table of our lm\n\nAnalysis of Variance Table\n\nResponse: bill_depth_mm\n           Df Sum Sq Mean Sq  F value Pr(&gt;F)    \nspecies     2 870.79  435.39 630.7435 &lt;2e-16 ***\nsex         1 188.50  188.50 273.0716 &lt;2e-16 ***\nyear        2   2.45    1.23   1.7771 0.1708    \nResiduals 327 225.72    0.69                    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nconfint(lm1) #CIs for our model predictors!\n\n                      2.5 %      97.5 %\n(Intercept)      17.5066798 17.93002315\nspeciesChinstrap -0.1841312  0.29711599\nspeciesGentoo    -3.5657427 -3.16176068\nsexmale           1.3255522  1.68386318\nyear2008         -0.4342799  0.01321630\nyear2009         -0.3652582  0.07693551\n\n\n-t / pvalue tells us whether there is a sig association between the predictor and the outcome variable…\n-in stats terms, this tells us whether the beta coef of predictor is significantly different form zero\n-coefficient can be interpreted as average effect on y of a one unit increase in predictor, holding all other predictors fixed\nHere, we have an additive model and we see from the anova table and the lm summary that there are significant effects of species and sex on bill depth but that there is not effect on year. Next, let’s look at the data again to confirm!\n\n\nHere, we want to know how well the model represent the data. We need: 1. The R2 value of the model (closer to 1 is best) 2. The p-value of the model (&lt;0.05 is required for there to be a relationship) 3. We can calculate residual standard error. Lower = more accurate!\nThe R2 and p are in the summary! Below is the formula for RMSE\n\nsummary(lm1)\n\n\nCall:\nlm(formula = bill_depth_mm ~ species + sex + year, data = penguins)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-2.07890 -0.56431 -0.00782  0.48485  3.12581 \n\nCoefficients:\n                 Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)      17.71835    0.10760 164.672   &lt;2e-16 ***\nspeciesChinstrap  0.05649    0.12232   0.462   0.6445    \nspeciesGentoo    -3.36375    0.10268 -32.760   &lt;2e-16 ***\nsexmale           1.50471    0.09107  16.523   &lt;2e-16 ***\nyear2008         -0.21053    0.11374  -1.851   0.0651 .  \nyear2009         -0.14416    0.11239  -1.283   0.2005    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.8308 on 327 degrees of freedom\nMultiple R-squared:  0.8247,    Adjusted R-squared:  0.822 \nF-statistic: 307.6 on 5 and 327 DF,  p-value: &lt; 2.2e-16\n\n#RSE: &lt;- LOWER RSE= more accurate the model!\nsigma(lm1)\n\n[1] 0.8308337\n\nmean(penguins$bill_depth_mm)\n\n[1] 17.16486\n\nsigma(lm1)/mean(penguins$bill_depth_mm)\n\n[1] 0.04840316\n\n#0.048, or 4.8% error rate\n\nWe can also get this information from the performance package using model_performance. This function tells us many things, including R2 and RMSE. We will discuss the rest of this later\n\nmodel_performance(lm1)\n\n# Indices of model performance\n\nAIC     |    AICc |     BIC |    R2 | R2 (adj.) |  RMSE | Sigma\n---------------------------------------------------------------\n829.532 | 829.876 | 856.189 | 0.825 |     0.822 | 0.823 | 0.831\n\n\n\n\ncombine data! Use tidy() from the broom package to get nice neat dataframes from models\n\ncoefs&lt;-tidy(lm1, quick=FALSE)\ncoefs\n\n# A tibble: 6 × 5\n  term             estimate std.error statistic   p.value\n  &lt;chr&gt;               &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n1 (Intercept)       17.7       0.108    165.    1.23e-316\n2 speciesChinstrap   0.0565    0.122      0.462 6.44e-  1\n3 speciesGentoo     -3.36      0.103    -32.8   2.66e-105\n4 sexmale            1.50      0.0911    16.5   5.18e- 45\n5 year2008          -0.211     0.114     -1.85  6.51e-  2\n6 year2009          -0.144     0.112     -1.28  2.01e-  1\n\nci&lt;-data.table(confint(lm1), keep.rownames='term')\nci\n\n               term      2.5 %      97.5 %\n1:      (Intercept) 17.5066798 17.93002315\n2: speciesChinstrap -0.1841312  0.29711599\n3:    speciesGentoo -3.5657427 -3.16176068\n4:          sexmale  1.3255522  1.68386318\n5:         year2008 -0.4342799  0.01321630\n6:         year2009 -0.3652582  0.07693551\n\ncidf&lt;-cbind(coefs,ci)\ncidf\n\n              term    estimate  std.error   statistic       p.value\n1      (Intercept) 17.71835149 0.10759801 164.6717403 1.229960e-316\n2 speciesChinstrap  0.05649237 0.12231501   0.4618597  6.444891e-01\n3    speciesGentoo -3.36375169 0.10267709 -32.7604888 2.664705e-105\n4          sexmale  1.50470770 0.09106922  16.5226813  5.184519e-45\n5         year2008 -0.21053181 0.11373677  -1.8510443  6.506474e-02\n6         year2009 -0.14416134 0.11238907  -1.2826989  2.005060e-01\n              term      2.5 %      97.5 %\n1      (Intercept) 17.5066798 17.93002315\n2 speciesChinstrap -0.1841312  0.29711599\n3    speciesGentoo -3.5657427 -3.16176068\n4          sexmale  1.3255522  1.68386318\n5         year2008 -0.4342799  0.01321630\n6         year2009 -0.3652582  0.07693551\n\ncolnames(cidf)\n\n[1] \"term\"      \"estimate\"  \"std.error\" \"statistic\" \"p.value\"   \"term\"     \n[7] \"2.5 %\"     \"97.5 %\"   \n\ncidf&lt;-cidf[,-6]\n\ncidf&lt;- cidf %&gt;%\n  rename(\"lower\"=\"2.5 %\",\n         \"upper\"=\"97.5 %\")\n\ncidf\n\n              term    estimate  std.error   statistic       p.value      lower\n1      (Intercept) 17.71835149 0.10759801 164.6717403 1.229960e-316 17.5066798\n2 speciesChinstrap  0.05649237 0.12231501   0.4618597  6.444891e-01 -0.1841312\n3    speciesGentoo -3.36375169 0.10267709 -32.7604888 2.664705e-105 -3.5657427\n4          sexmale  1.50470770 0.09106922  16.5226813  5.184519e-45  1.3255522\n5         year2008 -0.21053181 0.11373677  -1.8510443  6.506474e-02 -0.4342799\n6         year2009 -0.14416134 0.11238907  -1.2826989  2.005060e-01 -0.3652582\n        upper\n1 17.93002315\n2  0.29711599\n3 -3.16176068\n4  1.68386318\n5  0.01321630\n6  0.07693551\n\ncidf$term=as.factor(cidf$term)\n\nNow make a plot!\n\nggplot(data=cidf, aes(x=estimate, y=term))+\n  geom_vline(xintercept = 0, linetype=2)+\n  geom_point(size=3)+\n  geom_errorbarh(aes(xmax=lower, xmin=upper),height=0.2)+\n  theme_classic()\n\n\n\n\nNote that there are many ways to build a dataframe and plot for these. This is just one example. Here we can visualize that the effects of each variable individually are not very large.\n\n\n\n\n\n\n\n1.) Run an additive model and an interactive model. View summaries2.) make the coef data neat and look at model fits3.) make a pretty graph!\n\n\n\nlm2&lt;-lm(bill_depth_mm ~ bill_length_mm + species, data=penguins)\nlm3&lt;-lm(bill_depth_mm ~ bill_length_mm * species, data=penguins)\n\n#look at summary\nsummary(lm2)\n\n\nCall:\nlm(formula = bill_depth_mm ~ bill_length_mm + species, data = penguins)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-2.4579 -0.6814 -0.0431  0.5441  3.5994 \n\nCoefficients:\n                 Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)      10.56526    0.69093  15.291  &lt; 2e-16 ***\nbill_length_mm    0.20044    0.01768  11.337  &lt; 2e-16 ***\nspeciesChinstrap -1.93308    0.22572  -8.564 4.26e-16 ***\nspeciesGentoo    -5.10332    0.19440 -26.252  &lt; 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.9543 on 329 degrees of freedom\nMultiple R-squared:  0.7673,    Adjusted R-squared:  0.7652 \nF-statistic: 361.6 on 3 and 329 DF,  p-value: &lt; 2.2e-16\n\nsummary(lm3)\n\n\nCall:\nlm(formula = bill_depth_mm ~ bill_length_mm * species, data = penguins)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-2.6574 -0.6559 -0.0483  0.5203  3.4990 \n\nCoefficients:\n                                Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)                     11.48771    1.15987   9.904  &lt; 2e-16 ***\nbill_length_mm                   0.17668    0.02981   5.928 7.79e-09 ***\nspeciesChinstrap                -3.91857    2.06731  -1.895   0.0589 .  \nspeciesGentoo                   -6.36675    1.77990  -3.577   0.0004 ***\nbill_length_mm:speciesChinstrap  0.04553    0.04594   0.991   0.3224    \nbill_length_mm:speciesGentoo     0.03093    0.04112   0.752   0.4525    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.9556 on 327 degrees of freedom\nMultiple R-squared:  0.7681,    Adjusted R-squared:  0.7645 \nF-statistic: 216.6 on 5 and 327 DF,  p-value: &lt; 2.2e-16\n\n\n\n\n\ntidy(lm2)\n\n# A tibble: 4 × 5\n  term             estimate std.error statistic  p.value\n  &lt;chr&gt;               &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n1 (Intercept)        10.6      0.691      15.3  2.98e-40\n2 bill_length_mm      0.200    0.0177     11.3  2.26e-25\n3 speciesChinstrap   -1.93     0.226      -8.56 4.26e-16\n4 speciesGentoo      -5.10     0.194     -26.3  1.04e-82\n\ntidy(lm3)\n\n# A tibble: 6 × 5\n  term                            estimate std.error statistic  p.value\n  &lt;chr&gt;                              &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n1 (Intercept)                      11.5       1.16       9.90  2.14e-20\n2 bill_length_mm                    0.177     0.0298     5.93  7.79e- 9\n3 speciesChinstrap                 -3.92      2.07      -1.90  5.89e- 2\n4 speciesGentoo                    -6.37      1.78      -3.58  4.00e- 4\n5 bill_length_mm:speciesChinstrap   0.0455    0.0459     0.991 3.22e- 1\n6 bill_length_mm:speciesGentoo      0.0309    0.0411     0.752 4.52e- 1\n\n#have a look at model fit\nglance(lm2) #R2 is really good-&gt; 76.5!\n\n# A tibble: 1 × 12\n  r.squared adj.r.squared sigma statistic   p.value    df logLik   AIC   BIC\n      &lt;dbl&gt;         &lt;dbl&gt; &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1     0.767         0.765 0.954      362. 8.88e-104     3  -455.  920.  939.\n# ℹ 3 more variables: deviance &lt;dbl&gt;, df.residual &lt;int&gt;, nobs &lt;int&gt;\n\nglance(lm3) #r2 is 0.768!\n\n# A tibble: 1 × 12\n  r.squared adj.r.squared sigma statistic   p.value    df logLik   AIC   BIC\n      &lt;dbl&gt;         &lt;dbl&gt; &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1     0.768         0.765 0.956      217. 1.87e-101     5  -454.  923.  949.\n# ℹ 3 more variables: deviance &lt;dbl&gt;, df.residual &lt;int&gt;, nobs &lt;int&gt;\n\n\n\n\n\nlm2g&lt;-lm2 %&gt;% \n  augment() %&gt;%\n  ggplot(aes(x=bill_length_mm, y=bill_depth_mm, color=species))+\n  geom_point()+\n  geom_line(aes(y=.fitted))+\n  theme_classic()\n\nlm3g&lt;-lm3 %&gt;% \n  augment() %&gt;%\n  ggplot(aes(x=bill_length_mm, y=bill_depth_mm, color=species))+\n  geom_point()+\n  geom_line(aes(y=.fitted))+\n  theme_classic()\n\nlm2g/lm3g #lm2 has same y int for all! lm3 does not (because of the interaction term!!!)\n\n\n\n\n\n\n\n\n\n\n\n1.) test assumptions (use performance!)2.) check the model performances and choose the best fit3.) MORE COMPLEX EXAMPLE :)\n\n\n\nmodel_performance(lm2)\n\n# Indices of model performance\n\nAIC     |    AICc |     BIC |    R2 | R2 (adj.) |  RMSE | Sigma\n---------------------------------------------------------------\n919.835 | 920.018 | 938.875 | 0.767 |     0.765 | 0.949 | 0.954\n\ncheck_model(lm2)#things look good, including low collinearity (VIF)\n\n\n\nvif(lm2)\n\n                   GVIF Df GVIF^(1/(2*Df))\nbill_length_mm 3.407875  1        1.846043\nspecies        3.407875  2        1.358692\n\nmodel_performance(lm3)\n\n# Indices of model performance\n\nAIC     |    AICc |     BIC |    R2 | R2 (adj.) |  RMSE | Sigma\n---------------------------------------------------------------\n922.729 | 923.074 | 949.386 | 0.768 |     0.765 | 0.947 | 0.956\n\ncheck_model(lm3) #things look good, but we have super high VIF\n\nModel has interaction terms. VIFs might be inflated.\n  You may check multicollinearity among predictors of a model without\n  interaction terms.\n\n\n\n\ncheck_collinearity(lm3) #a table of collinearity results - we would need to remove stuff from the model until the model has VIG that are all below 5 or so (below 10 is fine )\n\nModel has interaction terms. VIFs might be inflated.\n  You may check multicollinearity among predictors of a model without\n  interaction terms.\n\n\n# Check for Multicollinearity\n\nModerate Correlation\n\n           Term  VIF           VIF 95% CI Increased SE Tolerance\n bill_length_mm 9.66 [    7.94,    11.81]         3.11      0.10\n Tolerance 95% CI\n     [0.08, 0.13]\n\nHigh Correlation\n\n                   Term      VIF           VIF 95% CI Increased SE Tolerance\n                species 49899.43 [40473.88, 61520.04]       223.38  2.00e-05\n bill_length_mm:species 64717.85 [52493.21, 79789.42]       254.40  1.55e-05\n Tolerance 95% CI\n     [0.00, 0.00]\n     [0.00, 0.00]\n\nvif(lm3) #gives us a more useful table- tells us that species and species*bill length are looking bad. SO BAD that we cannot run this model....\n\nthere are higher-order terms (interactions) in this model\nconsider setting type = 'predictor'; see ?vif\n\n\n                               GVIF Df GVIF^(1/(2*Df))\nbill_length_mm             9.658784  1        3.107858\nspecies                49899.425896  2       14.945962\nbill_length_mm:species 64717.849261  2       15.949829\n\n\nWhat do we do? We remove interaction terms one by one, thereby simplifying the model, until the VIF are low enough to be meaningful (all below 5 is a good rule of thumb)\nsince the model without the * is just lm2, we are all set.\n\n\n\ncompare_performance(lm2,lm3,rank=TRUE)\n\n# Comparison of Model Performance Indices\n\nName | Model |    R2 | R2 (adj.) |  RMSE | Sigma | AIC weights | AICc weights | BIC weights | Performance-Score\n---------------------------------------------------------------------------------------------------------------\nlm2  |    lm | 0.767 |     0.765 | 0.949 | 0.954 |       0.810 |        0.822 |       0.995 |            71.43%\nlm3  |    lm | 0.768 |     0.765 | 0.947 | 0.956 |       0.190 |        0.178 |       0.005 |            28.57%\n\n\n-This is a comprehensive model check that uses many vars to assess the best model.\n-Here, lm2 wins easily! R2 are about the same, RMSE (residual mean square error) is about the same.\n-AICweights tell us thje relative likelihood of a model– closer to 1 is best. ***when you look at AIC scores (slightly different from AIC weights, the lower the value, the better)\n\n\n\nlm4&lt;-lm(bill_depth_mm ~ bill_length_mm * species * sex, data=penguins)\n\n#look at summary\nsummary(lm4)\n\n\nCall:\nlm(formula = bill_depth_mm ~ bill_length_mm * species * sex, \n    data = penguins)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-2.06730 -0.52452 -0.06471  0.45593  2.90319 \n\nCoefficients:\n                                         Estimate Std. Error t value Pr(&gt;|t|)\n(Intercept)                              14.84023    1.77185   8.376 1.73e-15\nbill_length_mm                            0.07466    0.04749   1.572   0.1169\nspeciesChinstrap                         -0.25160    2.77579  -0.091   0.9278\nspeciesGentoo                            -5.76780    2.98938  -1.929   0.0546\nsexmale                                   4.92359    2.46355   1.999   0.0465\nbill_length_mm:speciesChinstrap          -0.01026    0.06596  -0.155   0.8765\nbill_length_mm:speciesGentoo              0.03871    0.07101   0.545   0.5860\nbill_length_mm:sexmale                   -0.09177    0.06360  -1.443   0.1500\nspeciesChinstrap:sexmale                -11.35403    5.67926  -1.999   0.0464\nspeciesGentoo:sexmale                    -2.41202    3.94469  -0.611   0.5413\nbill_length_mm:speciesChinstrap:sexmale   0.24451    0.12006   2.037   0.0425\nbill_length_mm:speciesGentoo:sexmale      0.06197    0.09131   0.679   0.4978\n                                           \n(Intercept)                             ***\nbill_length_mm                             \nspeciesChinstrap                           \nspeciesGentoo                           .  \nsexmale                                 *  \nbill_length_mm:speciesChinstrap            \nbill_length_mm:speciesGentoo               \nbill_length_mm:sexmale                     \nspeciesChinstrap:sexmale                *  \nspeciesGentoo:sexmale                      \nbill_length_mm:speciesChinstrap:sexmale *  \nbill_length_mm:speciesGentoo:sexmale       \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.8175 on 321 degrees of freedom\nMultiple R-squared:  0.8334,    Adjusted R-squared:  0.8277 \nF-statistic: 145.9 on 11 and 321 DF,  p-value: &lt; 2.2e-16\n\n#make that pretty\ntidy(lm4)\n\n# A tibble: 12 × 5\n   term                                    estimate std.error statistic  p.value\n   &lt;chr&gt;                                      &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n 1 (Intercept)                              14.8       1.77      8.38   1.73e-15\n 2 bill_length_mm                            0.0747    0.0475    1.57   1.17e- 1\n 3 speciesChinstrap                         -0.252     2.78     -0.0906 9.28e- 1\n 4 speciesGentoo                            -5.77      2.99     -1.93   5.46e- 2\n 5 sexmale                                   4.92      2.46      2.00   4.65e- 2\n 6 bill_length_mm:speciesChinstrap          -0.0103    0.0660   -0.155  8.77e- 1\n 7 bill_length_mm:speciesGentoo              0.0387    0.0710    0.545  5.86e- 1\n 8 bill_length_mm:sexmale                   -0.0918    0.0636   -1.44   1.50e- 1\n 9 speciesChinstrap:sexmale                -11.4       5.68     -2.00   4.64e- 2\n10 speciesGentoo:sexmale                    -2.41      3.94     -0.611  5.41e- 1\n11 bill_length_mm:speciesChinstrap:sexmale   0.245     0.120     2.04   4.25e- 2\n12 bill_length_mm:speciesGentoo:sexmale      0.0620    0.0913    0.679  4.98e- 1\n\n#look at fit\nglance(lm4) #nice r2!\n\n# A tibble: 1 × 12\n  r.squared adj.r.squared sigma statistic   p.value    df logLik   AIC   BIC\n      &lt;dbl&gt;         &lt;dbl&gt; &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1     0.833         0.828 0.818      146. 9.55e-118    11  -399.  825.  874.\n# ℹ 3 more variables: deviance &lt;dbl&gt;, df.residual &lt;int&gt;, nobs &lt;int&gt;\n\n# make a pretty graph!\nlm4 %&gt;% \n  augment() %&gt;%\n  ggplot(aes(x=bill_length_mm, y=bill_depth_mm,color=species))+\n  geom_point()+\n  geom_line(aes(y=.fitted))+\n  theme_classic()\n\n\n\n#oops, that isn't quite right. What are we missing?\nlm4g2&lt;-lm4 %&gt;% \n  augment() %&gt;%\n  ggplot(aes(x=bill_length_mm, y=bill_depth_mm,color=species, shape=sex))+\n  geom_point()+\n  geom_line(aes(y=.fitted))+\n  theme_classic()\n\n#OR\n\nlm4g3&lt;-lm4 %&gt;% \n  augment() %&gt;%\n  ggplot(aes(x=bill_length_mm, y=bill_depth_mm,color=species, shape=sex))+\n  geom_point()+\n  geom_line(aes(y=.fitted))+\n  theme_classic()+\n  facet_wrap(~sex)\n\n#compare graphs!\nlm4g2/lm4g3\n\n\n\n\n\n\n\ncoefs&lt;-tidy(lm4)\ncoefs\n\n# A tibble: 12 × 5\n   term                                    estimate std.error statistic  p.value\n   &lt;chr&gt;                                      &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n 1 (Intercept)                              14.8       1.77      8.38   1.73e-15\n 2 bill_length_mm                            0.0747    0.0475    1.57   1.17e- 1\n 3 speciesChinstrap                         -0.252     2.78     -0.0906 9.28e- 1\n 4 speciesGentoo                            -5.77      2.99     -1.93   5.46e- 2\n 5 sexmale                                   4.92      2.46      2.00   4.65e- 2\n 6 bill_length_mm:speciesChinstrap          -0.0103    0.0660   -0.155  8.77e- 1\n 7 bill_length_mm:speciesGentoo              0.0387    0.0710    0.545  5.86e- 1\n 8 bill_length_mm:sexmale                   -0.0918    0.0636   -1.44   1.50e- 1\n 9 speciesChinstrap:sexmale                -11.4       5.68     -2.00   4.64e- 2\n10 speciesGentoo:sexmale                    -2.41      3.94     -0.611  5.41e- 1\n11 bill_length_mm:speciesChinstrap:sexmale   0.245     0.120     2.04   4.25e- 2\n12 bill_length_mm:speciesGentoo:sexmale      0.0620    0.0913    0.679  4.98e- 1\n\ncis&lt;-data.table(confint(lm4), keep.rownames = 'term')\ncis\n\n                                       term         2.5 %      97.5 %\n 1:                             (Intercept)  11.354321139 18.32613470\n 2:                          bill_length_mm  -0.018764802  0.16808708\n 3:                        speciesChinstrap  -5.712636771  5.20943941\n 4:                           speciesGentoo -11.649049135  0.11344307\n 5:                                 sexmale   0.076849623  9.77033563\n 6:         bill_length_mm:speciesChinstrap  -0.140025236  0.11951459\n 7:            bill_length_mm:speciesGentoo  -0.100987370  0.17840241\n 8:                  bill_length_mm:sexmale  -0.216904270  0.03335517\n 9:                speciesChinstrap:sexmale -22.527308826 -0.18075321\n10:                   speciesGentoo:sexmale -10.172726533  5.34869591\n11: bill_length_mm:speciesChinstrap:sexmale   0.008304843  0.48071943\n12:    bill_length_mm:speciesGentoo:sexmale  -0.117669226  0.24160110\n\nCI&lt;-merge(coefs,cis)\nCI\n\n                                      term     estimate  std.error   statistic\n1                              (Intercept)  14.84022792 1.77185076  8.37555183\n2                           bill_length_mm   0.07466114 0.04748745  1.57222883\n3                   bill_length_mm:sexmale  -0.09177455 0.06360216 -1.44294716\n4          bill_length_mm:speciesChinstrap  -0.01025532 0.06596072 -0.15547623\n5  bill_length_mm:speciesChinstrap:sexmale   0.24451214 0.12006175  2.03655314\n6             bill_length_mm:speciesGentoo   0.03870752 0.07100548  0.54513425\n7     bill_length_mm:speciesGentoo:sexmale   0.06196594 0.09130672  0.67865695\n8                                  sexmale   4.92359263 2.46354990  1.99857638\n9                         speciesChinstrap  -0.25159868 2.77578981 -0.09064039\n10                speciesChinstrap:sexmale -11.35403102 5.67926283 -1.99920859\n11                           speciesGentoo  -5.76780303 2.98937724 -1.92943298\n12                   speciesGentoo:sexmale  -2.41201531 3.94469014 -0.61145875\n        p.value         2.5 %      97.5 %\n1  1.731943e-15  11.354321139 18.32613470\n2  1.168826e-01  -0.018764802  0.16808708\n3  1.500104e-01  -0.216904270  0.03335517\n4  8.765436e-01  -0.140025236  0.11951459\n5  4.251519e-02   0.008304843  0.48071943\n6  5.860397e-01  -0.100987370  0.17840241\n7  4.978442e-01  -0.117669226  0.24160110\n8  4.649725e-02   0.076849623  9.77033563\n9  9.278349e-01  -5.712636771  5.20943941\n10 4.642846e-02 -22.527308826 -0.18075321\n11 5.455827e-02 -11.649049135  0.11344307\n12 5.413287e-01 -10.172726533  5.34869591\n\nCI&lt;- CI %&gt;%\n  rename(\"lower\"=\"2.5 %\",\n         \"upper\"=\"97.5 %\")\nCI\n\n                                      term     estimate  std.error   statistic\n1                              (Intercept)  14.84022792 1.77185076  8.37555183\n2                           bill_length_mm   0.07466114 0.04748745  1.57222883\n3                   bill_length_mm:sexmale  -0.09177455 0.06360216 -1.44294716\n4          bill_length_mm:speciesChinstrap  -0.01025532 0.06596072 -0.15547623\n5  bill_length_mm:speciesChinstrap:sexmale   0.24451214 0.12006175  2.03655314\n6             bill_length_mm:speciesGentoo   0.03870752 0.07100548  0.54513425\n7     bill_length_mm:speciesGentoo:sexmale   0.06196594 0.09130672  0.67865695\n8                                  sexmale   4.92359263 2.46354990  1.99857638\n9                         speciesChinstrap  -0.25159868 2.77578981 -0.09064039\n10                speciesChinstrap:sexmale -11.35403102 5.67926283 -1.99920859\n11                           speciesGentoo  -5.76780303 2.98937724 -1.92943298\n12                   speciesGentoo:sexmale  -2.41201531 3.94469014 -0.61145875\n        p.value         lower       upper\n1  1.731943e-15  11.354321139 18.32613470\n2  1.168826e-01  -0.018764802  0.16808708\n3  1.500104e-01  -0.216904270  0.03335517\n4  8.765436e-01  -0.140025236  0.11951459\n5  4.251519e-02   0.008304843  0.48071943\n6  5.860397e-01  -0.100987370  0.17840241\n7  4.978442e-01  -0.117669226  0.24160110\n8  4.649725e-02   0.076849623  9.77033563\n9  9.278349e-01  -5.712636771  5.20943941\n10 4.642846e-02 -22.527308826 -0.18075321\n11 5.455827e-02 -11.649049135  0.11344307\n12 5.413287e-01 -10.172726533  5.34869591\n\nciplot&lt;-ggplot(data=CI, aes(x=estimate, y=term))+\n  geom_vline(xintercept = 0, linetype=2)+\n  geom_point(size=3)+\n  geom_errorbarh(aes(xmin=lower, xmax=upper), height=0.2)+\n  theme_classic()\n\nciplot\n\n\n\n#a graph of the good stuff\nciplot/lm4g2"
  },
  {
    "objectID": "multiple_regression.html#load-packages",
    "href": "multiple_regression.html#load-packages",
    "title": "Multiple Regression & Model Selection",
    "section": "",
    "text": "library(tidyverse)\nlibrary(broom)\nlibrary(palmerpenguins)\nlibrary(data.table)\nlibrary(performance)\nlibrary(patchwork)\nlibrary(car) #to check collinearity\n\nMy favorite mixed models selection tutorial: Our Coding Club"
  },
  {
    "objectID": "multiple_regression.html#get-our-penguin-data-ready",
    "href": "multiple_regression.html#get-our-penguin-data-ready",
    "title": "Multiple Regression & Model Selection",
    "section": "",
    "text": "penguins &lt;- palmerpenguins::penguins\n\nhead(penguins)\n\n# A tibble: 6 × 8\n  species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n1 Adelie  Torgersen           39.1          18.7               181        3750\n2 Adelie  Torgersen           39.5          17.4               186        3800\n3 Adelie  Torgersen           40.3          18                 195        3250\n4 Adelie  Torgersen           NA            NA                  NA          NA\n5 Adelie  Torgersen           36.7          19.3               193        3450\n6 Adelie  Torgersen           39.3          20.6               190        3650\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\npenguins&lt;-drop_na(penguins)\n\npenguins$year=as.factor(penguins$year) #we are interested in year as a grouping/categorical variable so we will make it a factor"
  },
  {
    "objectID": "multiple_regression.html#what-is-the-effect-of-year-on-bill-depth-by-species",
    "href": "multiple_regression.html#what-is-the-effect-of-year-on-bill-depth-by-species",
    "title": "Multiple Regression & Model Selection",
    "section": "",
    "text": "1.) Make a graph to visualize!2.) Build the model3.) view tabular results4.) Model fit assessment5.) A 95% CI plot of model coefficients\n\n\nWe will start with a boxplot for a quick check. We would eventually want to calculate means and error bars for the final visualization though! Note that the graph below is a good way to view the interaction of our explanatory variables, which is not what we modeled… We only consider the additive effects (each variable on its own)\n\n# effect of year on bill depth by species\nggplot(data=penguins, aes(x=as.factor(year), y=bill_depth_mm, color=species))+\n  geom_boxplot()+\n  theme_classic()\n\n\n\n\nVisualization of each variable on its own:\n\nspeciesgraph&lt;-ggplot(data=penguins, aes(x=species, y=bill_depth_mm))+\n  geom_boxplot()+\n  theme_classic()\n\nsexgraph&lt;-ggplot(data=penguins, aes(x=sex, y=bill_depth_mm))+\n  geom_boxplot()+\n  theme_classic()\n\nyeargraph&lt;-ggplot(data=penguins, aes(x=as.factor(year), y=bill_depth_mm))+\n  geom_boxplot()+\n  theme_classic()\n\nspeciesgraph+sexgraph+yeargraph\n\n\n\n\n\n\n\n#build the model\nlm1&lt;- lm(bill_depth_mm ~ species+sex+year, data=penguins)\n\n\n\n\nsummary(lm1) #check R2 and p-value! How well does the model fit?\n\n\nCall:\nlm(formula = bill_depth_mm ~ species + sex + year, data = penguins)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-2.07890 -0.56431 -0.00782  0.48485  3.12581 \n\nCoefficients:\n                 Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)      17.71835    0.10760 164.672   &lt;2e-16 ***\nspeciesChinstrap  0.05649    0.12232   0.462   0.6445    \nspeciesGentoo    -3.36375    0.10268 -32.760   &lt;2e-16 ***\nsexmale           1.50471    0.09107  16.523   &lt;2e-16 ***\nyear2008         -0.21053    0.11374  -1.851   0.0651 .  \nyear2009         -0.14416    0.11239  -1.283   0.2005    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.8308 on 327 degrees of freedom\nMultiple R-squared:  0.8247,    Adjusted R-squared:  0.822 \nF-statistic: 307.6 on 5 and 327 DF,  p-value: &lt; 2.2e-16\n\nsummary(lm1)$coefficient #just the coef table from the summary!\n\n                    Estimate Std. Error     t value      Pr(&gt;|t|)\n(Intercept)      17.71835149 0.10759801 164.6717403 1.229960e-316\nspeciesChinstrap  0.05649237 0.12231501   0.4618597  6.444891e-01\nspeciesGentoo    -3.36375169 0.10267709 -32.7604888 2.664705e-105\nsexmale           1.50470770 0.09106922  16.5226813  5.184519e-45\nyear2008         -0.21053181 0.11373677  -1.8510443  6.506474e-02\nyear2009         -0.14416134 0.11238907  -1.2826989  2.005060e-01\n\nanova(lm1) # an ANOVA table of our lm\n\nAnalysis of Variance Table\n\nResponse: bill_depth_mm\n           Df Sum Sq Mean Sq  F value Pr(&gt;F)    \nspecies     2 870.79  435.39 630.7435 &lt;2e-16 ***\nsex         1 188.50  188.50 273.0716 &lt;2e-16 ***\nyear        2   2.45    1.23   1.7771 0.1708    \nResiduals 327 225.72    0.69                    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nconfint(lm1) #CIs for our model predictors!\n\n                      2.5 %      97.5 %\n(Intercept)      17.5066798 17.93002315\nspeciesChinstrap -0.1841312  0.29711599\nspeciesGentoo    -3.5657427 -3.16176068\nsexmale           1.3255522  1.68386318\nyear2008         -0.4342799  0.01321630\nyear2009         -0.3652582  0.07693551\n\n\n-t / pvalue tells us whether there is a sig association between the predictor and the outcome variable…\n-in stats terms, this tells us whether the beta coef of predictor is significantly different form zero\n-coefficient can be interpreted as average effect on y of a one unit increase in predictor, holding all other predictors fixed\nHere, we have an additive model and we see from the anova table and the lm summary that there are significant effects of species and sex on bill depth but that there is not effect on year. Next, let’s look at the data again to confirm!\n\n\nHere, we want to know how well the model represent the data. We need: 1. The R2 value of the model (closer to 1 is best) 2. The p-value of the model (&lt;0.05 is required for there to be a relationship) 3. We can calculate residual standard error. Lower = more accurate!\nThe R2 and p are in the summary! Below is the formula for RMSE\n\nsummary(lm1)\n\n\nCall:\nlm(formula = bill_depth_mm ~ species + sex + year, data = penguins)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-2.07890 -0.56431 -0.00782  0.48485  3.12581 \n\nCoefficients:\n                 Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)      17.71835    0.10760 164.672   &lt;2e-16 ***\nspeciesChinstrap  0.05649    0.12232   0.462   0.6445    \nspeciesGentoo    -3.36375    0.10268 -32.760   &lt;2e-16 ***\nsexmale           1.50471    0.09107  16.523   &lt;2e-16 ***\nyear2008         -0.21053    0.11374  -1.851   0.0651 .  \nyear2009         -0.14416    0.11239  -1.283   0.2005    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.8308 on 327 degrees of freedom\nMultiple R-squared:  0.8247,    Adjusted R-squared:  0.822 \nF-statistic: 307.6 on 5 and 327 DF,  p-value: &lt; 2.2e-16\n\n#RSE: &lt;- LOWER RSE= more accurate the model!\nsigma(lm1)\n\n[1] 0.8308337\n\nmean(penguins$bill_depth_mm)\n\n[1] 17.16486\n\nsigma(lm1)/mean(penguins$bill_depth_mm)\n\n[1] 0.04840316\n\n#0.048, or 4.8% error rate\n\nWe can also get this information from the performance package using model_performance. This function tells us many things, including R2 and RMSE. We will discuss the rest of this later\n\nmodel_performance(lm1)\n\n# Indices of model performance\n\nAIC     |    AICc |     BIC |    R2 | R2 (adj.) |  RMSE | Sigma\n---------------------------------------------------------------\n829.532 | 829.876 | 856.189 | 0.825 |     0.822 | 0.823 | 0.831\n\n\n\n\ncombine data! Use tidy() from the broom package to get nice neat dataframes from models\n\ncoefs&lt;-tidy(lm1, quick=FALSE)\ncoefs\n\n# A tibble: 6 × 5\n  term             estimate std.error statistic   p.value\n  &lt;chr&gt;               &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n1 (Intercept)       17.7       0.108    165.    1.23e-316\n2 speciesChinstrap   0.0565    0.122      0.462 6.44e-  1\n3 speciesGentoo     -3.36      0.103    -32.8   2.66e-105\n4 sexmale            1.50      0.0911    16.5   5.18e- 45\n5 year2008          -0.211     0.114     -1.85  6.51e-  2\n6 year2009          -0.144     0.112     -1.28  2.01e-  1\n\nci&lt;-data.table(confint(lm1), keep.rownames='term')\nci\n\n               term      2.5 %      97.5 %\n1:      (Intercept) 17.5066798 17.93002315\n2: speciesChinstrap -0.1841312  0.29711599\n3:    speciesGentoo -3.5657427 -3.16176068\n4:          sexmale  1.3255522  1.68386318\n5:         year2008 -0.4342799  0.01321630\n6:         year2009 -0.3652582  0.07693551\n\ncidf&lt;-cbind(coefs,ci)\ncidf\n\n              term    estimate  std.error   statistic       p.value\n1      (Intercept) 17.71835149 0.10759801 164.6717403 1.229960e-316\n2 speciesChinstrap  0.05649237 0.12231501   0.4618597  6.444891e-01\n3    speciesGentoo -3.36375169 0.10267709 -32.7604888 2.664705e-105\n4          sexmale  1.50470770 0.09106922  16.5226813  5.184519e-45\n5         year2008 -0.21053181 0.11373677  -1.8510443  6.506474e-02\n6         year2009 -0.14416134 0.11238907  -1.2826989  2.005060e-01\n              term      2.5 %      97.5 %\n1      (Intercept) 17.5066798 17.93002315\n2 speciesChinstrap -0.1841312  0.29711599\n3    speciesGentoo -3.5657427 -3.16176068\n4          sexmale  1.3255522  1.68386318\n5         year2008 -0.4342799  0.01321630\n6         year2009 -0.3652582  0.07693551\n\ncolnames(cidf)\n\n[1] \"term\"      \"estimate\"  \"std.error\" \"statistic\" \"p.value\"   \"term\"     \n[7] \"2.5 %\"     \"97.5 %\"   \n\ncidf&lt;-cidf[,-6]\n\ncidf&lt;- cidf %&gt;%\n  rename(\"lower\"=\"2.5 %\",\n         \"upper\"=\"97.5 %\")\n\ncidf\n\n              term    estimate  std.error   statistic       p.value      lower\n1      (Intercept) 17.71835149 0.10759801 164.6717403 1.229960e-316 17.5066798\n2 speciesChinstrap  0.05649237 0.12231501   0.4618597  6.444891e-01 -0.1841312\n3    speciesGentoo -3.36375169 0.10267709 -32.7604888 2.664705e-105 -3.5657427\n4          sexmale  1.50470770 0.09106922  16.5226813  5.184519e-45  1.3255522\n5         year2008 -0.21053181 0.11373677  -1.8510443  6.506474e-02 -0.4342799\n6         year2009 -0.14416134 0.11238907  -1.2826989  2.005060e-01 -0.3652582\n        upper\n1 17.93002315\n2  0.29711599\n3 -3.16176068\n4  1.68386318\n5  0.01321630\n6  0.07693551\n\ncidf$term=as.factor(cidf$term)\n\nNow make a plot!\n\nggplot(data=cidf, aes(x=estimate, y=term))+\n  geom_vline(xintercept = 0, linetype=2)+\n  geom_point(size=3)+\n  geom_errorbarh(aes(xmax=lower, xmin=upper),height=0.2)+\n  theme_classic()\n\n\n\n\nNote that there are many ways to build a dataframe and plot for these. This is just one example. Here we can visualize that the effects of each variable individually are not very large."
  },
  {
    "objectID": "multiple_regression.html#an-example-with-numerical-vars",
    "href": "multiple_regression.html#an-example-with-numerical-vars",
    "title": "Multiple Regression & Model Selection",
    "section": "",
    "text": "1.) Run an additive model and an interactive model. View summaries2.) make the coef data neat and look at model fits3.) make a pretty graph!\n\n\n\nlm2&lt;-lm(bill_depth_mm ~ bill_length_mm + species, data=penguins)\nlm3&lt;-lm(bill_depth_mm ~ bill_length_mm * species, data=penguins)\n\n#look at summary\nsummary(lm2)\n\n\nCall:\nlm(formula = bill_depth_mm ~ bill_length_mm + species, data = penguins)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-2.4579 -0.6814 -0.0431  0.5441  3.5994 \n\nCoefficients:\n                 Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)      10.56526    0.69093  15.291  &lt; 2e-16 ***\nbill_length_mm    0.20044    0.01768  11.337  &lt; 2e-16 ***\nspeciesChinstrap -1.93308    0.22572  -8.564 4.26e-16 ***\nspeciesGentoo    -5.10332    0.19440 -26.252  &lt; 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.9543 on 329 degrees of freedom\nMultiple R-squared:  0.7673,    Adjusted R-squared:  0.7652 \nF-statistic: 361.6 on 3 and 329 DF,  p-value: &lt; 2.2e-16\n\nsummary(lm3)\n\n\nCall:\nlm(formula = bill_depth_mm ~ bill_length_mm * species, data = penguins)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-2.6574 -0.6559 -0.0483  0.5203  3.4990 \n\nCoefficients:\n                                Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)                     11.48771    1.15987   9.904  &lt; 2e-16 ***\nbill_length_mm                   0.17668    0.02981   5.928 7.79e-09 ***\nspeciesChinstrap                -3.91857    2.06731  -1.895   0.0589 .  \nspeciesGentoo                   -6.36675    1.77990  -3.577   0.0004 ***\nbill_length_mm:speciesChinstrap  0.04553    0.04594   0.991   0.3224    \nbill_length_mm:speciesGentoo     0.03093    0.04112   0.752   0.4525    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.9556 on 327 degrees of freedom\nMultiple R-squared:  0.7681,    Adjusted R-squared:  0.7645 \nF-statistic: 216.6 on 5 and 327 DF,  p-value: &lt; 2.2e-16\n\n\n\n\n\ntidy(lm2)\n\n# A tibble: 4 × 5\n  term             estimate std.error statistic  p.value\n  &lt;chr&gt;               &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n1 (Intercept)        10.6      0.691      15.3  2.98e-40\n2 bill_length_mm      0.200    0.0177     11.3  2.26e-25\n3 speciesChinstrap   -1.93     0.226      -8.56 4.26e-16\n4 speciesGentoo      -5.10     0.194     -26.3  1.04e-82\n\ntidy(lm3)\n\n# A tibble: 6 × 5\n  term                            estimate std.error statistic  p.value\n  &lt;chr&gt;                              &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n1 (Intercept)                      11.5       1.16       9.90  2.14e-20\n2 bill_length_mm                    0.177     0.0298     5.93  7.79e- 9\n3 speciesChinstrap                 -3.92      2.07      -1.90  5.89e- 2\n4 speciesGentoo                    -6.37      1.78      -3.58  4.00e- 4\n5 bill_length_mm:speciesChinstrap   0.0455    0.0459     0.991 3.22e- 1\n6 bill_length_mm:speciesGentoo      0.0309    0.0411     0.752 4.52e- 1\n\n#have a look at model fit\nglance(lm2) #R2 is really good-&gt; 76.5!\n\n# A tibble: 1 × 12\n  r.squared adj.r.squared sigma statistic   p.value    df logLik   AIC   BIC\n      &lt;dbl&gt;         &lt;dbl&gt; &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1     0.767         0.765 0.954      362. 8.88e-104     3  -455.  920.  939.\n# ℹ 3 more variables: deviance &lt;dbl&gt;, df.residual &lt;int&gt;, nobs &lt;int&gt;\n\nglance(lm3) #r2 is 0.768!\n\n# A tibble: 1 × 12\n  r.squared adj.r.squared sigma statistic   p.value    df logLik   AIC   BIC\n      &lt;dbl&gt;         &lt;dbl&gt; &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1     0.768         0.765 0.956      217. 1.87e-101     5  -454.  923.  949.\n# ℹ 3 more variables: deviance &lt;dbl&gt;, df.residual &lt;int&gt;, nobs &lt;int&gt;\n\n\n\n\n\nlm2g&lt;-lm2 %&gt;% \n  augment() %&gt;%\n  ggplot(aes(x=bill_length_mm, y=bill_depth_mm, color=species))+\n  geom_point()+\n  geom_line(aes(y=.fitted))+\n  theme_classic()\n\nlm3g&lt;-lm3 %&gt;% \n  augment() %&gt;%\n  ggplot(aes(x=bill_length_mm, y=bill_depth_mm, color=species))+\n  geom_point()+\n  geom_line(aes(y=.fitted))+\n  theme_classic()\n\nlm2g/lm3g #lm2 has same y int for all! lm3 does not (because of the interaction term!!!)"
  },
  {
    "objectID": "multiple_regression.html#model-selection",
    "href": "multiple_regression.html#model-selection",
    "title": "Multiple Regression & Model Selection",
    "section": "",
    "text": "1.) test assumptions (use performance!)2.) check the model performances and choose the best fit3.) MORE COMPLEX EXAMPLE :)\n\n\n\nmodel_performance(lm2)\n\n# Indices of model performance\n\nAIC     |    AICc |     BIC |    R2 | R2 (adj.) |  RMSE | Sigma\n---------------------------------------------------------------\n919.835 | 920.018 | 938.875 | 0.767 |     0.765 | 0.949 | 0.954\n\ncheck_model(lm2)#things look good, including low collinearity (VIF)\n\n\n\nvif(lm2)\n\n                   GVIF Df GVIF^(1/(2*Df))\nbill_length_mm 3.407875  1        1.846043\nspecies        3.407875  2        1.358692\n\nmodel_performance(lm3)\n\n# Indices of model performance\n\nAIC     |    AICc |     BIC |    R2 | R2 (adj.) |  RMSE | Sigma\n---------------------------------------------------------------\n922.729 | 923.074 | 949.386 | 0.768 |     0.765 | 0.947 | 0.956\n\ncheck_model(lm3) #things look good, but we have super high VIF\n\nModel has interaction terms. VIFs might be inflated.\n  You may check multicollinearity among predictors of a model without\n  interaction terms.\n\n\n\n\ncheck_collinearity(lm3) #a table of collinearity results - we would need to remove stuff from the model until the model has VIG that are all below 5 or so (below 10 is fine )\n\nModel has interaction terms. VIFs might be inflated.\n  You may check multicollinearity among predictors of a model without\n  interaction terms.\n\n\n# Check for Multicollinearity\n\nModerate Correlation\n\n           Term  VIF           VIF 95% CI Increased SE Tolerance\n bill_length_mm 9.66 [    7.94,    11.81]         3.11      0.10\n Tolerance 95% CI\n     [0.08, 0.13]\n\nHigh Correlation\n\n                   Term      VIF           VIF 95% CI Increased SE Tolerance\n                species 49899.43 [40473.88, 61520.04]       223.38  2.00e-05\n bill_length_mm:species 64717.85 [52493.21, 79789.42]       254.40  1.55e-05\n Tolerance 95% CI\n     [0.00, 0.00]\n     [0.00, 0.00]\n\nvif(lm3) #gives us a more useful table- tells us that species and species*bill length are looking bad. SO BAD that we cannot run this model....\n\nthere are higher-order terms (interactions) in this model\nconsider setting type = 'predictor'; see ?vif\n\n\n                               GVIF Df GVIF^(1/(2*Df))\nbill_length_mm             9.658784  1        3.107858\nspecies                49899.425896  2       14.945962\nbill_length_mm:species 64717.849261  2       15.949829\n\n\nWhat do we do? We remove interaction terms one by one, thereby simplifying the model, until the VIF are low enough to be meaningful (all below 5 is a good rule of thumb)\nsince the model without the * is just lm2, we are all set.\n\n\n\ncompare_performance(lm2,lm3,rank=TRUE)\n\n# Comparison of Model Performance Indices\n\nName | Model |    R2 | R2 (adj.) |  RMSE | Sigma | AIC weights | AICc weights | BIC weights | Performance-Score\n---------------------------------------------------------------------------------------------------------------\nlm2  |    lm | 0.767 |     0.765 | 0.949 | 0.954 |       0.810 |        0.822 |       0.995 |            71.43%\nlm3  |    lm | 0.768 |     0.765 | 0.947 | 0.956 |       0.190 |        0.178 |       0.005 |            28.57%\n\n\n-This is a comprehensive model check that uses many vars to assess the best model.\n-Here, lm2 wins easily! R2 are about the same, RMSE (residual mean square error) is about the same.\n-AICweights tell us thje relative likelihood of a model– closer to 1 is best. ***when you look at AIC scores (slightly different from AIC weights, the lower the value, the better)\n\n\n\nlm4&lt;-lm(bill_depth_mm ~ bill_length_mm * species * sex, data=penguins)\n\n#look at summary\nsummary(lm4)\n\n\nCall:\nlm(formula = bill_depth_mm ~ bill_length_mm * species * sex, \n    data = penguins)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-2.06730 -0.52452 -0.06471  0.45593  2.90319 \n\nCoefficients:\n                                         Estimate Std. Error t value Pr(&gt;|t|)\n(Intercept)                              14.84023    1.77185   8.376 1.73e-15\nbill_length_mm                            0.07466    0.04749   1.572   0.1169\nspeciesChinstrap                         -0.25160    2.77579  -0.091   0.9278\nspeciesGentoo                            -5.76780    2.98938  -1.929   0.0546\nsexmale                                   4.92359    2.46355   1.999   0.0465\nbill_length_mm:speciesChinstrap          -0.01026    0.06596  -0.155   0.8765\nbill_length_mm:speciesGentoo              0.03871    0.07101   0.545   0.5860\nbill_length_mm:sexmale                   -0.09177    0.06360  -1.443   0.1500\nspeciesChinstrap:sexmale                -11.35403    5.67926  -1.999   0.0464\nspeciesGentoo:sexmale                    -2.41202    3.94469  -0.611   0.5413\nbill_length_mm:speciesChinstrap:sexmale   0.24451    0.12006   2.037   0.0425\nbill_length_mm:speciesGentoo:sexmale      0.06197    0.09131   0.679   0.4978\n                                           \n(Intercept)                             ***\nbill_length_mm                             \nspeciesChinstrap                           \nspeciesGentoo                           .  \nsexmale                                 *  \nbill_length_mm:speciesChinstrap            \nbill_length_mm:speciesGentoo               \nbill_length_mm:sexmale                     \nspeciesChinstrap:sexmale                *  \nspeciesGentoo:sexmale                      \nbill_length_mm:speciesChinstrap:sexmale *  \nbill_length_mm:speciesGentoo:sexmale       \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.8175 on 321 degrees of freedom\nMultiple R-squared:  0.8334,    Adjusted R-squared:  0.8277 \nF-statistic: 145.9 on 11 and 321 DF,  p-value: &lt; 2.2e-16\n\n#make that pretty\ntidy(lm4)\n\n# A tibble: 12 × 5\n   term                                    estimate std.error statistic  p.value\n   &lt;chr&gt;                                      &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n 1 (Intercept)                              14.8       1.77      8.38   1.73e-15\n 2 bill_length_mm                            0.0747    0.0475    1.57   1.17e- 1\n 3 speciesChinstrap                         -0.252     2.78     -0.0906 9.28e- 1\n 4 speciesGentoo                            -5.77      2.99     -1.93   5.46e- 2\n 5 sexmale                                   4.92      2.46      2.00   4.65e- 2\n 6 bill_length_mm:speciesChinstrap          -0.0103    0.0660   -0.155  8.77e- 1\n 7 bill_length_mm:speciesGentoo              0.0387    0.0710    0.545  5.86e- 1\n 8 bill_length_mm:sexmale                   -0.0918    0.0636   -1.44   1.50e- 1\n 9 speciesChinstrap:sexmale                -11.4       5.68     -2.00   4.64e- 2\n10 speciesGentoo:sexmale                    -2.41      3.94     -0.611  5.41e- 1\n11 bill_length_mm:speciesChinstrap:sexmale   0.245     0.120     2.04   4.25e- 2\n12 bill_length_mm:speciesGentoo:sexmale      0.0620    0.0913    0.679  4.98e- 1\n\n#look at fit\nglance(lm4) #nice r2!\n\n# A tibble: 1 × 12\n  r.squared adj.r.squared sigma statistic   p.value    df logLik   AIC   BIC\n      &lt;dbl&gt;         &lt;dbl&gt; &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1     0.833         0.828 0.818      146. 9.55e-118    11  -399.  825.  874.\n# ℹ 3 more variables: deviance &lt;dbl&gt;, df.residual &lt;int&gt;, nobs &lt;int&gt;\n\n# make a pretty graph!\nlm4 %&gt;% \n  augment() %&gt;%\n  ggplot(aes(x=bill_length_mm, y=bill_depth_mm,color=species))+\n  geom_point()+\n  geom_line(aes(y=.fitted))+\n  theme_classic()\n\n\n\n#oops, that isn't quite right. What are we missing?\nlm4g2&lt;-lm4 %&gt;% \n  augment() %&gt;%\n  ggplot(aes(x=bill_length_mm, y=bill_depth_mm,color=species, shape=sex))+\n  geom_point()+\n  geom_line(aes(y=.fitted))+\n  theme_classic()\n\n#OR\n\nlm4g3&lt;-lm4 %&gt;% \n  augment() %&gt;%\n  ggplot(aes(x=bill_length_mm, y=bill_depth_mm,color=species, shape=sex))+\n  geom_point()+\n  geom_line(aes(y=.fitted))+\n  theme_classic()+\n  facet_wrap(~sex)\n\n#compare graphs!\nlm4g2/lm4g3\n\n\n\n\n\n\n\ncoefs&lt;-tidy(lm4)\ncoefs\n\n# A tibble: 12 × 5\n   term                                    estimate std.error statistic  p.value\n   &lt;chr&gt;                                      &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n 1 (Intercept)                              14.8       1.77      8.38   1.73e-15\n 2 bill_length_mm                            0.0747    0.0475    1.57   1.17e- 1\n 3 speciesChinstrap                         -0.252     2.78     -0.0906 9.28e- 1\n 4 speciesGentoo                            -5.77      2.99     -1.93   5.46e- 2\n 5 sexmale                                   4.92      2.46      2.00   4.65e- 2\n 6 bill_length_mm:speciesChinstrap          -0.0103    0.0660   -0.155  8.77e- 1\n 7 bill_length_mm:speciesGentoo              0.0387    0.0710    0.545  5.86e- 1\n 8 bill_length_mm:sexmale                   -0.0918    0.0636   -1.44   1.50e- 1\n 9 speciesChinstrap:sexmale                -11.4       5.68     -2.00   4.64e- 2\n10 speciesGentoo:sexmale                    -2.41      3.94     -0.611  5.41e- 1\n11 bill_length_mm:speciesChinstrap:sexmale   0.245     0.120     2.04   4.25e- 2\n12 bill_length_mm:speciesGentoo:sexmale      0.0620    0.0913    0.679  4.98e- 1\n\ncis&lt;-data.table(confint(lm4), keep.rownames = 'term')\ncis\n\n                                       term         2.5 %      97.5 %\n 1:                             (Intercept)  11.354321139 18.32613470\n 2:                          bill_length_mm  -0.018764802  0.16808708\n 3:                        speciesChinstrap  -5.712636771  5.20943941\n 4:                           speciesGentoo -11.649049135  0.11344307\n 5:                                 sexmale   0.076849623  9.77033563\n 6:         bill_length_mm:speciesChinstrap  -0.140025236  0.11951459\n 7:            bill_length_mm:speciesGentoo  -0.100987370  0.17840241\n 8:                  bill_length_mm:sexmale  -0.216904270  0.03335517\n 9:                speciesChinstrap:sexmale -22.527308826 -0.18075321\n10:                   speciesGentoo:sexmale -10.172726533  5.34869591\n11: bill_length_mm:speciesChinstrap:sexmale   0.008304843  0.48071943\n12:    bill_length_mm:speciesGentoo:sexmale  -0.117669226  0.24160110\n\nCI&lt;-merge(coefs,cis)\nCI\n\n                                      term     estimate  std.error   statistic\n1                              (Intercept)  14.84022792 1.77185076  8.37555183\n2                           bill_length_mm   0.07466114 0.04748745  1.57222883\n3                   bill_length_mm:sexmale  -0.09177455 0.06360216 -1.44294716\n4          bill_length_mm:speciesChinstrap  -0.01025532 0.06596072 -0.15547623\n5  bill_length_mm:speciesChinstrap:sexmale   0.24451214 0.12006175  2.03655314\n6             bill_length_mm:speciesGentoo   0.03870752 0.07100548  0.54513425\n7     bill_length_mm:speciesGentoo:sexmale   0.06196594 0.09130672  0.67865695\n8                                  sexmale   4.92359263 2.46354990  1.99857638\n9                         speciesChinstrap  -0.25159868 2.77578981 -0.09064039\n10                speciesChinstrap:sexmale -11.35403102 5.67926283 -1.99920859\n11                           speciesGentoo  -5.76780303 2.98937724 -1.92943298\n12                   speciesGentoo:sexmale  -2.41201531 3.94469014 -0.61145875\n        p.value         2.5 %      97.5 %\n1  1.731943e-15  11.354321139 18.32613470\n2  1.168826e-01  -0.018764802  0.16808708\n3  1.500104e-01  -0.216904270  0.03335517\n4  8.765436e-01  -0.140025236  0.11951459\n5  4.251519e-02   0.008304843  0.48071943\n6  5.860397e-01  -0.100987370  0.17840241\n7  4.978442e-01  -0.117669226  0.24160110\n8  4.649725e-02   0.076849623  9.77033563\n9  9.278349e-01  -5.712636771  5.20943941\n10 4.642846e-02 -22.527308826 -0.18075321\n11 5.455827e-02 -11.649049135  0.11344307\n12 5.413287e-01 -10.172726533  5.34869591\n\nCI&lt;- CI %&gt;%\n  rename(\"lower\"=\"2.5 %\",\n         \"upper\"=\"97.5 %\")\nCI\n\n                                      term     estimate  std.error   statistic\n1                              (Intercept)  14.84022792 1.77185076  8.37555183\n2                           bill_length_mm   0.07466114 0.04748745  1.57222883\n3                   bill_length_mm:sexmale  -0.09177455 0.06360216 -1.44294716\n4          bill_length_mm:speciesChinstrap  -0.01025532 0.06596072 -0.15547623\n5  bill_length_mm:speciesChinstrap:sexmale   0.24451214 0.12006175  2.03655314\n6             bill_length_mm:speciesGentoo   0.03870752 0.07100548  0.54513425\n7     bill_length_mm:speciesGentoo:sexmale   0.06196594 0.09130672  0.67865695\n8                                  sexmale   4.92359263 2.46354990  1.99857638\n9                         speciesChinstrap  -0.25159868 2.77578981 -0.09064039\n10                speciesChinstrap:sexmale -11.35403102 5.67926283 -1.99920859\n11                           speciesGentoo  -5.76780303 2.98937724 -1.92943298\n12                   speciesGentoo:sexmale  -2.41201531 3.94469014 -0.61145875\n        p.value         lower       upper\n1  1.731943e-15  11.354321139 18.32613470\n2  1.168826e-01  -0.018764802  0.16808708\n3  1.500104e-01  -0.216904270  0.03335517\n4  8.765436e-01  -0.140025236  0.11951459\n5  4.251519e-02   0.008304843  0.48071943\n6  5.860397e-01  -0.100987370  0.17840241\n7  4.978442e-01  -0.117669226  0.24160110\n8  4.649725e-02   0.076849623  9.77033563\n9  9.278349e-01  -5.712636771  5.20943941\n10 4.642846e-02 -22.527308826 -0.18075321\n11 5.455827e-02 -11.649049135  0.11344307\n12 5.413287e-01 -10.172726533  5.34869591\n\nciplot&lt;-ggplot(data=CI, aes(x=estimate, y=term))+\n  geom_vline(xintercept = 0, linetype=2)+\n  geom_point(size=3)+\n  geom_errorbarh(aes(xmin=lower, xmax=upper), height=0.2)+\n  theme_classic()\n\nciplot\n\n\n\n#a graph of the good stuff\nciplot/lm4g2"
  },
  {
    "objectID": "CIs.html#lets-take-a-sample-of-the-penguins-data",
    "href": "CIs.html#lets-take-a-sample-of-the-penguins-data",
    "title": "Bootstrapping and Confidence Intervals",
    "section": "Let’s take a sample of the penguins data",
    "text": "Let’s take a sample of the penguins data\n\nlilpen&lt;- penguins %&gt;%\n  slice_sample(n=10, replace= FALSE) %&gt;%\n  select(species, sex, year, bill_length_mm)\n\nlilpen\n\n# A tibble: 10 × 4\n   species   sex     year bill_length_mm\n   &lt;fct&gt;     &lt;fct&gt;  &lt;int&gt;          &lt;dbl&gt;\n 1 Gentoo    female  2007           48.7\n 2 Adelie    male    2008           39.6\n 3 Gentoo    female  2009           50.5\n 4 Adelie    female  2007           40.3\n 5 Gentoo    male    2008           44.4\n 6 Adelie    female  2009           40.2\n 7 Gentoo    female  2007           46.2\n 8 Gentoo    female  2007           45.1\n 9 Chinstrap female  2007           58  \n10 Gentoo    male    2009           52.5\n\n#let's turn resampling on (let's us include duplicates-- we can choose from entire dataset AGAIN when we collect a separate sample)\nlilpen2&lt;- penguins %&gt;%\n  slice_sample(n=10, replace= TRUE) %&gt;%\n  select(species, sex, year, bill_length_mm)\n\nlilpen2 #if we run this enough times we will eventually see duplicates! This is the concept upon which bootstrapping is based\n\n# A tibble: 10 × 4\n   species   sex     year bill_length_mm\n   &lt;fct&gt;     &lt;fct&gt;  &lt;int&gt;          &lt;dbl&gt;\n 1 Adelie    male    2008           40.1\n 2 Gentoo    female  2008           45.5\n 3 Chinstrap male    2007           51.3\n 4 Gentoo    female  2007           46.5\n 5 Adelie    female  2008           33.1\n 6 Adelie    female  2008           35.5\n 7 Adelie    female  2007           39.5\n 8 Chinstrap male    2007           48.5\n 9 Adelie    female  2009           39.6\n10 Gentoo    male    2009           46.8"
  },
  {
    "objectID": "CIs.html#now-we-can-scale-up-working-towards-bootstrapping",
    "href": "CIs.html#now-we-can-scale-up-working-towards-bootstrapping",
    "title": "Bootstrapping and Confidence Intervals",
    "section": "Now we can scale up (working towards bootstrapping)",
    "text": "Now we can scale up (working towards bootstrapping)\n\nn&lt;- 200\n\norig_sample &lt;- penguins %&gt;%\n  slice_sample(n=n, replace=FALSE)\n\norig_sample\n\n# A tibble: 200 × 8\n   species   island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;     &lt;fct&gt;           &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie    Biscoe           39.7          17.7               193        3200\n 2 Gentoo    Biscoe           47.5          14                 212        4875\n 3 Chinstrap Dream            50.5          18.4               200        3400\n 4 Gentoo    Biscoe           46.6          14.2               210        4850\n 5 Chinstrap Dream            46.6          17.8               193        3800\n 6 Adelie    Dream            40.3          18.5               196        4350\n 7 Gentoo    Biscoe           45.1          14.4               210        4400\n 8 Adelie    Biscoe           35.3          18.9               187        3800\n 9 Gentoo    Biscoe           45.1          14.5               207        5050\n10 Gentoo    Biscoe           42.9          13.1               215        5000\n# ℹ 190 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n#with this sample in hand we can draw a rsample of the sample size and calc mean arrival dealy\n\norig_sample %&gt;%\n  slice_sample(n=n, replace=TRUE) %&gt;%\n  summarize(meanbill=mean(bill_length_mm))\n\n# A tibble: 1 × 1\n  meanbill\n     &lt;dbl&gt;\n1       NA\n\n#44.2\n\n#compare to orignal dataset\npenguins %&gt;%\n  summarize(meanbill=mean(bill_length_mm))\n\n# A tibble: 1 × 1\n  meanbill\n     &lt;dbl&gt;\n1       NA\n\n#44.0 -- different because n=150 in the df but we sampled extra (n=200)\n\n#by repeating this process many times we can see how much variation there is from sample to sample\n\npen_200_bs&lt;- 1:1000 %&gt;% #1000 = number of trials / resamples\n  map_dfr(\n    ~orig_sample %&gt;%\n      slice_sample(n=n, replace=TRUE) %&gt;%\n      summarize(meanbill=mean(bill_length_mm))) %&gt;%\n  mutate(n=n)\n\npen_200_bs #you will see we now have means for 1000 trials!\n\n# A tibble: 1,000 × 2\n   meanbill     n\n      &lt;dbl&gt; &lt;dbl&gt;\n 1     NA     200\n 2     NA     200\n 3     NA     200\n 4     NA     200\n 5     43.6   200\n 6     NA     200\n 7     NA     200\n 8     NA     200\n 9     44.0   200\n10     NA     200\n# ℹ 990 more rows"
  },
  {
    "objectID": "CIs.html#we-can-compare-outputs-to-see-how-things-change",
    "href": "CIs.html#we-can-compare-outputs-to-see-how-things-change",
    "title": "Bootstrapping and Confidence Intervals",
    "section": "We can compare outputs to see how things change",
    "text": "We can compare outputs to see how things change\n\npen_200_bs %&gt;%\n  skim(meanbill) #mean = 44, sd=0.391\n\n\nData summary\n\n\nName\nPiped data\n\n\nNumber of rows\n1000\n\n\nNumber of columns\n2\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\nnumeric\n1\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nmeanbill\n863\n0.14\n43.62\n0.39\n42.58\n43.39\n43.61\n43.86\n44.54\n▁▃▇▆▂\n\n\n\n\n#histo\nbootplot&lt;-ggplot(data=pen_200_bs, aes(x=meanbill))+\n         geom_histogram(binwidth=0.1)\nbootplot\n\nWarning: Removed 863 rows containing non-finite values (`stat_bin()`).\n\n\n\n\n#check against original df\npen_df_bs&lt;- 1:1000 %&gt;% #1000 = number of trials / resamples\n  map_dfr(\n    ~penguins %&gt;%\n      slice_sample(n=n, replace=TRUE) %&gt;%\n      summarize(meanbill=mean(bill_length_mm))) %&gt;%\n  mutate(n=n)\n\npen_df_bs \n\n# A tibble: 1,000 × 2\n   meanbill     n\n      &lt;dbl&gt; &lt;dbl&gt;\n 1     NA     200\n 2     NA     200\n 3     NA     200\n 4     NA     200\n 5     NA     200\n 6     44.1   200\n 7     NA     200\n 8     NA     200\n 9     NA     200\n10     NA     200\n# ℹ 990 more rows\n\npen_df_bs %&gt;%\n  skim(meanbill) #mean=44, sd=0.370\n\n\nData summary\n\n\nName\nPiped data\n\n\nNumber of rows\n1000\n\n\nNumber of columns\n2\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\nnumeric\n1\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nmeanbill\n685\n0.31\n43.88\n0.38\n42.94\n43.63\n43.88\n44.14\n44.97\n▂▆▇▅▁\n\n\n\n\n#histo\nraw&lt;-ggplot(data=pen_df_bs, aes(x=meanbill))+\n  geom_histogram(binwidth=0.1)\nraw\n\nWarning: Removed 685 rows containing non-finite values (`stat_bin()`).\n\n\n\n\n#compare:\nraw/bootplot\n\nWarning: Removed 685 rows containing non-finite values (`stat_bin()`).\nRemoved 863 rows containing non-finite values (`stat_bin()`).\n\n\n\n\n\n-The distribution of values we get when we build a series of bootstrap trials is called the bootstrap distribution. It is not exactly the same as the sampling distribution but for sufficiently large n is is a good approximation!\n-Remember that if we have a roughly normal distribution we can get 95% CIs by using the rule of thump CI=2SE (or standard error of the mean) #the “real” value here is 1.96SE"
  },
  {
    "objectID": "CIs.html#calculating-boostrapped-cis-thus-could-look-like-this",
    "href": "CIs.html#calculating-boostrapped-cis-thus-could-look-like-this",
    "title": "Bootstrapping and Confidence Intervals",
    "section": "calculating boostrapped CIs thus, could look like this",
    "text": "calculating boostrapped CIs thus, could look like this\n\npen_200_bs&lt;- 1:1000 %&gt;% #1000 = number of trials / resamples\n  map_dfr(\n    ~orig_sample %&gt;%\n      slice_sample(n=n, replace=TRUE) %&gt;%\n      summarize(meanbill=mean(bill_length_mm))) %&gt;%\n  mutate(n=n)\n\ncalc_CIs&lt;-pen_200_bs %&gt;%\n  summarize(meanbillboot=mean(meanbill), CI=1.96*sd(meanbill))\n\ncalc_CIs\n\n# A tibble: 1 × 2\n  meanbillboot    CI\n         &lt;dbl&gt; &lt;dbl&gt;\n1           NA    NA\n\n\nWe did it!"
  }
]